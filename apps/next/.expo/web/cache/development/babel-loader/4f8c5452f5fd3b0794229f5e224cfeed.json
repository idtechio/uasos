{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useLayoutEffect, useEffect, useState } from \"react\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { base } from \"../style/theme.config\";\nvar BREAK_POINTS = {\n  mobile: base.breakPoints.mobile,\n  tablet: base.breakPoints.tablet,\n  sm: base.breakPoints.sm,\n  md: base.breakPoints.md,\n  lg: base.breakPoints.lg,\n  xl: base.breakPoints.xl,\n  xxl: base.breakPoints.xxl\n};\nvar useIsomorphicEffect = typeof window === \"undefined\" ? useEffect : useLayoutEffect;\nexport function useBreakPointGetter() {\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width;\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      _width = _useState2[0],\n      setWidth = _useState2[1];\n\n  var parsedWidth = _width ? width : undefined;\n  useIsomorphicEffect(function () {\n    setWidth(function (current) {\n      return current != null ? current : width;\n    });\n  }, [width]);\n  return useCallback(function (params) {\n    var _params$default;\n\n    switch (true) {\n      case params.xxl && width >= BREAK_POINTS.xxl:\n        return params.xxl;\n\n      case params.xl && width >= BREAK_POINTS.xl:\n        return params.xl;\n\n      case params.lg && parsedWidth && parsedWidth >= base.breakPoints.lg:\n        return params.lg;\n\n      case params.md && parsedWidth && parsedWidth >= base.breakPoints.md:\n        return params.md;\n\n      case params.sm && parsedWidth && parsedWidth >= base.breakPoints.sm:\n        return params.sm;\n\n      case params.tablet && parsedWidth && parsedWidth >= base.breakPoints.tablet:\n        return params.tablet;\n\n      case params.mobile && parsedWidth && parsedWidth >= base.breakPoints.mobile:\n        return params.mobile;\n\n      default:\n        return (_params$default = params.default) != null ? _params$default : null;\n    }\n  }, [width, parsedWidth]);\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/hooks/useBreakPointGetter.ts"],"names":["useCallback","useLayoutEffect","useEffect","useState","base","BREAK_POINTS","mobile","breakPoints","tablet","sm","md","lg","xl","xxl","useIsomorphicEffect","window","useBreakPointGetter","useWindowDimensions","width","undefined","_width","setWidth","parsedWidth","current","params","default"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,SAAvC,EAAkDC,QAAlD,QAAkE,OAAlE;;AAEA,SAASC,IAAT;AAaA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAEF,IAAI,CAACG,WAAL,CAAiBD,MADN;AAEnBE,EAAAA,MAAM,EAAEJ,IAAI,CAACG,WAAL,CAAiBC,MAFN;AAGnBC,EAAAA,EAAE,EAAEL,IAAI,CAACG,WAAL,CAAiBE,EAHF;AAInBC,EAAAA,EAAE,EAAEN,IAAI,CAACG,WAAL,CAAiBG,EAJF;AAKnBC,EAAAA,EAAE,EAAEP,IAAI,CAACG,WAAL,CAAiBI,EALF;AAMnBC,EAAAA,EAAE,EAAER,IAAI,CAACG,WAAL,CAAiBK,EANF;AAOnBC,EAAAA,GAAG,EAAET,IAAI,CAACG,WAAL,CAAiBM;AAPH,CAArB;AAUA,IAAMC,mBAAmB,GACvB,OAAOC,MAAP,KAAkB,WAAlB,GAAgCb,SAAhC,GAA4CD,eAD9C;AAGA,OAAO,SAASe,mBAAT,GAA+B;AACpC,6BAAkBC,mBAAmB,EAArC;AAAA,MAAQC,KAAR,wBAAQA,KAAR;;AACA,kBAA2Bf,QAAQ,CAAqBgB,SAArB,CAAnC;AAAA;AAAA,MAAOC,MAAP;AAAA,MAAeC,QAAf;;AACA,MAAMC,WAAW,GAAGF,MAAM,GAAGF,KAAH,GAAWC,SAArC;AAIAL,EAAAA,mBAAmB,CAAC,YAAM;AACxBO,IAAAA,QAAQ,CAAC,UAACE,OAAD;AAAA,aAAaA,OAAb,WAAaA,OAAb,GAAwBL,KAAxB;AAAA,KAAD,CAAR;AACD,GAFkB,EAEhB,CAACA,KAAD,CAFgB,CAAnB;AAIA,SAAOlB,WAAW,CAChB,UAAIwB,MAAJ,EAA0B;AAAA;;AACxB,YAAQ,IAAR;AACE,WAAKA,MAAM,CAACX,GAAP,IAAcK,KAAK,IAAIb,YAAY,CAACQ,GAAzC;AACE,eAAOW,MAAM,CAACX,GAAd;;AACF,WAAKW,MAAM,CAACZ,EAAP,IAAaM,KAAK,IAAIb,YAAY,CAACO,EAAxC;AACE,eAAOY,MAAM,CAACZ,EAAd;;AACF,WAAKY,MAAM,CAACb,EAAP,IAAaW,WAAb,IAA4BA,WAAW,IAAIlB,IAAI,CAACG,WAAL,CAAiBI,EAAjE;AACE,eAAOa,MAAM,CAACb,EAAd;;AACF,WAAKa,MAAM,CAACd,EAAP,IAAaY,WAAb,IAA4BA,WAAW,IAAIlB,IAAI,CAACG,WAAL,CAAiBG,EAAjE;AACE,eAAOc,MAAM,CAACd,EAAd;;AACF,WAAKc,MAAM,CAACf,EAAP,IAAaa,WAAb,IAA4BA,WAAW,IAAIlB,IAAI,CAACG,WAAL,CAAiBE,EAAjE;AACE,eAAOe,MAAM,CAACf,EAAd;;AACF,WAAKe,MAAM,CAAChB,MAAP,IACHc,WADG,IAEHA,WAAW,IAAIlB,IAAI,CAACG,WAAL,CAAiBC,MAFlC;AAGE,eAAOgB,MAAM,CAAChB,MAAd;;AACF,WAAKgB,MAAM,CAAClB,MAAP,IACHgB,WADG,IAEHA,WAAW,IAAIlB,IAAI,CAACG,WAAL,CAAiBD,MAFlC;AAGE,eAAOkB,MAAM,CAAClB,MAAd;;AACF;AACE,kCAAOkB,MAAM,CAACC,OAAd,8BAAyB,IAAzB;AApBJ;AAsBD,GAxBe,EAyBhB,CAACP,KAAD,EAAQI,WAAR,CAzBgB,CAAlB;AA2BD","sourcesContent":["import { useCallback, useLayoutEffect, useEffect, useState } from \"react\";\nimport { useWindowDimensions } from \"react-native\";\nimport { base } from \"../style/theme.config\";\n\ninterface Params<T> {\n  default?: T;\n  mobile?: T;\n  tablet?: T;\n  sm?: T;\n  md?: T;\n  lg?: T;\n  xl?: T;\n  xxl?: T;\n}\n\nconst BREAK_POINTS = {\n  mobile: base.breakPoints.mobile,\n  tablet: base.breakPoints.tablet,\n  sm: base.breakPoints.sm,\n  md: base.breakPoints.md,\n  lg: base.breakPoints.lg,\n  xl: base.breakPoints.xl,\n  xxl: base.breakPoints.xxl,\n};\n\nconst useIsomorphicEffect =\n  typeof window === \"undefined\" ? useEffect : useLayoutEffect;\n\nexport function useBreakPointGetter() {\n  const { width } = useWindowDimensions();\n  const [_width, setWidth] = useState<number | undefined>(undefined);\n  const parsedWidth = _width ? width : undefined;\n\n  /** This is a workaround for different class names on Server and Client */\n\n  useIsomorphicEffect(() => {\n    setWidth((current) => current ?? width);\n  }, [width]);\n\n  return useCallback(\n    <T>(params: Params<T>) => {\n      switch (true) {\n        case params.xxl && width >= BREAK_POINTS.xxl:\n          return params.xxl;\n        case params.xl && width >= BREAK_POINTS.xl:\n          return params.xl;\n        case params.lg && parsedWidth && parsedWidth >= base.breakPoints.lg:\n          return params.lg;\n        case params.md && parsedWidth && parsedWidth >= base.breakPoints.md:\n          return params.md;\n        case params.sm && parsedWidth && parsedWidth >= base.breakPoints.sm:\n          return params.sm;\n        case params.tablet &&\n          parsedWidth &&\n          parsedWidth >= base.breakPoints.tablet:\n          return params.tablet;\n        case params.mobile &&\n          parsedWidth &&\n          parsedWidth >= base.breakPoints.mobile:\n          return params.mobile;\n        default:\n          return params.default ?? null;\n      }\n    },\n    [width, parsedWidth]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}