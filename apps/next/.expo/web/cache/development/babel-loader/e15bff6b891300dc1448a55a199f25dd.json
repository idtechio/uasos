{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport React from \"react\";\nimport { sanitize } from \"../../helpers/sanitize\";\nimport { DataWrapper } from \"./style\";\nimport styled from \"styled-components/native\";\nvar blueStyle = {\n  borderColor: \"#0057B8\",\n  backgroundColor: \"#E7F2FF\"\n};\nvar Label = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  font-weight: 400;\\n  font-size: 16px;\\n  line-height: 18.75px;\\n\\n  color: \", \";\\n\"])), function (_ref) {\n  var theme = _ref.theme,\n      isBlue = _ref.isBlue;\n  return isBlue ? \"#0057B8\" : theme.colors.blue;\n});\nvar LabelText = styled.Text(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\"])));\nexport default function DataField(_ref2) {\n  var Icon = _ref2.Icon,\n      _ref2$iconWidth = _ref2.iconWidth,\n      iconWidth = _ref2$iconWidth === void 0 ? 15 : _ref2$iconWidth,\n      _ref2$iconHeight = _ref2.iconHeight,\n      iconHeight = _ref2$iconHeight === void 0 ? 15 : _ref2$iconHeight,\n      label = _ref2.label,\n      _ref2$isBlue = _ref2.isBlue,\n      isBlue = _ref2$isBlue === void 0 ? false : _ref2$isBlue;\n  return React.createElement(React.Fragment, null, React.createElement(DataWrapper, {\n    style: isBlue && blueStyle\n  }, Icon ? React.createElement(Icon, {\n    width: iconWidth,\n    height: iconHeight,\n    style: isBlue ? {\n      color: \"#0057B8\"\n    } : {}\n  }) : null, React.createElement(Label, {\n    isBlue: isBlue\n  }, React.createElement(LabelText, null, sanitize(label)))));\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/DetailsSection/DataField.tsx"],"names":["React","sanitize","DataWrapper","styled","blueStyle","borderColor","backgroundColor","Label","View","theme","isBlue","colors","blue","LabelText","Text","DataField","Icon","iconWidth","iconHeight","label","color"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT;AACA,SAASC,WAAT;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAWA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,WAAW,EAAE,SADG;AAEhBC,EAAAA,eAAe,EAAE;AAFD,CAAlB;AAOA,IAAMC,KAAK,GAAGJ,MAAM,CAACK,IAAV,iKAKA;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,MAAV,QAAUA,MAAV;AAAA,SAAwBA,MAAM,GAAG,SAAH,GAAeD,KAAK,CAACE,MAAN,CAAaC,IAA1D;AAAA,CALA,CAAX;AAQA,IAAMC,SAAS,GAAGV,MAAM,CAACW,IAAV,4EAAf;AAEA,eAAe,SAASC,SAAT,QAMI;AAAA,MALjBC,IAKiB,SALjBA,IAKiB;AAAA,8BAJjBC,SAIiB;AAAA,MAJjBA,SAIiB,gCAJL,EAIK;AAAA,+BAHjBC,UAGiB;AAAA,MAHjBA,UAGiB,iCAHJ,EAGI;AAAA,MAFjBC,KAEiB,SAFjBA,KAEiB;AAAA,2BADjBT,MACiB;AAAA,MADjBA,MACiB,6BADR,KACQ;AACjB,SACE,0CACE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEA,MAAM,IAAIN;AAA9B,KACGY,IAAI,GACH,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEC,SADT;AAEE,IAAA,MAAM,EAAEC,UAFV;AAGE,IAAA,KAAK,EAAER,MAAM,GAAG;AAAEU,MAAAA,KAAK,EAAE;AAAT,KAAH,GAA0B;AAHzC,IADG,GAMD,IAPN,EAQE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEV;AAAf,KACE,oBAAC,SAAD,QAAYT,QAAQ,CAACkB,KAAD,CAApB,CADF,CARF,CADF,CADF;AAgBD","sourcesContent":["import React from \"react\";\nimport { sanitize } from \"../../helpers/sanitize\";\nimport { DataWrapper } from \"./style\";\nimport styled from \"styled-components/native\";\nimport { Theme } from \"../../style/theme.config\";\n\ntype DataFieldProps = {\n  Icon?: React.ElementType;\n  iconWidth?: number;\n  iconHeight?: number;\n  label: string;\n  isBlue?: boolean;\n};\n\nconst blueStyle = {\n  borderColor: \"#0057B8\",\n  backgroundColor: \"#E7F2FF\",\n};\n\ntype LabelProps = { isBlue: boolean; theme: Theme };\n\nconst Label = styled.View<LabelProps>`\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 18.75px;\n\n  color: ${({ theme, isBlue }) => (isBlue ? \"#0057B8\" : theme.colors.blue)};\n`;\n\nconst LabelText = styled.Text``;\n\nexport default function DataField({\n  Icon,\n  iconWidth = 15,\n  iconHeight = 15,\n  label,\n  isBlue = false,\n}: DataFieldProps) {\n  return (\n    <>\n      <DataWrapper style={isBlue && blueStyle}>\n        {Icon ? (\n          <Icon\n            width={iconWidth}\n            height={iconHeight}\n            style={isBlue ? { color: \"#0057B8\" } : {}}\n          />\n        ) : null}\n        <Label isBlue={isBlue}>\n          <LabelText>{sanitize(label)}</LabelText>\n        </Label>\n      </DataWrapper>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}