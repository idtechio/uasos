{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { getRequestsList } from \"../client-api/requests\";\nimport { GuestHostStatus, GuestHostType } from \"../components/SupportSection/mapper\";\nimport addGuestToApi from \"../helpers/addGuestToApi\";\nimport { API_REFRESH_LATENCY, uid } from \"../helpers/misc\";\nimport { QueryKeys } from \"./queryKeys\";\nimport updateGuestToApi from \"../helpers/updateGuestToApi\";\nimport { useProgressToastContext } from \"../providers/ProgressToastProvider\";\nexport var useRequestsList = function useRequestsList() {\n  return useQuery([QueryKeys.GET_REQUESTS_LIST], getRequestsList);\n};\nexport var useAddGuestToApi = function useAddGuestToApi() {\n  var queryClient = useQueryClient();\n\n  var _useProgressToastCont = useProgressToastContext(),\n      actions = _useProgressToastCont.actions;\n\n  return useMutation(addGuestToApi, {\n    onSuccess: function onSuccess(_, variables) {\n      var _variables$name, _variables$phone_num, _variables$email, _variables$country, _variables$city;\n\n      var clientOnlyId = uid();\n\n      var newItem = _objectSpread(_objectSpread({}, variables), {}, {\n        name: (_variables$name = variables.name) != null ? _variables$name : \"\",\n        phone_num: (_variables$phone_num = variables.phone_num) != null ? _variables$phone_num : \"\",\n        email: (_variables$email = variables.email) != null ? _variables$email : \"\",\n        id: \"not-yet-ready-\" + clientOnlyId,\n        status: GuestHostStatus.DEFAULT,\n        type: GuestHostType.LOOKING_FOR_MATCH,\n        country: (_variables$country = variables.country) != null ? _variables$country : \"\",\n        city: (_variables$city = variables.city) != null ? _variables$city : \"\",\n        is_pregnant: variables.is_pregnant,\n        is_ukrainian_nationality: variables.is_ukrainian_nationality,\n        is_with_animal: variables.is_with_animal,\n        is_with_disability: variables.is_with_disability,\n        is_with_elderly: variables.is_with_elderly,\n        client_only: true\n      });\n\n      actions.showProgressToast();\n      queryClient.setQueryData([QueryKeys.GET_REQUESTS_LIST], function (data) {\n        return data && _objectSpread(_objectSpread({}, data), {}, {\n          requests: [].concat(_toConsumableArray(data.requests), [newItem])\n        });\n      });\n      setTimeout(function () {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    }\n  });\n};\nexport var useUpdateGuestToApi = function useUpdateGuestToApi() {\n  var queryClient = useQueryClient();\n\n  var _useProgressToastCont2 = useProgressToastContext(),\n      actions = _useProgressToastCont2.actions;\n\n  return useMutation(updateGuestToApi, {\n    onSuccess: function onSuccess(_, variables) {\n      queryClient.setQueryData([QueryKeys.GET_REQUESTS_LIST], function (data) {\n        return data && _objectSpread(_objectSpread({}, data), {}, {\n          requests: data.requests.map(function (request) {\n            if (request.id === variables.id) {\n              return _objectSpread(_objectSpread(_objectSpread({}, request), variables), {}, {\n                client_only: true\n              });\n            }\n\n            return request;\n          })\n        });\n      });\n      actions.showProgressToast();\n    }\n  });\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/queries/useRequestsList.ts"],"names":["useMutation","useQuery","useQueryClient","getRequestsList","GuestHostStatus","GuestHostType","addGuestToApi","API_REFRESH_LATENCY","uid","QueryKeys","updateGuestToApi","useProgressToastContext","useRequestsList","GET_REQUESTS_LIST","useAddGuestToApi","queryClient","actions","onSuccess","_","variables","clientOnlyId","newItem","name","phone_num","email","id","status","DEFAULT","type","LOOKING_FOR_MATCH","country","city","is_pregnant","is_ukrainian_nationality","is_with_animal","is_with_disability","is_with_elderly","client_only","showProgressToast","setQueryData","data","requests","setTimeout","invalidateQueries","GET_OFFERS_LIST","useUpdateGuestToApi","map","request"],"mappings":"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","sourcesContent":["import { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { RequestProps } from \"../../pages/api/listing/requests\";\nimport { getRequestsList, GetRequestsListDTO } from \"../client-api/requests\";\nimport {\n  GuestHostStatus,\n  GuestHostType,\n  Boolean,\n} from \"../components/SupportSection/mapper\";\nimport addGuestToApi from \"../helpers/addGuestToApi\";\nimport { API_REFRESH_LATENCY, uid } from \"../helpers/misc\";\nimport { QueryKeys } from \"./queryKeys\";\nimport updateGuestToApi from \"../helpers/updateGuestToApi\";\nimport { useProgressToastContext } from \"../providers/ProgressToastProvider\";\n\nexport const useRequestsList = () =>\n  useQuery([QueryKeys.GET_REQUESTS_LIST], getRequestsList);\n\nexport const useAddGuestToApi = () => {\n  const queryClient = useQueryClient();\n\n  const { actions } = useProgressToastContext();\n\n  return useMutation(addGuestToApi, {\n    onSuccess: (_, variables) => {\n      const clientOnlyId = uid();\n      const newItem: RequestProps = {\n        ...variables,\n        name: variables.name ?? \"\",\n        phone_num: variables.phone_num ?? \"\",\n        email: variables.email ?? \"\",\n        id: `not-yet-ready-${clientOnlyId}`,\n        status: GuestHostStatus.DEFAULT,\n        type: GuestHostType.LOOKING_FOR_MATCH,\n        country: variables.country ?? \"\",\n        city: variables.city ?? \"\",\n        is_pregnant: variables.is_pregnant as Boolean,\n        is_ukrainian_nationality: variables.is_ukrainian_nationality as Boolean,\n        is_with_animal: variables.is_with_animal as Boolean,\n        is_with_disability: variables.is_with_disability as Boolean,\n        is_with_elderly: variables.is_with_elderly as Boolean,\n        client_only: true,\n      };\n\n      actions.showProgressToast();\n\n      queryClient.setQueryData<GetRequestsListDTO | undefined>(\n        [QueryKeys.GET_REQUESTS_LIST],\n        (data) => data && { ...data, requests: [...data.requests, newItem] }\n      );\n\n      setTimeout(() => {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    },\n  });\n};\n\nexport const useUpdateGuestToApi = () => {\n  const queryClient = useQueryClient();\n\n  const { actions } = useProgressToastContext();\n\n  return useMutation(updateGuestToApi, {\n    onSuccess: (_, variables) => {\n      queryClient.setQueryData<GetRequestsListDTO | undefined>(\n        [QueryKeys.GET_REQUESTS_LIST],\n        (data) =>\n          data && {\n            ...data,\n            requests: data.requests.map((request) => {\n              if (request.id === variables.id) {\n                return {\n                  ...request,\n                  ...(variables as RequestProps),\n                  client_only: true,\n                };\n              }\n              return request;\n            }),\n          }\n      );\n\n      actions.showProgressToast();\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}