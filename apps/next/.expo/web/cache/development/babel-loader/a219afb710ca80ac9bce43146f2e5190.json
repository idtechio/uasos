{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useMemo, useLayoutEffect } from \"react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { useTranslation } from \"next-i18next\";\nimport Logo from \"../Header/image/Logo\";\nimport Accordion from \"./Accordion\";\nimport { LanguageFlags } from \"../LanguageSwitcher/LanguageFlags\";\nimport { base } from \"../../style/theme.config\";\nimport { TopLeftBlueSplash, TopLeftBlueSplashPosition, TopRightYellowSplash, TopRightYellowSplashPosition, Content, HeaderWrapper, ContentWrapper, LanguageFlagsWrapper, Title, TitleDesktop, YellowHighlight, ButtonWrapper, ButtonCtaWidthFixed, TitleWrapper, TitleName, TitleQuestion, TitleContent } from \"./styled\";\nvar languagesList = [\"pl\", \"ua\", \"en\", \"ru\", \"cs\", \"sk\", \"hu\", \"ro\"];\nvar languagesListNames = [\"Polski\", \"Yкраїнська\", \"English\", \"Pусский\", \"Čeština\", \"Slovenčina\", \"Magyar\", \"Română\"];\n\nvar FaqContent = function FaqContent() {\n  var _useRouter = useRouter(),\n      asPath = _useRouter.asPath,\n      locale = _useRouter.locale;\n\n  var _useTranslation = useTranslation(\"faq\"),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDesktop = _useState2[0],\n      setIsDesktop = _useState2[1];\n\n  useLayoutEffect(function () {\n    function updateSize() {\n      setIsDesktop(window.innerWidth > base.breakPoints.md);\n    }\n\n    window.addEventListener(\"resize\", updateSize);\n    updateSize();\n    return function () {\n      return window.removeEventListener(\"resize\", updateSize);\n    };\n  }, []);\n  var faqQuestionsElements = useMemo(function () {\n    var faq = require(\"../../../public/locales/\" + locale + \"/faq.json\");\n\n    return Object.values(faq).map(function (el) {\n      return Object.values(el).map(function (elContent) {\n        if (typeof elContent === \"object\") {\n          if (!isDesktop) {\n            return React.createElement(Accordion, {\n              nameCategory: el.name,\n              content: elContent\n            });\n          }\n\n          return Object.values(elContent).map(function (elContentValue, index) {\n            return React.createElement(TitleWrapper, {\n              key: elContentValue.question\n            }, !index && React.createElement(TitleName, null, el.name), React.createElement(TitleQuestion, null, elContentValue.question), React.createElement(TitleContent, null, elContentValue.answer));\n          });\n        }\n      });\n    });\n  }, [isDesktop, locale]);\n  var languagesListElements = useMemo(function () {\n    return isDesktop ? languagesList.map(function (el, index) {\n      return React.createElement(Link, {\n        passHref: true,\n        href: asPath,\n        locale: el,\n        key: index\n      }, React.createElement(ButtonCtaWidthFixed, {\n        anchor: languagesListNames[index]\n      }));\n    }) : null;\n  }, [asPath, isDesktop]);\n  return React.createElement(Content, {\n    isDesktop: isDesktop\n  }, isDesktop && React.createElement(React.Fragment, null, React.createElement(TopLeftBlueSplash, {\n    color: \"blue\",\n    splashPosition: TopLeftBlueSplashPosition\n  }), React.createElement(TopRightYellowSplash, {\n    color: \"yellow\",\n    splashPosition: TopRightYellowSplashPosition\n  })), React.createElement(HeaderWrapper, {\n    isDesktop: isDesktop\n  }, isDesktop && React.createElement(React.Fragment, null, React.createElement(Logo, null), React.createElement(TitleDesktop, {\n    accessibilityRole: \"header\"\n  }, t(\"FAQ\")), React.createElement(ButtonWrapper, null, languagesListElements)), !isDesktop && React.createElement(Title, {\n    accessibilityRole: \"header\"\n  }, t(\"FAQ\"), React.createElement(YellowHighlight, null)), React.createElement(ContentWrapper, {\n    isDesktop: isDesktop\n  }, isDesktop && locale && React.createElement(LanguageFlagsWrapper, null, React.createElement(LanguageFlags, {\n    locale: locale,\n    width: 53,\n    height: 34\n  })), faqQuestionsElements)));\n};\n\nexport default FaqContent;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Faq/FaqContent.tsx"],"names":["React","useState","useMemo","useLayoutEffect","Link","useRouter","useTranslation","Logo","Accordion","LanguageFlags","base","TopLeftBlueSplash","TopLeftBlueSplashPosition","TopRightYellowSplash","TopRightYellowSplashPosition","Content","HeaderWrapper","ContentWrapper","LanguageFlagsWrapper","Title","TitleDesktop","YellowHighlight","ButtonWrapper","ButtonCtaWidthFixed","TitleWrapper","TitleName","TitleQuestion","TitleContent","languagesList","languagesListNames","FaqContent","asPath","locale","t","isDesktop","setIsDesktop","updateSize","window","innerWidth","breakPoints","md","addEventListener","removeEventListener","faqQuestionsElements","faq","require","Object","values","map","el","elContent","name","elContentValue","index","question","answer","languagesListElements"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useLayoutEffect } from \"react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { useTranslation } from \"next-i18next\";\nimport Logo from \"../Header/image/Logo\";\nimport Accordion from \"./Accordion\";\nimport { LanguageFlags } from \"../LanguageSwitcher/LanguageFlags\";\nimport { base } from \"../../style/theme.config\";\nimport {\n  TopLeftBlueSplash,\n  TopLeftBlueSplashPosition,\n  TopRightYellowSplash,\n  TopRightYellowSplashPosition,\n  Content,\n  HeaderWrapper,\n  ContentWrapper,\n  LanguageFlagsWrapper,\n  Title,\n  TitleDesktop,\n  YellowHighlight,\n  ButtonWrapper,\n  ButtonCtaWidthFixed,\n  TitleWrapper,\n  TitleName,\n  TitleQuestion,\n  TitleContent,\n} from \"./styled\";\n\ntype Faq = {\n  [key: string]: {\n    name: string;\n    content: {\n      [key: string]: {\n        question: string;\n        answer: string;\n      };\n    };\n  };\n};\n\nconst languagesList = [\"pl\", \"ua\", \"en\", \"ru\", \"cs\", \"sk\", \"hu\", \"ro\"];\n\nconst languagesListNames = [\n  \"Polski\",\n  \"Yкраїнська\",\n  \"English\",\n  \"Pусский\",\n  \"Čeština\",\n  \"Slovenčina\",\n  \"Magyar\",\n  \"Română\",\n];\n\nconst FaqContent = () => {\n  const { asPath, locale } = useRouter();\n  const { t } = useTranslation(\"faq\");\n  const [isDesktop, setIsDesktop] = useState(false);\n\n  useLayoutEffect(() => {\n    function updateSize() {\n      setIsDesktop(window.innerWidth > base.breakPoints.md);\n    }\n    window.addEventListener(\"resize\", updateSize);\n    updateSize();\n    return () => window.removeEventListener(\"resize\", updateSize);\n  }, []);\n\n  const faqQuestionsElements = useMemo(() => {\n    const faq: Faq = require(`../../../public/locales/${locale}/faq.json`);\n    return Object.values(faq).map((el) => {\n      return Object.values(el).map((elContent) => {\n        if (typeof elContent === \"object\") {\n          if (!isDesktop) {\n            return <Accordion nameCategory={el.name} content={elContent} />;\n          }\n\n          return Object.values(elContent).map((elContentValue, index) => {\n            return (\n              <TitleWrapper key={elContentValue.question}>\n                {!index && <TitleName>{el.name}</TitleName>}\n                <TitleQuestion>{elContentValue.question}</TitleQuestion>\n                <TitleContent>{elContentValue.answer}</TitleContent>\n              </TitleWrapper>\n            );\n          });\n        }\n      });\n    });\n  }, [isDesktop, locale]);\n\n  const languagesListElements = useMemo(\n    () =>\n      isDesktop\n        ? languagesList.map((el, index) => (\n            <Link passHref href={asPath} locale={el} key={index}>\n              <ButtonCtaWidthFixed anchor={languagesListNames[index]} />\n            </Link>\n          ))\n        : null,\n    [asPath, isDesktop]\n  );\n\n  return (\n    <Content isDesktop={isDesktop}>\n      {isDesktop && (\n        <>\n          <TopLeftBlueSplash\n            color=\"blue\"\n            // @ts-expect-error TODO: fix prop types\n            splashPosition={TopLeftBlueSplashPosition}\n          />\n          <TopRightYellowSplash\n            color=\"yellow\"\n            // @ts-expect-error TODO: fix prop types\n            splashPosition={TopRightYellowSplashPosition}\n          />\n        </>\n      )}\n      <HeaderWrapper isDesktop={isDesktop}>\n        {isDesktop && (\n          <>\n            <Logo />\n            <TitleDesktop accessibilityRole=\"header\">{t(\"FAQ\")}</TitleDesktop>\n            <ButtonWrapper>{languagesListElements}</ButtonWrapper>\n          </>\n        )}\n        {!isDesktop && (\n          <Title accessibilityRole=\"header\">\n            {t(\"FAQ\")}\n            <YellowHighlight />\n          </Title>\n        )}\n        <ContentWrapper isDesktop={isDesktop}>\n          {isDesktop && locale && (\n            <LanguageFlagsWrapper>\n              <LanguageFlags locale={locale} width={53} height={34} />\n            </LanguageFlagsWrapper>\n          )}\n          {faqQuestionsElements}\n        </ContentWrapper>\n      </HeaderWrapper>\n    </Content>\n  );\n};\n\nexport default FaqContent;\n"]},"metadata":{},"sourceType":"module"}