{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useTranslation } from \"next-i18next\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { EditOfferContext } from \"../EditOfferButton/index\";\nimport React from \"react\";\nimport { Dropdown } from \"../../Dropdown\";\nimport { DropdownStyles, StyledLabel } from \"./style\";\nimport { PROBLEM_TYPES } from \"./constans\";\n\nvar Label = function Label(_ref) {\n  var children = _ref.children;\n  return React.createElement(StyledLabel, null, children);\n};\n\nexport default function SelectProblemDropdown(_ref2) {\n  var problemType = _ref2.problemType,\n      onSelect = _ref2.onSelect;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useContext = useContext(EditOfferContext),\n      targetType = _useContext.targetType;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    var dropDownData = PROBLEM_TYPES.filter(function (item) {\n      return item.targetType === targetType || !item.targetType;\n    }).map(function (item) {\n      return {\n        label: React.createElement(Label, null, t(item.label)),\n        value: item.value\n      };\n    });\n    setData(dropDownData);\n  }, [t, targetType]);\n  return React.createElement(Dropdown, {\n    styles: DropdownStyles,\n    placeholder: t(\"others:forms.generic.selectFromList\"),\n    data: data,\n    selected: problemType,\n    itemPressFunction: onSelect\n  });\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/EditOfferOptions/ReportOffer/SelectProblemDropdown.tsx"],"names":["useTranslation","useContext","useEffect","useState","EditOfferContext","React","Dropdown","DropdownStyles","StyledLabel","PROBLEM_TYPES","Label","children","SelectProblemDropdown","problemType","onSelect","t","targetType","data","setData","dropDownData","filter","item","map","label","value"],"mappings":";AAAA,SAASA,cAAT,QAA+B,cAA/B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,gBAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT;AACA,SAASC,cAAT,EAAyBC,WAAzB;AACA,SAASC,aAAT;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SACZ,oBAAC,WAAD,QAAcA,QAAd,CADY;AAAA,CAAd;;AAUA,eAAe,SAASC,qBAAT,QAGL;AAAA,MAFRC,WAEQ,SAFRA,WAEQ;AAAA,MADRC,QACQ,SADRA,QACQ;;AACR,wBAAcd,cAAc,EAA5B;AAAA,MAAQe,CAAR,mBAAQA,CAAR;;AACA,oBAAuBd,UAAU,CAACG,gBAAD,CAAjC;AAAA,MAAQY,UAAR,eAAQA,UAAR;;AACA,kBAAwBb,QAAQ,CAAkB,EAAlB,CAAhC;AAAA;AAAA,MAAOc,IAAP;AAAA,MAAaC,OAAb;;AAEAhB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMiB,YAAwB,GAAGV,aAAa,CAACW,MAAd,CAC/B,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACL,UAAL,KAAoBA,UAApB,IAAkC,CAACK,IAAI,CAACL,UAAlD;AAAA,KAD+B,EAE/BM,GAF+B,CAE3B,UAACD,IAAD;AAAA,aAAW;AACfE,QAAAA,KAAK,EAAE,oBAAC,KAAD,QAAQR,CAAC,CAACM,IAAI,CAACE,KAAN,CAAT,CADQ;AAEfC,QAAAA,KAAK,EAAEH,IAAI,CAACG;AAFG,OAAX;AAAA,KAF2B,CAAjC;AAMAN,IAAAA,OAAO,CAACC,YAAD,CAAP;AACD,GARQ,EAQN,CAACJ,CAAD,EAAIC,UAAJ,CARM,CAAT;AAUA,SACE,oBAAC,QAAD;AACE,IAAA,MAAM,EAAET,cADV;AAEE,IAAA,WAAW,EAAEQ,CAAC,CAAC,qCAAD,CAFhB;AAGE,IAAA,IAAI,EAAEE,IAHR;AAIE,IAAA,QAAQ,EAAEJ,WAJZ;AAKE,IAAA,iBAAiB,EAAEC;AALrB,IADF;AASD","sourcesContent":["import { useTranslation } from \"next-i18next\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { EditOfferContext } from \"../EditOfferButton/index\";\nimport React from \"react\";\nimport { Dropdown } from \"../../Dropdown\";\nimport { DropdownStyles, StyledLabel } from \"./style\";\nimport { PROBLEM_TYPES } from \"./constans\";\n\nconst Label = ({ children }: { children: string }) => (\n  <StyledLabel>{children}</StyledLabel>\n);\n\ntype DataItem = { label: JSX.Element; value: string };\n\ninterface Props {\n  problemType: string | null;\n  onSelect(problem: string | null): void;\n}\nexport default function SelectProblemDropdown({\n  problemType,\n  onSelect,\n}: Props) {\n  const { t } = useTranslation();\n  const { targetType } = useContext(EditOfferContext);\n  const [data, setData] = useState<Array<DataItem>>([]);\n\n  useEffect(() => {\n    const dropDownData: DataItem[] = PROBLEM_TYPES.filter(\n      (item) => item.targetType === targetType || !item.targetType\n    ).map((item) => ({\n      label: <Label>{t(item.label)}</Label>,\n      value: item.value,\n    }));\n    setData(dropDownData);\n  }, [t, targetType]);\n\n  return (\n    <Dropdown\n      styles={DropdownStyles}\n      placeholder={t(\"others:forms.generic.selectFromList\")}\n      data={data}\n      selected={problemType}\n      itemPressFunction={onSelect}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}