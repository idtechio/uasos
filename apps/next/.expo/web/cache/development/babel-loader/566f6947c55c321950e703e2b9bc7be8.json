{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { serverSideTranslations } from \"next-i18next/serverSideTranslations\";\nimport React, { useContext } from \"react\";\nimport AppBack from \"../../src/components/AppBack\";\nimport { CompositionAppBody } from \"../../src/components/Compositions\";\nimport FormAdGuest from \"../../src/components/FormAdGuest\";\nimport Redirect from \"../../src/components/Redirect\";\nimport { AuthContext } from \"../_app\";\nimport { useRouter } from \"next/router\";\nimport { useRequestsList } from \"../../src/queries/useRequestsList\";\nimport Spinner from \"../../src/components/Spinner\";\nexport default function Account() {\n  var _useContext = useContext(AuthContext),\n      identity = _useContext.identity,\n      loaded = _useContext.loaded;\n\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      request = _React$useState2[0],\n      setRequest = _React$useState2[1];\n\n  var _useRequestsList = useRequestsList(),\n      requestsData = _useRequestsList.data;\n\n  var requests = requestsData ? requestsData.requests : undefined;\n  React.useEffect(function () {\n    if (id && requests && requests.length && !request) {\n      var matchedRequest = requests.filter(function (el) {\n        return el.id === id;\n      })[0];\n\n      if (matchedRequest) {\n        setRequest(matchedRequest);\n      }\n    }\n  }, [requests, id, request]);\n\n  if (loaded) {\n    if (identity) {\n      return React.createElement(CompositionAppBody, null, React.createElement(AppBack, {\n        to: \"/dashboard\"\n      }), React.createElement(FormAdGuest, {\n        name: identity.displayName,\n        email: identity.email,\n        phoneNumber: identity.phoneNumber,\n        data: request\n      }));\n    } else {\n      return React.createElement(Redirect, {\n        path: \"/signin\"\n      });\n    }\n  } else {\n    return React.createElement(Spinner, null);\n  }\n}\nexport var getServerSideProps = function getServerSideProps(_ref) {\n  var locale;\n  return _regeneratorRuntime.async(function getServerSideProps$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          locale = _ref.locale;\n          _context.t0 = _objectSpread;\n          _context.t1 = {};\n          _context.t2 = locale;\n\n          if (!_context.t2) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(serverSideTranslations(locale));\n\n        case 7:\n          _context.t2 = _context.sent;\n\n        case 8:\n          _context.t3 = _context.t2;\n          _context.t4 = (0, _context.t0)(_context.t1, _context.t3);\n          return _context.abrupt(\"return\", {\n            props: _context.t4\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/pages/guest/index.tsx"],"names":["serverSideTranslations","React","useContext","AppBack","CompositionAppBody","FormAdGuest","Redirect","AuthContext","useRouter","useRequestsList","Spinner","Account","identity","loaded","router","id","query","useState","request","setRequest","requestsData","data","requests","undefined","useEffect","length","matchedRequest","filter","el","displayName","email","phoneNumber","getServerSideProps","locale","props"],"mappings":";;;;;;;;AACA,SAASA,sBAAT,QAAuC,qCAAvC;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,OAAP;AACA,SAASC,kBAAT;AACA,OAAOC,WAAP;AACA,OAAOC,QAAP;AACA,SAASC,WAAT;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,eAAT;AACA,OAAOC,OAAP;AAEA,eAAe,SAASC,OAAT,GAAmB;AAChC,oBAA6BT,UAAU,CAACK,WAAD,CAAvC;AAAA,MAAQK,QAAR,eAAQA,QAAR;AAAA,MAAkBC,MAAlB,eAAkBA,MAAlB;;AACA,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,MAAQO,EAAR,GAAeD,MAAM,CAACE,KAAtB,CAAQD,EAAR;;AACA,wBAA8Bd,KAAK,CAACgB,QAAN,CAAoC,IAApC,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,yBAA+BV,eAAe,EAA9C;AAAA,MAAcW,YAAd,oBAAQC,IAAR;;AAEA,MAAMC,QAAQ,GAAGF,YAAY,GAAGA,YAAY,CAACE,QAAhB,GAA2BC,SAAxD;AAEAtB,EAAAA,KAAK,CAACuB,SAAN,CAAgB,YAAM;AACpB,QAAIT,EAAE,IAAIO,QAAN,IAAkBA,QAAQ,CAACG,MAA3B,IAAqC,CAACP,OAA1C,EAAmD;AACjD,UAAMQ,cAAc,GAAGJ,QAAQ,CAACK,MAAT,CAAgB,UAACC,EAAD;AAAA,eAAQA,EAAE,CAACb,EAAH,KAAUA,EAAlB;AAAA,OAAhB,EAAsC,CAAtC,CAAvB;;AAEA,UAAIW,cAAJ,EAAoB;AAClBP,QAAAA,UAAU,CAACO,cAAD,CAAV;AACD;AACF;AACF,GARD,EAQG,CAACJ,QAAD,EAAWP,EAAX,EAAeG,OAAf,CARH;;AAUA,MAAIL,MAAJ,EAAY;AACV,QAAID,QAAJ,EAAc;AACZ,aACE,oBAAC,kBAAD,QACE,oBAAC,OAAD;AAAS,QAAA,EAAE,EAAC;AAAZ,QADF,EAEE,oBAAC,WAAD;AACE,QAAA,IAAI,EAAEA,QAAQ,CAACiB,WADjB;AAEE,QAAA,KAAK,EAAEjB,QAAQ,CAACkB,KAFlB;AAGE,QAAA,WAAW,EAAElB,QAAQ,CAACmB,WAHxB;AAIE,QAAA,IAAI,EAAEb;AAJR,QAFF,CADF;AAWD,KAZD,MAYO;AACL,aAAO,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAC;AAAf,QAAP;AACD;AACF,GAhBD,MAgBO;AACL,WAAO,oBAAC,OAAD,OAAP;AACD;AACF;AAED,OAAO,IAAMc,kBAAsC,GAAG,SAAzCA,kBAAyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,MAAT,QAASA,MAAT;AAAA;AAAA;AAAA,wBAE9CA,MAF8C;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAE7BjC,sBAAsB,CAACiC,MAAD,CAFO;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpDC,YAAAA,KADoD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/C","sourcesContent":["import { GetServerSideProps } from \"next\";\nimport { serverSideTranslations } from \"next-i18next/serverSideTranslations\";\nimport React, { useContext } from \"react\";\nimport AppBack from \"../../src/components/AppBack\";\nimport { CompositionAppBody } from \"../../src/components/Compositions\";\nimport FormAdGuest from \"../../src/components/FormAdGuest\";\nimport Redirect from \"../../src/components/Redirect\";\nimport { AuthContext } from \"../_app\";\nimport { useRouter } from \"next/router\";\nimport { RequestProps } from \"../api/listing/requests\";\nimport { useRequestsList } from \"../../src/queries/useRequestsList\";\nimport Spinner from \"../../src/components/Spinner\";\n\nexport default function Account() {\n  const { identity, loaded } = useContext(AuthContext);\n  const router = useRouter();\n  const { id } = router.query;\n  const [request, setRequest] = React.useState<RequestProps | null>(null);\n  const { data: requestsData } = useRequestsList();\n\n  const requests = requestsData ? requestsData.requests : undefined;\n\n  React.useEffect(() => {\n    if (id && requests && requests.length && !request) {\n      const matchedRequest = requests.filter((el) => el.id === id)[0];\n\n      if (matchedRequest) {\n        setRequest(matchedRequest);\n      }\n    }\n  }, [requests, id, request]);\n\n  if (loaded) {\n    if (identity) {\n      return (\n        <CompositionAppBody>\n          <AppBack to=\"/dashboard\" />\n          <FormAdGuest\n            name={identity.displayName}\n            email={identity.email}\n            phoneNumber={identity.phoneNumber}\n            data={request}\n          />\n        </CompositionAppBody>\n      );\n    } else {\n      return <Redirect path=\"/signin\"></Redirect>;\n    }\n  } else {\n    return <Spinner />;\n  }\n}\n\nexport const getServerSideProps: GetServerSideProps = async ({ locale }) => ({\n  props: {\n    ...(locale && (await serverSideTranslations(locale))),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}