{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport usePlacesAutocomplete from \"use-places-autocomplete\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Container, Input, List, Separator } from \"./styles\";\nimport { Item } from \"./Item\";\nimport { CountryCode } from \"../Inputs/FormGeoAutocomplete\";\nexport var PlacesAutocomplete = function PlacesAutocomplete(_ref) {\n  var value = _ref.value,\n      error = _ref.error,\n      onChange = _ref.onChange,\n      placeholder = _ref.placeholder,\n      selectedCountry = _ref.selectedCountry;\n  var containerRef = useRef();\n  var listRef = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showOptions = _useState2[0],\n      setShowOptions = _useState2[1];\n\n  var _usePlacesAutocomplet = usePlacesAutocomplete({\n    requestOptions: {\n      types: [\"(cities)\"],\n      componentRestrictions: {\n        country: CountryCode[selectedCountry]\n      }\n    },\n    cache: false,\n    debounce: 300\n  }),\n      localValue = _usePlacesAutocomplet.value,\n      _usePlacesAutocomplet2 = _usePlacesAutocomplet.suggestions,\n      data = _usePlacesAutocomplet2.data,\n      loading = _usePlacesAutocomplet2.loading,\n      setLocalValue = _usePlacesAutocomplet.setValue,\n      clearSuggestions = _usePlacesAutocomplet.clearSuggestions;\n\n  var handleChange = function handleChange(e) {\n    onChange(\"\");\n    setLocalValue(e.nativeEvent.text);\n  };\n\n  var handleContainerPress = function handleContainerPress() {\n    setShowOptions(true);\n    setLocalValue(localValue);\n  };\n\n  var handlePress = function handlePress(cityName) {\n    return function () {\n      clearSuggestions();\n      setLocalValue(cityName, false);\n      onChange(cityName);\n      setShowOptions(false);\n    };\n  };\n\n  useEffect(function () {\n    var handleClickOutside = function handleClickOutside(ev) {\n      var _containerRef$current, _listRef$current;\n\n      if (containerRef.current && !((_containerRef$current = containerRef.current) != null && _containerRef$current.contains(ev.target)) && !((_listRef$current = listRef.current) != null && _listRef$current.contains(ev.target))) {\n        setShowOptions(false);\n      }\n    };\n\n    if (containerRef.current && Platform.OS === \"web\" && showOptions) {\n      document.body.addEventListener(\"click\", handleClickOutside, true);\n    }\n\n    return function () {\n      if (Platform.OS === \"web\") {\n        document.body.removeEventListener(\"click\", handleClickOutside, true);\n      }\n    };\n  }, [showOptions]);\n  return React.createElement(React.Fragment, null, React.createElement(Container, {\n    error: Boolean(error),\n    ref: containerRef,\n    onPress: handleContainerPress\n  }, React.createElement(Input, {\n    placeholder: placeholder,\n    value: localValue || value,\n    onChange: handleChange\n  }), loading ? React.createElement(ActivityIndicator, {\n    style: {\n      position: \"absolute\",\n      right: 15\n    }\n  }) : null), !loading && localValue && showOptions ? React.createElement(List, {\n    ref: listRef\n  }, React.createElement(FlatList, {\n    data: data.filter(function (item) {\n      return item.types.includes(\"geocode\");\n    }),\n    ItemSeparatorComponent: Separator,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Item, {\n        label: item.structured_formatting.main_text,\n        sublabel: item.structured_formatting.secondary_text,\n        onPress: handlePress(item.structured_formatting.main_text)\n      });\n    }\n  }), !loading && value && data.length === 0 && React.createElement(Item, {\n    disabled: true,\n    label: \"Location not found\"\n  })) : null);\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/PlacesAutocomplete/index.tsx"],"names":["React","useEffect","useRef","useState","usePlacesAutocomplete","Container","Input","List","Separator","Item","CountryCode","PlacesAutocomplete","value","error","onChange","placeholder","selectedCountry","containerRef","listRef","showOptions","setShowOptions","requestOptions","types","componentRestrictions","country","cache","debounce","localValue","suggestions","data","loading","setLocalValue","setValue","clearSuggestions","handleChange","e","nativeEvent","text","handleContainerPress","handlePress","cityName","handleClickOutside","ev","current","contains","target","Platform","OS","document","body","addEventListener","removeEventListener","Boolean","position","right","filter","item","includes","structured_formatting","main_text","secondary_text","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport usePlacesAutocomplete from \"use-places-autocomplete\";\nimport {\n  ActivityIndicator,\n  FlatList,\n  NativeSyntheticEvent,\n  Platform,\n  TextInputChangeEventData,\n} from \"react-native\";\n\nimport { Container, Input, List, Separator } from \"./styles\";\nimport { FieldError } from \"react-hook-form\";\nimport { Item } from \"./Item\";\nimport { CountryCode, SelectedCountry } from \"../Inputs/FormGeoAutocomplete\";\n\ninterface Props {\n  value: string;\n  selectedCountry: SelectedCountry;\n  error?: FieldError | FieldError[] | undefined;\n  placeholder: string;\n  onChange: (value: string) => void;\n}\n\nexport const PlacesAutocomplete = ({\n  value,\n  error,\n  onChange,\n  placeholder,\n  selectedCountry,\n}: Props) => {\n  const containerRef = useRef<HTMLElement>();\n  const listRef = useRef<HTMLElement>();\n\n  const [showOptions, setShowOptions] = useState(false);\n\n  const {\n    value: localValue,\n    suggestions: { data, loading },\n    setValue: setLocalValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      types: [\"(cities)\"],\n      componentRestrictions: {\n        country: CountryCode[selectedCountry],\n      },\n    },\n    cache: false,\n    debounce: 300,\n  });\n\n  const handleChange = (e: NativeSyntheticEvent<TextInputChangeEventData>) => {\n    onChange(\"\");\n    setLocalValue(e.nativeEvent.text);\n  };\n\n  const handleContainerPress = () => {\n    setShowOptions(true);\n    setLocalValue(localValue);\n  };\n\n  const handlePress = (cityName: string) => () => {\n    clearSuggestions();\n\n    setLocalValue(cityName, false);\n    onChange(cityName);\n    setShowOptions(false);\n  };\n\n  useEffect(() => {\n    // @ts-expect-error TODO: fix event type\n\n    const handleClickOutside = (ev) => {\n      if (\n        containerRef.current &&\n        !containerRef.current?.contains(ev.target) &&\n        !listRef.current?.contains(ev.target)\n      ) {\n        setShowOptions(false);\n      }\n    };\n\n    if (containerRef.current && Platform.OS === \"web\" && showOptions) {\n      document.body.addEventListener(\"click\", handleClickOutside, true);\n    }\n\n    return () => {\n      if (Platform.OS === \"web\") {\n        document.body.removeEventListener(\"click\", handleClickOutside, true);\n      }\n    };\n  }, [showOptions]);\n\n  return (\n    <>\n      <Container\n        error={Boolean(error)}\n        // @ts-expect-error TODO: fix ref type\n        ref={containerRef}\n        onPress={handleContainerPress}\n      >\n        <Input\n          placeholder={placeholder}\n          value={localValue || value}\n          onChange={handleChange}\n        />\n        {loading ? (\n          <ActivityIndicator\n            style={{\n              position: \"absolute\",\n              right: 15,\n            }}\n          />\n        ) : null}\n      </Container>\n\n      {!loading && localValue && showOptions ? (\n        <List\n          // @ts-expect-error TODO: fix ref type\n          ref={listRef}\n        >\n          <FlatList\n            data={data.filter((item) => item.types.includes(\"geocode\"))}\n            ItemSeparatorComponent={Separator}\n            renderItem={({ item }) => (\n              <Item\n                label={item.structured_formatting.main_text}\n                sublabel={item.structured_formatting.secondary_text}\n                onPress={handlePress(item.structured_formatting.main_text)}\n              />\n            )}\n          />\n\n          {!loading && value && data.length === 0 && (\n            <Item disabled label=\"Location not found\" />\n          )}\n        </List>\n      ) : null}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}