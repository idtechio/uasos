{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext, useRef } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { StyledText, Wrapper, StyledHeader, StyledInput, InputWrapper, ErrorText } from \"./style\";\nimport { ButtonCta } from \"../Buttons\";\nimport CardModal from \"../CardModal\";\nimport Image from \"next/image\";\nimport SmsSent from \"../../../public/assets/SmsSent.png\";\nimport { PhoneAuthProvider } from \"firebase/auth\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport { AuthContext } from \"../../../pages/_app\";\nimport { useTranslation } from \"next-i18next\";\nimport { FirebaseError } from \"@firebase/util\";\nimport { CloseButton } from \"../EditOfferOptions/style\";\nexport default function SmsVerificationModal(_ref) {\n  var phoneNumber = _ref.phoneNumber,\n      confirmation = _ref.confirmation,\n      setVerificationSuccess = _ref.setVerificationSuccess,\n      mode = _ref.mode,\n      callback = _ref.callback,\n      verificationId = _ref.verificationId,\n      close = _ref.close;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useContext = useContext(AuthContext),\n      identity = _useContext.identity;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      resending = _useState2[0],\n      setResending = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resendConfirmation = _useState4[0],\n      setResendConfirmation = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      apiError = _useState8[0],\n      setApiError = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isLoading = _useState10[0],\n      setIsLoading = _useState10[1];\n\n  var handleResendLogin = function handleResendLogin() {\n    var confirm;\n    return _regeneratorRuntime.async(function handleResendLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setResending(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Authorization.signInWithPhone(phoneNumber, Authorization.recaptcha));\n\n          case 4:\n            confirm = _context.sent;\n            setResendConfirmation(confirm);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n\n            if (_context.t0 instanceof Error || _context.t0 instanceof FirebaseError) {\n              parseError(_context.t0 == null ? void 0 : _context.t0.message);\n            }\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n\n  var handleResendLink = function handleResendLink() {\n    var confirm;\n    return _regeneratorRuntime.async(function handleResendLink$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setResending(true);\n            _context2.prev = 1;\n\n            if (!identity) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(Authorization.linkWithPhone(phoneNumber, Authorization.recaptcha));\n\n          case 5:\n            confirm = _context2.sent;\n            setResendConfirmation(confirm);\n\n          case 7:\n            _context2.next = 12;\n            break;\n\n          case 9:\n            _context2.prev = 9;\n            _context2.t0 = _context2[\"catch\"](1);\n\n            if (_context2.t0 instanceof Error || _context2.t0 instanceof FirebaseError) {\n              parseError(_context2.t0 == null ? void 0 : _context2.t0.message);\n            }\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  var handleResendUpdate = function handleResendUpdate() {\n    return null;\n  };\n\n  var parseError = function parseError(error) {\n    if (error.includes(\"email-already-exists\")) {\n      setApiError(t(\"others:userRegistration.errors.emailExists\"));\n    } else if (error.includes(\"phone-number-already-exists\") || error.includes(\"account-exists\")) {\n      setApiError(t(\"others:userRegistration.errors.phoneLinkingFailed\"));\n    } else if (error.includes(\"too-many-requests\")) {\n      setApiError(t(\"others:userRegistration.errors.tooManyRequest\"));\n    } else if (error.includes(\"invalid-verification\")) {\n      setApiError(t(\"others:userRegistration.errors.invalidCode\"));\n    } else {\n      setApiError(t(\"others:common.sms.verificationFail\"));\n    }\n  };\n\n  var handleResend = mode === \"LINK\" ? handleResendLink : mode === \"LOGIN\" ? handleResendLogin : handleResendUpdate;\n  var ref1 = useRef(null);\n  var ref2 = useRef(null);\n  var ref3 = useRef(null);\n  var ref4 = useRef(null);\n  var ref5 = useRef(null);\n  var ref6 = useRef(null);\n  var formFields = useForm();\n  var handleSubmit = formFields.handleSubmit,\n      control = formFields.control;\n\n  var onSubmit = function onSubmit(data) {\n    var code, phoneCredential;\n    return _regeneratorRuntime.async(function onSubmit$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            code = data[\"1\"] + data[\"2\"] + data[\"3\"] + data[\"4\"] + data[\"5\"] + data[\"6\"];\n            setIsLoading(true);\n\n            if (!resending) {\n              _context3.next = 14;\n              break;\n            }\n\n            _context3.prev = 3;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(resendConfirmation == null ? void 0 : resendConfirmation.confirm(code));\n\n          case 6:\n            setVerificationSuccess(true);\n            _context3.next = 12;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](3);\n\n            if (_context3.t0 instanceof Error || _context3.t0 instanceof FirebaseError) {\n              parseError(_context3.t0 == null ? void 0 : _context3.t0.message);\n            }\n\n          case 12:\n            _context3.next = 30;\n            break;\n\n          case 14:\n            _context3.prev = 14;\n\n            if (!(mode === \"UPDATE\" && verificationId)) {\n              _context3.next = 21;\n              break;\n            }\n\n            phoneCredential = PhoneAuthProvider.credential(verificationId, code);\n            _context3.next = 19;\n            return _regeneratorRuntime.awrap(Authorization.updatePhone(phoneCredential));\n\n          case 19:\n            _context3.next = 23;\n            break;\n\n          case 21:\n            _context3.next = 23;\n            return _regeneratorRuntime.awrap(confirmation == null ? void 0 : confirmation.confirm(code));\n\n          case 23:\n            setVerificationSuccess(true);\n            callback();\n            _context3.next = 30;\n            break;\n\n          case 27:\n            _context3.prev = 27;\n            _context3.t1 = _context3[\"catch\"](14);\n\n            if (_context3.t1 instanceof Error || _context3.t1 instanceof FirebaseError) {\n              parseError(_context3.t1 == null ? void 0 : _context3.t1.message);\n            }\n\n          case 30:\n            setIsLoading(false);\n\n          case 31:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[3, 9], [14, 27]], Promise);\n  };\n\n  var onError = function onError() {\n    setError(\"Must be a digit\");\n  };\n\n  return React.createElement(CardModal, {\n    closeable: false\n  }, React.createElement(View, {\n    style: {\n      display: \"none\"\n    },\n    nativeID: \"recaptcha__container\"\n  }), React.createElement(Wrapper, null, close && React.createElement(CloseButton, {\n    onPress: close\n  }), React.createElement(Image, {\n    src: SmsSent,\n    alt: \"\"\n  }), React.createElement(StyledHeader, null, t(\"others:common.sms.verification\")), React.createElement(StyledText, null, t(\"others:common.sms.sentInfo\", {\n    phoneNumber: phoneNumber\n  })), React.createElement(InputWrapper, null, React.createElement(FormProvider, formFields, React.createElement(Controller, {\n    control: control,\n    rules: {\n      maxLength: 100,\n      pattern: /\\d/\n    },\n    render: function render(_ref2) {\n      var _ref2$field = _ref2.field,\n          _onChange = _ref2$field.onChange,\n          _ = _ref2$field.onBlur,\n          value = _ref2$field.value;\n      return React.createElement(StyledInput, {\n        borderColor: error ? \"red\" : \"\",\n        value: value,\n        ref: ref1,\n        keyboardType: \"numeric\",\n        onChange: function onChange(newValue) {\n          setError(null);\n          setApiError(\"\");\n\n          if (!isNaN(Number(newValue.nativeEvent.text)) && newValue.nativeEvent.text.length < 2) {\n            _onChange(newValue);\n\n            if (newValue.nativeEvent.text) {\n              var _ref2$current;\n\n              (_ref2$current = ref2.current) == null ? void 0 : _ref2$current.focus();\n            }\n          }\n        }\n      });\n    },\n    name: \"1\"\n  }), React.createElement(Controller, {\n    control: control,\n    rules: {\n      maxLength: 100,\n      pattern: /\\d/\n    },\n    render: function render(_ref3) {\n      var _ref3$field = _ref3.field,\n          _onChange2 = _ref3$field.onChange,\n          _ = _ref3$field.onBlur,\n          value = _ref3$field.value;\n      return React.createElement(StyledInput, {\n        borderColor: error ? \"red\" : \"\",\n        ref: ref2,\n        keyboardType: \"numeric\",\n        value: value,\n        onChange: function onChange(newValue) {\n          setError(null);\n          setApiError(\"\");\n\n          if (!isNaN(Number(newValue.nativeEvent.text)) && newValue.nativeEvent.text.length < 2) {\n            _onChange2(newValue);\n\n            if (newValue.nativeEvent.text) {\n              var _ref3$current;\n\n              (_ref3$current = ref3.current) == null ? void 0 : _ref3$current.focus();\n            }\n          }\n        }\n      });\n    },\n    name: \"2\"\n  }), React.createElement(Controller, {\n    control: control,\n    rules: {\n      maxLength: 100,\n      pattern: /\\d/\n    },\n    render: function render(_ref4) {\n      var _ref4$field = _ref4.field,\n          _onChange3 = _ref4$field.onChange,\n          _ = _ref4$field.onBlur,\n          value = _ref4$field.value;\n      return React.createElement(StyledInput, {\n        borderColor: error ? \"red\" : \"\",\n        value: value,\n        ref: ref3,\n        keyboardType: \"numeric\",\n        onChange: function onChange(newValue) {\n          setError(null);\n          setApiError(\"\");\n\n          if (!isNaN(Number(newValue.nativeEvent.text)) && newValue.nativeEvent.text.length < 2) {\n            _onChange3(newValue);\n\n            if (newValue.nativeEvent.text) {\n              var _ref4$current;\n\n              (_ref4$current = ref4.current) == null ? void 0 : _ref4$current.focus();\n            }\n          }\n        }\n      });\n    },\n    name: \"3\"\n  }), React.createElement(Controller, {\n    control: control,\n    rules: {\n      maxLength: 100,\n      pattern: /\\d/\n    },\n    render: function render(_ref5) {\n      var _ref5$field = _ref5.field,\n          _onChange4 = _ref5$field.onChange,\n          _ = _ref5$field.onBlur,\n          value = _ref5$field.value;\n      return React.createElement(StyledInput, {\n        borderColor: error ? \"red\" : \"\",\n        value: value,\n        ref: ref4,\n        keyboardType: \"numeric\",\n        onChange: function onChange(newValue) {\n          setError(null);\n          setApiError(\"\");\n\n          if (!isNaN(Number(newValue.nativeEvent.text)) && newValue.nativeEvent.text.length < 2) {\n            _onChange4(newValue);\n\n            if (newValue.nativeEvent.text) {\n              var _ref5$current;\n\n              (_ref5$current = ref5.current) == null ? void 0 : _ref5$current.focus();\n            }\n          }\n        }\n      });\n    },\n    name: \"4\"\n  }), React.createElement(Controller, {\n    control: control,\n    rules: {\n      maxLength: 100,\n      pattern: /\\d/\n    },\n    render: function render(_ref6) {\n      var _ref6$field = _ref6.field,\n          _onChange5 = _ref6$field.onChange,\n          _ = _ref6$field.onBlur,\n          value = _ref6$field.value;\n      return React.createElement(StyledInput, {\n        borderColor: error ? \"red\" : \"\",\n        value: value,\n        ref: ref5,\n        keyboardType: \"numeric\",\n        onChange: function onChange(newValue) {\n          setError(null);\n          setApiError(\"\");\n\n          if (!isNaN(Number(newValue.nativeEvent.text)) && newValue.nativeEvent.text.length < 2) {\n            _onChange5(newValue);\n\n            if (newValue.nativeEvent.text) {\n              var _ref6$current;\n\n              (_ref6$current = ref6.current) == null ? void 0 : _ref6$current.focus();\n            }\n          }\n        }\n      });\n    },\n    name: \"5\"\n  }), React.createElement(Controller, {\n    control: control,\n    rules: {\n      maxLength: 100,\n      pattern: /\\d/\n    },\n    render: function render(_ref7) {\n      var _ref7$field = _ref7.field,\n          _onChange6 = _ref7$field.onChange,\n          _ = _ref7$field.onBlur,\n          value = _ref7$field.value;\n      return React.createElement(StyledInput, {\n        borderColor: error ? \"red\" : \"\",\n        ref: ref6,\n        value: value,\n        onChange: function onChange(newValue) {\n          setError(null);\n          setApiError(\"\");\n\n          if (!isNaN(Number(newValue.nativeEvent.text)) && newValue.nativeEvent.text.length < 2) {\n            _onChange6(newValue);\n          }\n        },\n        keyboardType: \"numeric\"\n      });\n    },\n    name: \"6\"\n  }))), apiError ? React.createElement(ErrorText, null, apiError) : React.createElement(React.Fragment, null), React.createElement(ButtonCta, {\n    onPress: handleSubmit(onSubmit, onError),\n    anchor: t(\"others:common.buttons.verify\"),\n    style: {\n      width: \"100px\",\n      marginTop: \"30px\"\n    },\n    isLoading: isLoading,\n    disabled: isLoading\n  }), React.createElement(TouchableOpacity, {\n    onPress: handleResend\n  }, React.createElement(StyledText, null, t(\"others:common.links.re-sendCode\")))));\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/SmsVerificationModal/index.tsx"],"names":["React","useState","useContext","useRef","Controller","FormProvider","useForm","StyledText","Wrapper","StyledHeader","StyledInput","InputWrapper","ErrorText","ButtonCta","CardModal","Image","SmsSent","PhoneAuthProvider","Authorization","AuthContext","useTranslation","FirebaseError","CloseButton","SmsVerificationModal","phoneNumber","confirmation","setVerificationSuccess","mode","callback","verificationId","close","t","identity","resending","setResending","resendConfirmation","setResendConfirmation","error","setError","apiError","setApiError","isLoading","setIsLoading","handleResendLogin","signInWithPhone","recaptcha","confirm","Error","parseError","message","handleResendLink","linkWithPhone","handleResendUpdate","includes","handleResend","ref1","ref2","ref3","ref4","ref5","ref6","formFields","handleSubmit","control","onSubmit","data","code","phoneCredential","credential","updatePhone","onError","display","maxLength","pattern","field","onChange","_","onBlur","value","newValue","isNaN","Number","nativeEvent","text","length","current","focus","width","marginTop"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState, useContext, useRef } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { TouchableOpacity, View } from \"react-native\";\n\nimport {\n  StyledText,\n  Wrapper,\n  StyledHeader,\n  StyledInput,\n  InputWrapper,\n  ErrorText,\n} from \"./style\";\nimport { ButtonCta } from \"../Buttons\";\nimport CardModal from \"../CardModal\";\nimport Image from \"next/image\";\nimport SmsSent from \"../../../public/assets/SmsSent.png\";\nimport {\n  ConfirmationResult,\n  RecaptchaVerifier,\n  PhoneAuthProvider,\n} from \"firebase/auth\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport { AuthContext } from \"../../../pages/_app\";\nimport { useTranslation } from \"next-i18next\";\nimport { FirebaseError } from \"@firebase/util\";\nimport { CloseButton } from \"../EditOfferOptions/style\";\n\ntype FormType = {\n  \"1\": string;\n  \"2\": string;\n  \"3\": string;\n  \"4\": string;\n  \"5\": string;\n  \"6\": string;\n};\n\ninterface Props {\n  phoneNumber: string;\n  confirmation?: ConfirmationResult;\n  setVerificationSuccess: (success: boolean) => void;\n  mode: \"LOGIN\" | \"UPDATE\" | \"LINK\";\n  callback: () => void;\n  verificationId?: string;\n  close?(): void;\n}\nexport default function SmsVerificationModal({\n  phoneNumber,\n  confirmation,\n  setVerificationSuccess,\n  mode,\n  callback,\n  verificationId,\n  close,\n}: Props) {\n  const { t } = useTranslation();\n  const { identity } = useContext(AuthContext);\n  const [resending, setResending] = useState<boolean>(false);\n  const [resendConfirmation, setResendConfirmation] =\n    useState<ConfirmationResult | null>(null);\n\n  const [error, setError] = useState<string | null>(null);\n  const [apiError, setApiError] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleResendLogin = async () => {\n    setResending(true);\n    try {\n      const confirm = await Authorization.signInWithPhone(\n        phoneNumber,\n        Authorization.recaptcha as RecaptchaVerifier\n      );\n      setResendConfirmation(confirm);\n    } catch (error: unknown) {\n      if (error instanceof Error || error instanceof FirebaseError) {\n        parseError(error?.message);\n      }\n    }\n  };\n  const handleResendLink = async () => {\n    setResending(true);\n\n    try {\n      if (identity) {\n        const confirm = await Authorization.linkWithPhone(\n          phoneNumber,\n          Authorization.recaptcha as RecaptchaVerifier\n        );\n        setResendConfirmation(confirm);\n      }\n    } catch (error: unknown) {\n      if (error instanceof Error || error instanceof FirebaseError) {\n        parseError(error?.message);\n      }\n    }\n  };\n\n  const handleResendUpdate = () => {\n    return null;\n  };\n\n  const parseError = (error: string) => {\n    if (error.includes(\"email-already-exists\")) {\n      setApiError(t(\"others:userRegistration.errors.emailExists\"));\n    } else if (\n      error.includes(\"phone-number-already-exists\") ||\n      error.includes(\"account-exists\")\n    ) {\n      setApiError(t(\"others:userRegistration.errors.phoneLinkingFailed\"));\n    } else if (error.includes(\"too-many-requests\")) {\n      setApiError(t(\"others:userRegistration.errors.tooManyRequest\"));\n    } else if (error.includes(\"invalid-verification\")) {\n      setApiError(t(\"others:userRegistration.errors.invalidCode\"));\n    } else {\n      setApiError(t(\"others:common.sms.verificationFail\"));\n    }\n  };\n  const handleResend =\n    mode === \"LINK\"\n      ? handleResendLink\n      : mode === \"LOGIN\"\n      ? handleResendLogin\n      : handleResendUpdate;\n  const ref1 = useRef<any>(null);\n  const ref2 = useRef<any>(null);\n  const ref3 = useRef<any>(null);\n  const ref4 = useRef<any>(null);\n  const ref5 = useRef<any>(null);\n  const ref6 = useRef<any>(null);\n  const formFields = useForm<FormType>();\n  const {\n    handleSubmit,\n    // register,\n    control,\n    // formState,\n  } = formFields;\n  const onSubmit = async (data: FormType) => {\n    const code =\n      data[\"1\"] + data[\"2\"] + data[\"3\"] + data[\"4\"] + data[\"5\"] + data[\"6\"];\n    setIsLoading(true);\n    if (resending) {\n      try {\n        await resendConfirmation?.confirm(code);\n\n        setVerificationSuccess(true);\n      } catch (error: unknown) {\n        if (error instanceof Error || error instanceof FirebaseError) {\n          parseError(error?.message);\n        }\n      }\n    } else {\n      try {\n        if (mode === \"UPDATE\" && verificationId) {\n          const phoneCredential = PhoneAuthProvider.credential(\n            verificationId,\n            code\n          );\n          await Authorization.updatePhone(phoneCredential);\n        } else {\n          await confirmation?.confirm(code);\n        }\n        setVerificationSuccess(true);\n        callback();\n      } catch (error: unknown) {\n        if (error instanceof Error || error instanceof FirebaseError) {\n          parseError(error?.message);\n        }\n      }\n    }\n    setIsLoading(false);\n  };\n\n  const onError = () => {\n    setError(\"Must be a digit\");\n  };\n\n  return (\n    <CardModal closeable={false}>\n      <View style={{ display: \"none\" }} nativeID=\"recaptcha__container\" />\n      <Wrapper>\n        {close && <CloseButton onPress={close} />}\n        <Image src={SmsSent} alt=\"\"></Image>\n        <StyledHeader>{t(\"others:common.sms.verification\")}</StyledHeader>\n        <StyledText>\n          {t(\"others:common.sms.sentInfo\", { phoneNumber })}\n        </StyledText>\n        <InputWrapper>\n          <FormProvider {...formFields}>\n            <Controller\n              control={control}\n              rules={{\n                maxLength: 100,\n                pattern: /\\d/,\n              }}\n              render={({ field: { onChange, onBlur: _, value } }) => (\n                <StyledInput\n                  borderColor={error ? \"red\" : \"\"}\n                  value={value}\n                  // eslint-disable-next-line\n                  ref={ref1 as any}\n                  keyboardType=\"numeric\"\n                  onChange={(newValue) => {\n                    setError(null);\n                    setApiError(\"\");\n                    if (\n                      !isNaN(Number(newValue.nativeEvent.text)) &&\n                      newValue.nativeEvent.text.length < 2\n                    ) {\n                      onChange(newValue);\n                      if (newValue.nativeEvent.text) {\n                        ref2.current?.focus();\n                      }\n                    }\n                  }}\n                />\n              )}\n              name=\"1\"\n            />\n            <Controller\n              control={control}\n              rules={{\n                maxLength: 100,\n                pattern: /\\d/,\n              }}\n              render={({ field: { onChange, onBlur: _, value } }) => (\n                <StyledInput\n                  borderColor={error ? \"red\" : \"\"}\n                  // eslint-disable-next-line\n                  ref={ref2 as any}\n                  keyboardType=\"numeric\"\n                  value={value}\n                  onChange={(newValue) => {\n                    setError(null);\n                    setApiError(\"\");\n                    if (\n                      !isNaN(Number(newValue.nativeEvent.text)) &&\n                      newValue.nativeEvent.text.length < 2\n                    ) {\n                      onChange(newValue);\n                      if (newValue.nativeEvent.text) {\n                        ref3.current?.focus();\n                      }\n                    }\n                  }}\n                />\n              )}\n              name=\"2\"\n            />\n            <Controller\n              control={control}\n              rules={{\n                maxLength: 100,\n                pattern: /\\d/,\n              }}\n              render={({ field: { onChange, onBlur: _, value } }) => (\n                <StyledInput\n                  borderColor={error ? \"red\" : \"\"}\n                  value={value}\n                  // eslint-disable-next-line\n                  ref={ref3 as any}\n                  keyboardType=\"numeric\"\n                  onChange={(newValue) => {\n                    setError(null);\n                    setApiError(\"\");\n                    if (\n                      !isNaN(Number(newValue.nativeEvent.text)) &&\n                      newValue.nativeEvent.text.length < 2\n                    ) {\n                      onChange(newValue);\n                      if (newValue.nativeEvent.text) {\n                        ref4.current?.focus();\n                      }\n                    }\n                  }}\n                />\n              )}\n              name=\"3\"\n            />\n            <Controller\n              control={control}\n              rules={{\n                maxLength: 100,\n                pattern: /\\d/,\n              }}\n              render={({ field: { onChange, onBlur: _, value } }) => (\n                <StyledInput\n                  borderColor={error ? \"red\" : \"\"}\n                  value={value}\n                  // eslint-disable-next-line\n                  ref={ref4 as any}\n                  keyboardType=\"numeric\"\n                  onChange={(newValue) => {\n                    setError(null);\n                    setApiError(\"\");\n                    if (\n                      !isNaN(Number(newValue.nativeEvent.text)) &&\n                      newValue.nativeEvent.text.length < 2\n                    ) {\n                      onChange(newValue);\n                      if (newValue.nativeEvent.text) {\n                        ref5.current?.focus();\n                      }\n                    }\n                  }}\n                />\n              )}\n              name=\"4\"\n            />\n            <Controller\n              control={control}\n              rules={{\n                maxLength: 100,\n                pattern: /\\d/,\n              }}\n              render={({ field: { onChange, onBlur: _, value } }) => (\n                <StyledInput\n                  borderColor={error ? \"red\" : \"\"}\n                  value={value}\n                  // eslint-disable-next-line\n                  ref={ref5 as any}\n                  keyboardType=\"numeric\"\n                  onChange={(newValue) => {\n                    setError(null);\n                    setApiError(\"\");\n                    if (\n                      !isNaN(Number(newValue.nativeEvent.text)) &&\n                      newValue.nativeEvent.text.length < 2\n                    ) {\n                      onChange(newValue);\n                      if (newValue.nativeEvent.text) {\n                        ref6.current?.focus();\n                      }\n                    }\n                  }}\n                />\n              )}\n              name=\"5\"\n            />\n            <Controller\n              control={control}\n              rules={{\n                maxLength: 100,\n                pattern: /\\d/,\n              }}\n              render={({ field: { onChange, onBlur: _, value } }) => (\n                <StyledInput\n                  borderColor={error ? \"red\" : \"\"}\n                  // eslint-disable-next-line\n                  ref={ref6 as any}\n                  value={value}\n                  onChange={(newValue) => {\n                    setError(null);\n                    setApiError(\"\");\n                    if (\n                      !isNaN(Number(newValue.nativeEvent.text)) &&\n                      newValue.nativeEvent.text.length < 2\n                    ) {\n                      onChange(newValue);\n                    }\n                  }}\n                  keyboardType=\"numeric\"\n                />\n              )}\n              name=\"6\"\n            />\n          </FormProvider>\n        </InputWrapper>\n        {apiError ? <ErrorText>{apiError}</ErrorText> : <></>}\n        <ButtonCta\n          onPress={handleSubmit(onSubmit, onError)}\n          anchor={t(\"others:common.buttons.verify\")}\n          style={{ width: \"100px\", marginTop: \"30px\" }}\n          isLoading={isLoading}\n          disabled={isLoading}\n        />\n        <TouchableOpacity onPress={handleResend}>\n          <StyledText>{t(\"others:common.links.re-sendCode\")}</StyledText>\n        </TouchableOpacity>\n      </Wrapper>\n    </CardModal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}