{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"label\", \"size\", \"style\", \"theme\", \"labelStyle\", \"color\"],\n    _excluded2 = [\"backgroundColor\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _getContrastingColor = _interopRequireDefault(require(\"../../utils/getContrastingColor\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar defaultSize = 64;\n\nvar AvatarText = function AvatarText(_ref) {\n  var label = _ref.label,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      labelStyle = _ref.labelStyle,\n      customColor = _ref.color,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.primary : _ref2$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var textColor = customColor !== null && customColor !== void 0 ? customColor : (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');\n  return React.createElement(_reactNative.View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(_Text.default, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(AvatarText);\n\nexports.default = _default;","map":{"version":3,"sources":["AvatarText.tsx"],"names":["defaultSize","AvatarText","size","color","rest","backgroundColor","theme","restStyle","StyleSheet","textColor","customColor","white","width","height","borderRadius","styles","fontSize","lineHeight","container","justifyContent","alignItems","text","textAlign","textAlignVertical"],"mappings":";;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAQA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,sBAAA;;AACA,IAAA,OAAA,GAAA,OAAA,uBAAA;;AACA,IAAA,oBAAA,GAAA,sBAAA,CAAA,OAAA,mCAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAjB,EAAA;;AAgDA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAQN;AAAA,MARO,KAQP,QARO,KAQP;AAAA,uBANXC,IAMW;AAAA,MANXA,IAMW,0BARO,WAQP;AAAA,MARO,KAQP,QARO,KAQP;AAAA,MARO,KAQP,QARO,KAQP;AAAA,MARO,UAQP,QARO,UAQP;AAAA,MARO,WAQP,QAFXC,KAEW;AAAA,MADRC,IACQ;;AACX,cACEI,YAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CAAAA,KAAAA,KADF,EAAA;AAAA,oCAAQH,eAAR;AAAA,MAAQA,eAAR,sCAA0BC,KAAK,CAALA,MAAAA,CAApB,OAAN;AAAA,MAAmDC,SAAnD;;AAEA,MAAME,SAAS,GACbC,WADa,KAAA,IACbA,IAAAA,WADa,KAAA,KAAA,CACbA,GADa,WACbA,GACA,CAAA,GAAA,oBAAA,CAAA,OAAA,EAAA,eAAA,EAAqCC,OAAAA,CAArC,KAAA,EAFF,oBAEE,CAFF;AAIA,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EAAE,CACL;AACEC,MAAAA,KAAK,EADP,IAAA;AAEEC,MAAAA,MAAM,EAFR,IAAA;AAGEC,MAAAA,YAAY,EAAEZ,IAAI,GAHpB,CAAA;AAIEG,MAAAA,eAAAA,EAAAA;AAJF,KADK,EAOLU,MAAM,CAPD,SAAA,EAAA,SAAA;AADT,GAAA,EAAA,IAAA,CAAA,EAaE,KAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLA,MAAM,CADD,IAAA,EAEL;AACEZ,MAAAA,KAAK,EADP,SAAA;AAEEa,MAAAA,QAAQ,EAAEd,IAAI,GAFhB,CAAA;AAGEe,MAAAA,UAAU,EAAEf;AAHd,KAFK,EADT,UACS,CADT;AAUE,IAAA,aAAa,EAAE;AAVjB,GAAA,EAdJ,KAcI,CAbF,CADF;AAfF,CAAA;;AA+CAD,UAAU,CAAVA,WAAAA,GAAAA,aAAAA;;AAEA,IAAMc,MAAM,GAAG,YAAA,CAAA,UAAA,CAAA,MAAA,CAAkB;AAC/BG,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EADL,QAAA;AAETC,IAAAA,UAAU,EAAE;AAFH,GADoB;AAK/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EADL,QAAA;AAEJC,IAAAA,iBAAiB,EAAE;AAFf;AALyB,CAAlB,CAAf;;eAWe,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,UAAA,C","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = ({\n  label,\n  size = defaultSize,\n  style,\n  theme,\n  labelStyle,\n  color: customColor,\n  ...rest\n}: Props) => {\n  const { backgroundColor = theme.colors.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    customColor ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Text\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            fontSize: size / 2,\n            lineHeight: size,\n          },\n          labelStyle,\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </Text>\n    </View>\n  );\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"]},"metadata":{},"sourceType":"script"}