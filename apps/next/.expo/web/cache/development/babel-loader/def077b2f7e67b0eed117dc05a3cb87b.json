{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useTranslation } from \"next-i18next\";\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { ButtonCta } from \"../Buttons\";\nimport { CompositionSection } from \"../Compositions\";\nimport { InputCotrolLabel as InputControlLabel } from \"../Forms\";\nimport FormContainer from \"../FormLogin/FormContainer\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport FormTextInput from \"../Inputs/FormTextInput\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport { StyledText, StyledHeader, ButtonContainer, styles, ModalContainer, StyledModalText, VerticalDivider } from \"./styles\";\nimport CardModal from \"../CardModal\";\nimport ModalPicture from \"../../../public/assets/PasswordReset.png\";\nimport Image from \"next/image\";\nimport { Routes } from \"../../consts/router\";\n\nvar FormPasswordReset = function FormPasswordReset() {\n  var _errors$resetPassword, _errors$resetPassword2, _errors$resetPassword3, _errors$resetPassword4, _errors$resetPassword5;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      resetSuccess = _useState2[0],\n      setResetSuccess = _useState2[1];\n\n  var router = useRouter();\n  var EMAIL_REGEX = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  var formFields = useForm();\n  var firstInputRef = useRef(null);\n  var oobCodeRef = useRef(null);\n  var handleSubmit = formFields.handleSubmit,\n      errors = formFields.formState.errors,\n      watch = formFields.watch;\n  var ERROR_MESSAGES = {\n    LENGTH: \"others:forms.userRegistration.validations.passwordLength\",\n    REPEAT: \"others:forms.userRegistration.validations.passwordMismatch\"\n  };\n  var secondInputErrorType = errors == null ? void 0 : (_errors$resetPassword = errors.resetPassword) == null ? void 0 : (_errors$resetPassword2 = _errors$resetPassword.passwordRepeat) == null ? void 0 : _errors$resetPassword2.type;\n  firstInputRef.current = watch(\"resetPassword.password\", \"\");\n\n  var onSubmit = function onSubmit(data) {\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!oobCodeRef.current) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Authorization.confirmPasswordResetEmail(oobCodeRef.current, data.resetPassword.passwordRepeat));\n\n          case 4:\n            setResetSuccess(true);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 7]], Promise);\n  };\n\n  var onError = function onError() {\n    return null;\n  };\n\n  var validatePasswordMismatch = function validatePasswordMismatch(value) {\n    return value === firstInputRef.current;\n  };\n\n  var onPressHandler = function onPressHandler() {\n    return router.push(Routes.SIGN_IN);\n  };\n\n  useEffect(function () {\n    var queryParams = new URLSearchParams(window.location.search);\n    oobCodeRef.current = queryParams.get(\"oobCode\");\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(CompositionSection, {\n    padding: [40, 15, 0, 15],\n    flexGrow: \"2\"\n  }, React.createElement(StyledHeader, null, t(\"others:common.links.resetPassword\")), React.createElement(StyledText, null, t(\"others:forms.resetPassword.header\")), React.createElement(FormContainer, null, React.createElement(FormProvider, formFields, React.createElement(InputControlLabel, {\n    marginBottom: \"10\"\n  }, t(\"others:forms.userRegistration.newPassword\")), React.createElement(FormTextInput, {\n    name: \"resetPassword.password\",\n    label: t(\"others:forms.userRegistration.newPassword\"),\n    secureTextEntry: true,\n    rules: {\n      required: true,\n      maxLength: 50,\n      minLength: 8\n    },\n    error: errors == null ? void 0 : (_errors$resetPassword3 = errors.resetPassword) == null ? void 0 : _errors$resetPassword3.password,\n    errorMsg: t(ERROR_MESSAGES.LENGTH),\n    styles: {\n      wrapper: {\n        marginBottom: 10\n      }\n    }\n  }), React.createElement(VerticalDivider, {\n    height: errors != null && (_errors$resetPassword4 = errors.resetPassword) != null && _errors$resetPassword4.password ? \"0px\" : \"26px\"\n  }), React.createElement(InputControlLabel, {\n    marginBottom: \"10\"\n  }, t(\"others:forms.userRegistration.confirmPassword\")), React.createElement(FormTextInput, {\n    name: \"resetPassword.passwordRepeat\",\n    label: t(\"others:forms.userRegistration.confirmPassword\"),\n    secureTextEntry: true,\n    rules: {\n      required: true,\n      maxLength: 50,\n      minLength: 8,\n      validate: validatePasswordMismatch\n    },\n    error: errors == null ? void 0 : (_errors$resetPassword5 = errors.resetPassword) == null ? void 0 : _errors$resetPassword5.passwordRepeat,\n    errorMsg: t(\"\" + (secondInputErrorType === \"validate\" ? ERROR_MESSAGES.REPEAT : ERROR_MESSAGES.LENGTH)),\n    styles: {\n      wrapper: {\n        marginBottom: 10\n      }\n    }\n  })), React.createElement(ButtonContainer, null, React.createElement(ButtonCta, {\n    onPress: handleSubmit(onSubmit, onError),\n    anchor: t(\"others:forms.resetPassword.setNewPassword\"),\n    style: styles.verifyButton\n  }))), resetSuccess ? React.createElement(CardModal, null, React.createElement(ModalContainer, null, React.createElement(Image, {\n    src: ModalPicture,\n    alt: \"\"\n  }), React.createElement(StyledModalText, null, t(\"others:common.resetPassword.success\")), React.createElement(ButtonCta, {\n    onPress: onPressHandler,\n    anchor: \"Continue\",\n    style: styles.confirmButton\n  }))) : React.createElement(React.Fragment, null)));\n};\n\nexport default FormPasswordReset;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/FormPasswordReset/index.tsx"],"names":["useTranslation","useRouter","React","useEffect","useRef","useState","ButtonCta","CompositionSection","InputCotrolLabel","InputControlLabel","FormContainer","FormProvider","useForm","FormTextInput","Authorization","StyledText","StyledHeader","ButtonContainer","styles","ModalContainer","StyledModalText","VerticalDivider","CardModal","ModalPicture","Image","Routes","FormPasswordReset","t","resetSuccess","setResetSuccess","router","EMAIL_REGEX","formFields","firstInputRef","oobCodeRef","handleSubmit","errors","formState","watch","ERROR_MESSAGES","LENGTH","REPEAT","secondInputErrorType","resetPassword","passwordRepeat","type","current","onSubmit","data","confirmPasswordResetEmail","onError","validatePasswordMismatch","value","onPressHandler","push","SIGN_IN","queryParams","URLSearchParams","window","location","search","get","required","maxLength","minLength","password","wrapper","marginBottom","validate","verifyButton","confirmButton"],"mappings":"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","sourcesContent":["import { useTranslation } from \"next-i18next\";\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { ButtonCta } from \"../Buttons\";\nimport { CompositionSection } from \"../Compositions\";\nimport { InputCotrolLabel as InputControlLabel } from \"../Forms\";\n\nimport FormContainer from \"../FormLogin/FormContainer\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { FormType } from \"../../helpers/FormTypes\";\nimport FormTextInput from \"../Inputs/FormTextInput\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport {\n  StyledText,\n  StyledHeader,\n  ButtonContainer,\n  styles,\n  ModalContainer,\n  StyledModalText,\n  VerticalDivider,\n} from \"./styles\";\nimport CardModal from \"../CardModal\";\nimport ModalPicture from \"../../../public/assets/PasswordReset.png\";\nimport Image from \"next/image\";\nimport { Routes } from \"../../consts/router\";\n\nconst FormPasswordReset = () => {\n  const { t } = useTranslation();\n  const [resetSuccess, setResetSuccess] = useState<boolean>(false);\n  const router = useRouter();\n  // eslint-disable-next-line\n  const EMAIL_REGEX = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  const formFields = useForm<FormType>();\n  const firstInputRef = useRef<string | null>(null);\n  const oobCodeRef = useRef<null | string>(null);\n\n  const {\n    handleSubmit,\n    formState: { errors },\n    watch,\n  } = formFields;\n\n  const ERROR_MESSAGES = {\n    LENGTH: \"others:forms.userRegistration.validations.passwordLength\",\n    REPEAT: \"others:forms.userRegistration.validations.passwordMismatch\",\n  };\n\n  const secondInputErrorType = errors?.resetPassword?.passwordRepeat?.type;\n\n  firstInputRef.current = watch(\"resetPassword.password\", \"\");\n\n  const onSubmit = async (data: {\n    resetPassword: { passwordRepeat: string };\n  }) => {\n    if (oobCodeRef.current) {\n      try {\n        await Authorization.confirmPasswordResetEmail(\n          oobCodeRef.current,\n          data.resetPassword.passwordRepeat\n        );\n        setResetSuccess(true);\n      } catch (e) {\n        return null;\n      }\n    }\n  };\n\n  const onError = () => null;\n\n  const validatePasswordMismatch = (value: string) =>\n    value === firstInputRef.current;\n\n  const onPressHandler = () => router.push(Routes.SIGN_IN);\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(window.location.search);\n    oobCodeRef.current = queryParams.get(\"oobCode\");\n  }, []);\n\n  return (\n    <>\n      <CompositionSection padding={[40, 15, 0, 15]} flexGrow=\"2\">\n        <StyledHeader>{t(\"others:common.links.resetPassword\")}</StyledHeader>\n        <StyledText>{t(\"others:forms.resetPassword.header\")}</StyledText>\n        <FormContainer>\n          <FormProvider {...formFields}>\n            <InputControlLabel marginBottom={\"10\"}>\n              {t(\"others:forms.userRegistration.newPassword\")}\n            </InputControlLabel>\n            <FormTextInput\n              name={\"resetPassword.password\"}\n              label={t(\"others:forms.userRegistration.newPassword\")}\n              secureTextEntry\n              rules={{\n                required: true,\n                maxLength: 50,\n                minLength: 8,\n              }}\n              error={errors?.resetPassword?.password}\n              errorMsg={t(ERROR_MESSAGES.LENGTH)}\n              styles={{ wrapper: { marginBottom: 10 } }}\n            />\n            <VerticalDivider\n              height={errors?.resetPassword?.password ? \"0px\" : \"26px\"}\n            />\n            <InputControlLabel marginBottom={\"10\"}>\n              {t(\"others:forms.userRegistration.confirmPassword\")}\n            </InputControlLabel>\n            <FormTextInput\n              name={\"resetPassword.passwordRepeat\"}\n              label={t(\"others:forms.userRegistration.confirmPassword\")}\n              secureTextEntry\n              rules={{\n                required: true,\n                maxLength: 50,\n                minLength: 8,\n                validate: validatePasswordMismatch,\n              }}\n              error={errors?.resetPassword?.passwordRepeat}\n              errorMsg={t(\n                `${\n                  secondInputErrorType === \"validate\"\n                    ? ERROR_MESSAGES.REPEAT\n                    : ERROR_MESSAGES.LENGTH\n                }`\n              )}\n              styles={{ wrapper: { marginBottom: 10 } }}\n            />\n          </FormProvider>\n          <ButtonContainer>\n            <ButtonCta\n              onPress={handleSubmit(onSubmit, onError)}\n              anchor={t(\"others:forms.resetPassword.setNewPassword\")}\n              style={styles.verifyButton}\n            />\n          </ButtonContainer>\n        </FormContainer>\n        {resetSuccess ? (\n          <CardModal>\n            <ModalContainer>\n              <Image src={ModalPicture} alt=\"\" />\n              <StyledModalText>\n                {t(\"others:common.resetPassword.success\")}\n              </StyledModalText>\n              <ButtonCta\n                onPress={onPressHandler}\n                anchor={\"Continue\"}\n                style={styles.confirmButton}\n              />\n            </ModalContainer>\n          </CardModal>\n        ) : (\n          <></>\n        )}\n      </CompositionSection>\n    </>\n  );\n};\n\nexport default FormPasswordReset;\n"]},"metadata":{},"sourceType":"module"}