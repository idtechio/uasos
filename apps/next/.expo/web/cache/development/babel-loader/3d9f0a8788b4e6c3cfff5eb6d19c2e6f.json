{"ast":null,"code":"import * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport default function useIsKeyboardShown(_ref) {\n  var onShow = _ref.onShow,\n      onHide = _ref.onHide;\n  React.useEffect(function () {\n    var willShowSubscription;\n    var willHideSubscription;\n    var didShowSubscription;\n    var didHideSubscription;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return function () {\n      if (Platform.OS === 'ios') {\n        var _willShowSubscription, _willHideSubscription;\n\n        if ((_willShowSubscription = willShowSubscription) !== null && _willShowSubscription !== void 0 && _willShowSubscription.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if ((_willHideSubscription = willHideSubscription) !== null && _willHideSubscription !== void 0 && _willHideSubscription.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        var _didShowSubscription, _didHideSubscription;\n\n        if ((_didShowSubscription = didShowSubscription) !== null && _didShowSubscription !== void 0 && _didShowSubscription.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if ((_didHideSubscription = didHideSubscription) !== null && _didHideSubscription !== void 0 && _didHideSubscription.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}","map":{"version":3,"sources":["useIsKeyboardShown.tsx"],"names":["onHide","React","Platform","willShowSubscription","Keyboard","willHideSubscription","didShowSubscription","didHideSubscription"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAOA,eAAe,SAAA,kBAAA,OAAuD;AAAA,MAA3B,MAA2B,QAA3B,MAA2B;AAAA,MAAjBA,MAAiB,QAAjBA,MAAiB;AACpEC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAA,oBAAA;AACA,QAAA,oBAAA;AACA,QAAA,mBAAA;AACA,QAAA,mBAAA;;AAEA,QAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AACzBC,MAAAA,oBAAoB,GAAGC,QAAQ,CAARA,WAAAA,CAAAA,kBAAAA,EAAvBD,MAAuBC,CAAvBD;AACAE,MAAAA,oBAAoB,GAAGD,QAAQ,CAARA,WAAAA,CAAAA,kBAAAA,EAAvBC,MAAuBD,CAAvBC;AAFF,KAAA,MAGO;AACLC,MAAAA,mBAAmB,GAAGF,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EAAtBE,MAAsBF,CAAtBE;AACAC,MAAAA,mBAAmB,GAAGH,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EAAtBG,MAAsBH,CAAtBG;AACD;;AAED,WAAO,YAAM;AACX,UAAIL,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AAAA,YAAA,qBAAA,EAAA,qBAAA;;AACzB,YAAA,CAAA,qBAAA,GAAA,oBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIC,qBAAAA,CAAJ,MAAA,EAAkC;AAChCA,UAAAA,oBAAoB,CAApBA,MAAAA;AADF,SAAA,MAEO;AACLC,UAAAA,QAAQ,CAARA,cAAAA,CAAAA,kBAAAA,EAAAA,MAAAA;AACD;;AAED,YAAA,CAAA,qBAAA,GAAA,oBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIC,qBAAAA,CAAJ,MAAA,EAAkC;AAChCA,UAAAA,oBAAoB,CAApBA,MAAAA;AADF,SAAA,MAEO;AACLD,UAAAA,QAAQ,CAARA,cAAAA,CAAAA,kBAAAA,EAAAA,MAAAA;AACD;AAXH,OAAA,MAYO;AAAA,YAAA,oBAAA,EAAA,oBAAA;;AACL,YAAA,CAAA,oBAAA,GAAA,mBAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,IAAIE,oBAAAA,CAAJ,MAAA,EAAiC;AAC/BA,UAAAA,mBAAmB,CAAnBA,MAAAA;AADF,SAAA,MAEO;AACLF,UAAAA,QAAQ,CAARA,cAAAA,CAAAA,iBAAAA,EAAAA,MAAAA;AACD;;AAED,YAAA,CAAA,oBAAA,GAAA,mBAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,IAAIG,oBAAAA,CAAJ,MAAA,EAAiC;AAC/BA,UAAAA,mBAAmB,CAAnBA,MAAAA;AADF,SAAA,MAEO;AACLH,UAAAA,QAAQ,CAARA,cAAAA,CAAAA,iBAAAA,EAAAA,MAAAA;AACD;AACF;AAzBH,KAAA;AAdFH,GAAAA,EAyCG,CAAA,MAAA,EAzCHA,MAyCG,CAzCHA;AA0CD","sourcesContent":["import * as React from 'react';\nimport { Keyboard, NativeEventSubscription, Platform } from 'react-native';\n\ntype Props = {\n  onShow: () => void;\n  onHide: () => void;\n};\nexport default function useIsKeyboardShown({ onShow, onHide }: Props) {\n  React.useEffect(() => {\n    let willShowSubscription: NativeEventSubscription | undefined;\n    let willHideSubscription: NativeEventSubscription | undefined;\n    let didShowSubscription: NativeEventSubscription | undefined;\n    let didHideSubscription: NativeEventSubscription | undefined;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        if (willShowSubscription?.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if (willHideSubscription?.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        if (didShowSubscription?.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if (didHideSubscription?.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}\n"]},"metadata":{},"sourceType":"module"}