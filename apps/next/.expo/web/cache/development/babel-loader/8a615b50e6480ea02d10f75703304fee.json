{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useCallback, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { InputControl, InputCotrolLabel } from \"../Forms\";\nimport ChoiceButton from \"../Forms/ChoiceButton\";\n\nvar FormButtonsVertical = function FormButtonsVertical(_ref) {\n  var data = _ref.data,\n      label = _ref.label;\n\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control,\n      getValues = _useFormContext.getValues;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      buttonsState = _useState2[0],\n      setButtonsState = _useState2[1];\n\n  useEffect(function () {\n    var initialState = [];\n    data.forEach(function (value) {\n      if (getValues(value.id)) {\n        initialState.push(value.id);\n      }\n    });\n    setButtonsState(initialState);\n  }, [data, getValues]);\n  var onTilePress = useCallback(function (id, onChange) {\n    setButtonsState(function (prevState) {\n      var newState = _toConsumableArray(prevState);\n\n      if (prevState.includes(id)) {\n        onChange(false);\n        return newState.filter(function (v) {\n          return v !== id;\n        });\n      }\n\n      newState.push(id);\n      onChange(true);\n      return newState;\n    });\n  }, []);\n  return React.createElement(InputControl, null, !!label && React.createElement(InputCotrolLabel, null, label), data.map(function (_ref2) {\n    var id = _ref2.id,\n        label = _ref2.label,\n        icon = _ref2.icon;\n    return React.createElement(Controller, {\n      key: id,\n      control: control,\n      render: function render(_ref3) {\n        var onChange = _ref3.field.onChange;\n        return React.createElement(View, {\n          key: id\n        }, React.createElement(ChoiceButton, {\n          key: id,\n          isVertical: true,\n          isSmall: true,\n          onPress: function onPress() {\n            return onTilePress(id, onChange);\n          },\n          text: label,\n          icon: icon,\n          isSelected: buttonsState.includes(id)\n        }));\n      },\n      name: id\n    });\n  }));\n};\n\nexport default FormButtonsVertical;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Inputs/FormButtonsVertcal.tsx"],"names":["React","useEffect","useCallback","useState","Controller","useFormContext","InputControl","InputCotrolLabel","ChoiceButton","FormButtonsVertical","data","label","control","getValues","buttonsState","setButtonsState","initialState","forEach","value","id","push","onTilePress","onChange","prevState","newState","includes","filter","v","map","icon","field"],"mappings":";;AAAA,OAAOA,KAAP,IAGEC,SAHF,EAIEC,WAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,iBAA3C;;AAIA,SAASC,YAAT,EAAuBC,gBAAvB;AACA,OAAOC,YAAP;;AAcA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAA4B;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;;AACtD,wBAA+BN,cAAc,EAA7C;AAAA,MAAQO,OAAR,mBAAQA,OAAR;AAAA,MAAiBC,SAAjB,mBAAiBA,SAAjB;;AACA,kBAAwCV,QAAQ,CAAW,EAAX,CAAhD;AAAA;AAAA,MAAOW,YAAP;AAAA,MAAqBC,eAArB;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMe,YAAsC,GAAG,EAA/C;AAEAN,IAAAA,IAAI,CAACO,OAAL,CAAa,UAACC,KAAD,EAAiB;AAC5B,UAAIL,SAAS,CAACK,KAAK,CAACC,EAAP,CAAb,EAAyB;AACvBH,QAAAA,YAAY,CAACI,IAAb,CAAkBF,KAAK,CAACC,EAAxB;AACD;AACF,KAJD;AAMAJ,IAAAA,eAAe,CAACC,YAAD,CAAf;AACD,GAVQ,EAUN,CAACN,IAAD,EAAOG,SAAP,CAVM,CAAT;AAYA,MAAMQ,WAAW,GAAGnB,WAAW,CAC7B,UAACiB,EAAD,EAAaG,QAAb,EAAyD;AACvDP,IAAAA,eAAe,CAAC,UAACQ,SAAD,EAAe;AAC7B,UAAMC,QAAQ,sBAAOD,SAAP,CAAd;;AACA,UAAIA,SAAS,CAACE,QAAV,CAAmBN,EAAnB,CAAJ,EAA4B;AAC1BG,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,eAAOE,QAAQ,CAACE,MAAT,CAAgB,UAACC,CAAD;AAAA,iBAAOA,CAAC,KAAKR,EAAb;AAAA,SAAhB,CAAP;AACD;;AACDK,MAAAA,QAAQ,CAACJ,IAAT,CAAcD,EAAd;AACAG,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,aAAOE,QAAP;AACD,KATc,CAAf;AAUD,GAZ4B,EAa7B,EAb6B,CAA/B;AAgBA,SACE,oBAAC,YAAD,QACG,CAAC,CAACb,KAAF,IAAW,oBAAC,gBAAD,QAAmBA,KAAnB,CADd,EAEGD,IAAI,CAACkB,GAAL,CAAS,iBAAyB;AAAA,QAAtBT,EAAsB,SAAtBA,EAAsB;AAAA,QAAlBR,KAAkB,SAAlBA,KAAkB;AAAA,QAAXkB,IAAW,SAAXA,IAAW;AACjC,WACE,oBAAC,UAAD;AACE,MAAA,GAAG,EAAEV,EADP;AAEE,MAAA,OAAO,EAAEP,OAFX;AAGE,MAAA,MAAM,EAAE;AAAA,YAAYU,QAAZ,SAAGQ,KAAH,CAAYR,QAAZ;AAAA,eACN,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEH;AAAX,WACE,oBAAC,YAAD;AACE,UAAA,GAAG,EAAEA,EADP;AAEE,UAAA,UAAU,MAFZ;AAGE,UAAA,OAAO,MAHT;AAIE,UAAA,OAAO,EAAE;AAAA,mBAAME,WAAW,CAACF,EAAD,EAAKG,QAAL,CAAjB;AAAA,WAJX;AAKE,UAAA,IAAI,EAAEX,KALR;AAME,UAAA,IAAI,EAAEkB,IANR;AAOE,UAAA,UAAU,EAAEf,YAAY,CAACW,QAAb,CAAsBN,EAAtB;AAPd,UADF,CADM;AAAA,OAHV;AAiBE,MAAA,IAAI,EAAEA;AAjBR,MADF;AAqBD,GAtBA,CAFH,CADF;AA4BD,CA5DD;;AA6DA,eAAeV,mBAAf","sourcesContent":["import React, {\n  ReactNode,\n  SetStateAction,\n  useEffect,\n  useCallback,\n  useState,\n} from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { View } from \"react-native\";\n\nimport { FormKey } from \"../../helpers/FormTypes\";\nimport { InputControl, InputCotrolLabel } from \"../Forms\";\nimport ChoiceButton from \"../Forms/ChoiceButton\";\n\nexport type Data = {\n  id: FormKey;\n  label: string;\n  icon?: ReactNode;\n  extra?: ReactNode;\n};\n\ntype Props = {\n  label?: string;\n  data: Data[];\n};\n\nconst FormButtonsVertical = ({ data, label }: Props) => {\n  const { control, getValues } = useFormContext();\n  const [buttonsState, setButtonsState] = useState<string[]>([]);\n\n  useEffect(() => {\n    const initialState: SetStateAction<string[]> = [];\n\n    data.forEach((value: Data) => {\n      if (getValues(value.id)) {\n        initialState.push(value.id);\n      }\n    });\n\n    setButtonsState(initialState);\n  }, [data, getValues]);\n\n  const onTilePress = useCallback(\n    (id: string, onChange: (...event: unknown[]) => void) => {\n      setButtonsState((prevState) => {\n        const newState = [...prevState];\n        if (prevState.includes(id)) {\n          onChange(false);\n          return newState.filter((v) => v !== id);\n        }\n        newState.push(id);\n        onChange(true);\n        return newState;\n      });\n    },\n    []\n  );\n\n  return (\n    <InputControl>\n      {!!label && <InputCotrolLabel>{label}</InputCotrolLabel>}\n      {data.map(({ id, label, icon }) => {\n        return (\n          <Controller\n            key={id}\n            control={control}\n            render={({ field: { onChange } }) => (\n              <View key={id}>\n                <ChoiceButton\n                  key={id}\n                  isVertical\n                  isSmall\n                  onPress={() => onTilePress(id, onChange)}\n                  text={label}\n                  icon={icon}\n                  isSelected={buttonsState.includes(id)}\n                />\n                {/* {extra && value && extra} */}\n              </View>\n            )}\n            name={id}\n          />\n        );\n      })}\n    </InputControl>\n  );\n};\nexport default FormButtonsVertical;\n"]},"metadata":{},"sourceType":"module"}