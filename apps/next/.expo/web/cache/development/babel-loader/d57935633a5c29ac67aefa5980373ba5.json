{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Modal = _interopRequireDefault(require(\"../Modal\"));\n\nvar _DialogContent = _interopRequireDefault(require(\"./DialogContent\"));\n\nvar _DialogActions = _interopRequireDefault(require(\"./DialogActions\"));\n\nvar _DialogTitle2 = _interopRequireDefault(require(\"./DialogTitle\"));\n\nvar _DialogScrollArea = _interopRequireDefault(require(\"./DialogScrollArea\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _overlay = _interopRequireDefault(require(\"../../styles/overlay\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar DIALOG_ELEVATION = 24;\n\nvar Dialog = function Dialog(_ref) {\n  var children = _ref.children,\n      _ref$dismissable = _ref.dismissable,\n      dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,\n      onDismiss = _ref.onDismiss,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      style = _ref.style,\n      theme = _ref.theme;\n  return React.createElement(_Modal.default, {\n    dismissable: dismissable,\n    onDismiss: onDismiss,\n    visible: visible,\n    contentContainerStyle: [{\n      borderRadius: theme.roundness,\n      backgroundColor: theme.dark && theme.mode === 'adaptive' ? (0, _overlay.default)(DIALOG_ELEVATION, theme.colors.surface) : theme.colors.surface\n    }, styles.container, style]\n  }, React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).map(function (child, i) {\n    if (i === 0 && React.isValidElement(child) && child.type === _DialogContent.default) {\n      return React.cloneElement(child, {\n        style: [{\n          paddingTop: 24\n        }, child.props.style]\n      });\n    }\n\n    return child;\n  }));\n};\n\nDialog.Content = _DialogContent.default;\nDialog.Actions = _DialogActions.default;\nDialog.Title = _DialogTitle2.default;\nDialog.ScrollArea = _DialogScrollArea.default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    marginVertical: _reactNative.Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Dialog);\n\nexports.default = _default;","map":{"version":3,"sources":["Dialog.tsx"],"names":["DIALOG_ELEVATION","Dialog","dismissable","visible","theme","borderRadius","backgroundColor","surface","styles","child","i","React","DialogContent","style","paddingTop","DialogActions","DialogTitle","DialogScrollArea","container","marginVertical","Platform","marginHorizontal","elevation","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => (\n  <Modal\n    dismissable={dismissable}\n    onDismiss={onDismiss}\n    visible={visible}\n    contentContainerStyle={[\n      {\n        borderRadius: theme.roundness,\n        backgroundColor:\n          theme.dark && theme.mode === 'adaptive'\n            ? overlay(DIALOG_ELEVATION, theme.colors.surface)\n            : theme.colors.surface,\n      },\n      styles.container,\n      style,\n    ]}\n  >\n    {React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .map((child, i) => {\n        if (\n          i === 0 &&\n          React.isValidElement(child) &&\n          child.type === DialogContent\n        ) {\n          // Dialog content is the first item, so we add a top padding\n          return React.cloneElement(child, {\n            style: [{ paddingTop: 24 }, child.props.style],\n          });\n        }\n\n        return child;\n      })}\n  </Modal>\n);\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"script"}