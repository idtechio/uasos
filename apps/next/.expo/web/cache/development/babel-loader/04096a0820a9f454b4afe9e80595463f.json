{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"accessibilityLabel\", \"accessibilityState\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"uppercase\", \"testID\", \"animateFrom\", \"extended\", \"iconMode\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Surface from \"../../Surface\";\nimport Icon from \"../../Icon\";\nimport TouchableRipple from \"../../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../../core/theming\";\nimport { white, black } from \"../../../styles/colors\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\nimport { getCombinedStyles } from \"./utils\";\nvar SIZE = 56;\nvar BORDER_RADIUS = SIZE / 2;\nvar SCALE = 0.9;\n\nvar AnimatedFAB = function AnimatedFAB(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n      accessibilityState = _ref.accessibilityState,\n      customColor = _ref.color,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      theme = _ref.theme,\n      style = _ref.style,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      testID = _ref.testID,\n      _ref$animateFrom = _ref.animateFrom,\n      animateFrom = _ref$animateFrom === void 0 ? 'right' : _ref$animateFrom,\n      _ref$extended = _ref.extended,\n      extended = _ref$extended === void 0 ? false : _ref$extended,\n      _ref$iconMode = _ref.iconMode,\n      iconMode = _ref$iconMode === void 0 ? 'dynamic' : _ref$iconMode,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isIOS = Platform.OS === 'ios';\n  var isAnimatedFromRight = animateFrom === 'right';\n  var isIconStatic = iconMode === 'static';\n  var isRTL = I18nManager.isRTL;\n\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n      visibility = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new Animated.Value(0)),\n      animFAB = _React$useRef2.current;\n\n  var scale = theme.animation.scale;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      textWidth = _React$useState2[0],\n      setTextWidth = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      textHeight = _React$useState4[0],\n      setTextHeight = _React$useState4[1];\n\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  var disabledColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref2$backgroundColor;\n\n  var foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else {\n    foregroundColor = !color(backgroundColor).isLight() ? white : 'rgba(0, 0, 0, .54)';\n  }\n\n  var rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n  var extendedWidth = textWidth + 1.5 * SIZE;\n  var distance = isAnimatedFromRight ? -textWidth - BORDER_RADIUS : textWidth + BORDER_RADIUS;\n  React.useEffect(function () {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  var onTextLayout = function onTextLayout(_ref3) {\n    var nativeEvent = _ref3.nativeEvent;\n    var currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    var currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  var propForDirection = function propForDirection(right) {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  var combinedStyles = getCombinedStyles({\n    isAnimatedFromRight: isAnimatedFromRight,\n    isIconStatic: isIconStatic,\n    distance: distance,\n    animFAB: animFAB\n  });\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [{\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }],\n      elevation: isIOS ? 6 : 0\n    }, styles.container, disabled && styles.disabled, style]\n  }), React.createElement(Animated.View, {\n    style: [{\n      transform: [{\n        scaleY: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([SCALE, 1])\n        })\n      }]\n    }, styles.standard]\n  }, React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.shadowWrapper]\n  }, React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.shadow, {\n      width: extendedWidth,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([1, 0.15, 0])\n      })\n    }]\n  }), React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.shadow, {\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([0, 0.85, 1])\n      }),\n      width: SIZE,\n      borderRadius: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0]),\n        outputRange: propForDirection([SIZE / (extendedWidth / SIZE), BORDER_RADIUS])\n      })\n    }, combinedStyles.absoluteFill]\n  })), React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: [styles.innerWrapper]\n  }, React.createElement(Animated.View, {\n    style: [styles.standard, {\n      width: extendedWidth,\n      backgroundColor: backgroundColor\n    }, combinedStyles.innerWrapper]\n  }, React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: _objectSpread(_objectSpread({}, accessibilityState), {}, {\n      disabled: disabled\n    }),\n    testID: testID,\n    style: styles.touchable\n  }, React.createElement(View, {\n    style: [styles.standard, {\n      width: extendedWidth\n    }]\n  }))))), React.createElement(Animated.View, {\n    style: [styles.iconWrapper, combinedStyles.iconWrapper],\n    pointerEvents: \"none\"\n  }, React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  })), React.createElement(View, {\n    pointerEvents: \"none\"\n  }, React.createElement(AnimatedText, {\n    numberOfLines: 1,\n    onTextLayout: isIOS ? onTextLayout : undefined,\n    ellipsizeMode: 'tail',\n    style: [_defineProperty({}, isAnimatedFromRight || isRTL ? 'right' : 'left', isIconStatic ? isIOS ? SIZE - 10 : SIZE - 12 : BORDER_RADIUS), {\n      minWidth: textWidth,\n      top: -BORDER_RADIUS - textHeight / 2,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.7 * distance, 0]),\n        outputRange: propForDirection([1, 0, 0])\n      }),\n      transform: [{\n        translateX: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([0, SIZE])\n        })\n      }]\n    }, styles.label, uppercase && styles.uppercaseLabel, _objectSpread({\n      color: foregroundColor\n    }, theme.fonts.medium)]\n  }, label)), !isIOS && React.createElement(ScrollView, {\n    style: styles.textPlaceholderContainer\n  }, React.createElement(Text, {\n    onTextLayout: onTextLayout\n  }, label)));\n};\n\nvar styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n    borderRadius: BORDER_RADIUS\n  },\n  disabled: {\n    elevation: 0\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    borderRadius: BORDER_RADIUS\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n    borderRadius: BORDER_RADIUS\n  },\n  shadowWrapper: {\n    elevation: 0\n  },\n  shadow: {\n    elevation: 6,\n    borderRadius: BORDER_RADIUS\n  },\n  touchable: {\n    borderRadius: BORDER_RADIUS\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE\n  },\n  label: {\n    position: 'absolute'\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute'\n  }\n});\nexport default withTheme(AnimatedFAB);","map":{"version":3,"sources":["AnimatedFAB.tsx"],"names":["SIZE","BORDER_RADIUS","SCALE","AnimatedFAB","accessibilityLabel","color","visible","uppercase","animateFrom","extended","iconMode","rest","isIOS","Platform","isAnimatedFromRight","isIconStatic","isRTL","current","visibility","React","Animated","animFAB","scale","theme","toValue","duration","useNativeDriver","disabledColor","backgroundColor","disabled","accent","StyleSheet","foregroundColor","rippleColor","extendedWidth","textWidth","distance","easing","Easing","linear","onTextLayout","nativeEvent","currentWidth","Math","currentHeight","setTextHeight","setTextWidth","propForDirection","right","combinedStyles","getCombinedStyles","opacity","transform","elevation","styles","scaleY","inputRange","outputRange","width","borderRadius","touchable","minWidth","top","textHeight","translateX","medium","textPlaceholderContainer","standard","height","container","position","innerWrapper","flexDirection","overflow","shadowWrapper","shadow","iconWrapper","alignItems","justifyContent","label","uppercaseLabel","textTransform","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  Easing,\n  ScrollView,\n  Text,\n  Platform,\n  I18nManager,\n} from 'react-native';\nimport Surface from '../../Surface';\nimport Icon from '../../Icon';\nimport TouchableRipple from '../../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport { withTheme } from '../../../core/theming';\nimport type {\n  AccessibilityState,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n} from 'react-native';\nimport { white, black } from '../../../styles/colors';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { getCombinedStyles } from './utils';\n\nexport type AnimatedFABIconMode = 'static' | 'dynamic';\nexport type AnimatedFABAnimateFrom = 'left' | 'right';\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Label for extended `FAB`.\n   */\n  label: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Whether icon should be translated to the end of extended `FAB` or be static and stay in the same place. The default value is `dynamic`.\n   */\n  iconMode?: AnimatedFABIconMode;\n  /**\n   * Indicates from which direction animation should be performed. The default value is `right`.\n   */\n  animateFrom?: AnimatedFABAnimateFrom;\n  /**\n   * Whether `FAB` should start animation to extend.\n   */\n  extended: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\nconst SIZE = 56;\nconst BORDER_RADIUS = SIZE / 2;\nconst SCALE = 0.9;\n\nconst AnimatedFAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  testID,\n  animateFrom = 'right',\n  extended = false,\n  iconMode = 'dynamic',\n  ...rest\n}: Props) => {\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const { isRTL } = I18nManager;\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { current: animFAB } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { scale } = theme.animation;\n\n  const [textWidth, setTextWidth] = React.useState<number>(0);\n  const [textHeight, setTextHeight] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n    StyleSheet.flatten<ViewStyle>(style) || {};\n\n  let foregroundColor: string;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = !color(backgroundColor as string).isLight()\n      ? white\n      : 'rgba(0, 0, 0, .54)';\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  const extendedWidth = textWidth + 1.5 * SIZE;\n\n  const distance = isAnimatedFromRight\n    ? -textWidth - BORDER_RADIUS\n    : textWidth + BORDER_RADIUS;\n\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear,\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = <T,>(right: T[]): T[] => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB,\n  });\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n            elevation: isIOS ? 6 : 0,\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n    >\n      <Animated.View\n        style={[\n          {\n            transform: [\n              {\n                scaleY: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([SCALE, 1]),\n                }),\n              },\n            ],\n          },\n          styles.standard,\n        ]}\n      >\n        <View style={[StyleSheet.absoluteFill, styles.shadowWrapper]}>\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                width: extendedWidth,\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([1, 0.15, 0]),\n                }),\n              },\n            ]}\n          />\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([0, 0.85, 1]),\n                }),\n                width: SIZE,\n                borderRadius: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([\n                    SIZE / (extendedWidth / SIZE),\n                    BORDER_RADIUS,\n                  ]),\n                }),\n              },\n              combinedStyles.absoluteFill,\n            ]}\n          />\n        </View>\n        <Animated.View pointerEvents=\"box-none\" style={[styles.innerWrapper]}>\n          <Animated.View\n            style={[\n              styles.standard,\n              {\n                width: extendedWidth,\n                backgroundColor,\n              },\n              combinedStyles.innerWrapper,\n            ]}\n          >\n            <TouchableRipple\n              borderless\n              onPress={onPress}\n              onLongPress={onLongPress}\n              rippleColor={rippleColor}\n              disabled={disabled}\n              accessibilityLabel={accessibilityLabel}\n              // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType=\"button\"\n              accessibilityRole=\"button\"\n              accessibilityState={{ ...accessibilityState, disabled }}\n              testID={testID}\n              style={styles.touchable}\n            >\n              <View\n                style={[\n                  styles.standard,\n                  {\n                    width: extendedWidth,\n                  },\n                ]}\n              />\n            </TouchableRipple>\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n\n      <Animated.View\n        style={[styles.iconWrapper, combinedStyles.iconWrapper]}\n        pointerEvents=\"none\"\n      >\n        <Icon source={icon} size={24} color={foregroundColor} />\n      </Animated.View>\n\n      <View pointerEvents=\"none\">\n        <AnimatedText\n          numberOfLines={1}\n          onTextLayout={isIOS ? onTextLayout : undefined}\n          ellipsizeMode={'tail'}\n          style={[\n            {\n              [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic\n                ? isIOS\n                  ? SIZE - 10\n                  : SIZE - 12\n                : BORDER_RADIUS,\n            },\n            {\n              minWidth: textWidth,\n              top: -BORDER_RADIUS - textHeight / 2,\n              opacity: animFAB.interpolate({\n                inputRange: propForDirection([distance, 0.7 * distance, 0]),\n                outputRange: propForDirection([1, 0, 0]),\n              }),\n              transform: [\n                {\n                  translateX: animFAB.interpolate({\n                    inputRange: propForDirection([distance, 0]),\n                    outputRange: propForDirection([0, SIZE]),\n                  }),\n                },\n              ],\n            },\n            styles.label,\n            uppercase && styles.uppercaseLabel,\n            {\n              color: foregroundColor,\n              ...theme.fonts.medium,\n            },\n          ]}\n        >\n          {label}\n        </AnimatedText>\n      </View>\n\n      {!isIOS && (\n        // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n        // however during render the text in `FAB` isn't fully visible. In order to get\n        // proper text measurements there is a need to additionaly render that text, but\n        // wrapped in absolutely positioned `ScrollView` which height is 0.\n        <ScrollView style={styles.textPlaceholderContainer}>\n          <Text onTextLayout={onTextLayout}>{label}</Text>\n        </ScrollView>\n      )}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n    borderRadius: BORDER_RADIUS,\n  },\n  disabled: {\n    elevation: 0,\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    borderRadius: BORDER_RADIUS,\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n    borderRadius: BORDER_RADIUS,\n  },\n  shadowWrapper: {\n    elevation: 0,\n  },\n  shadow: {\n    elevation: 6,\n    borderRadius: BORDER_RADIUS,\n  },\n  touchable: {\n    borderRadius: BORDER_RADIUS,\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE,\n  },\n  label: {\n    position: 'absolute',\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute',\n  },\n});\n\nexport default withTheme(AnimatedFAB);\n"]},"metadata":{},"sourceType":"module"}