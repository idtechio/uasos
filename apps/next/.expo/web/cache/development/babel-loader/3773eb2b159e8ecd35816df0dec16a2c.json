{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport GestureHandler from \"./GestureHandler\";\nimport { TEST_MAX_IF_NOT_NAN } from \"./utils\";\n\nvar DiscreteGestureHandler = function (_GestureHandler) {\n  _inherits(DiscreteGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(DiscreteGestureHandler);\n\n  function DiscreteGestureHandler() {\n    _classCallCheck(this, DiscreteGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DiscreteGestureHandler, [{\n    key: \"isDiscrete\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, _ref2) {\n      var x = _ref.x,\n          y = _ref.y,\n          deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      var maxDeltaX = _ref2.maxDeltaX,\n          maxDeltaY = _ref2.maxDeltaY,\n          maxDistSq = _ref2.maxDistSq,\n          shouldCancelWhenOutside = _ref2.shouldCancelWhenOutside;\n\n      if (shouldCancelWhenOutside) {\n        if (!this.isPointInView({\n          x: x,\n          y: y\n        })) {\n          return true;\n        }\n      }\n\n      return TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) || TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) || TEST_MAX_IF_NOT_NAN(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref3) {\n      var _ref3$center = _ref3.center,\n          x = _ref3$center.x,\n          y = _ref3$center.y;\n      var rect = this.view.getBoundingClientRect();\n      return {\n        absoluteX: x,\n        absoluteY: y,\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref4, _recognizer, _ref5) {\n      var minPointers = _ref4.minPointers,\n          maxPointers = _ref4.maxPointers,\n          maxDeltaX = _ref4.maxDeltaX,\n          maxDeltaY = _ref4.maxDeltaY,\n          maxDistSq = _ref4.maxDistSq,\n          shouldCancelWhenOutside = _ref4.shouldCancelWhenOutside;\n      var pointerLength = _ref5.maxPointers,\n          center = _ref5.center,\n          deltaX = _ref5.deltaX,\n          deltaY = _ref5.deltaY;\n      var validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n\n      if (this.shouldFailUnderCustomCriteria(_objectSpread(_objectSpread({}, center), {}, {\n        deltaX: deltaX,\n        deltaY: deltaY\n      }), {\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        maxDistSq: maxDistSq,\n        shouldCancelWhenOutside: shouldCancelWhenOutside\n      }) || !validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }]);\n\n  return DiscreteGestureHandler;\n}(GestureHandler);\n\nexport default DiscreteGestureHandler;","map":{"version":3,"sources":["DiscreteGestureHandler.ts"],"names":["isDiscrete","shouldEnableGestureOnSetup","shouldFailUnderCustomCriteria","deltaY","shouldCancelWhenOutside","x","y","TEST_MAX_IF_NOT_NAN","Math","deltaX","transformNativeEvent","center","rect","absoluteX","absoluteY","top","isGestureEnabledForEvent","maxPointers","validPointerCount","pointerLength","maxDeltaX","maxDeltaY","maxDistSq","failed","success"],"mappings":";;;;;;;;;;;;;;;AAEA,OAAA,cAAA;AACA,SAAA,mBAAA;;IAEA,sB;;;;;;;;;;;;;SACMA,eAAa;AACf,aAAA,IAAA;AACD;;;SAEGC,eAA6B;AAC/B,aAAA,IAAA;AACD;;;WAEDC,oDAGE;AAAA,UAFA,CAEA,QAFA,CAEA;AAAA,UAFA,CAEA,QAFA,CAEA;AAAA,UAFA,MAEA,QAFA,MAEA;AAAA,UAFgBC,MAEhB,QAFgBA,MAEhB;AAAA,UADA,SACA,SADA,SACA;AAAA,UADA,SACA,SADA,SACA;AAAA,UADA,SACA,SADA,SACA;AAAA,UADmCC,uBACnC,SADmCA,uBACnC;;AACA,UAAA,uBAAA,EAA6B;AAC3B,YAAI,CAAC,KAAA,aAAA,CAAmB;AAAEC,UAAAA,CAAF,EAAEA,CAAF;AAAKC,UAAAA,CAAAA,EAAAA;AAAL,SAAnB,CAAL,EAAmC;AACjC,iBAAA,IAAA;AACD;AACF;;AACD,aACEC,mBAAmB,CAACC,IAAI,CAAJA,GAAAA,CAAD,MAACA,CAAD,EAAnBD,SAAmB,CAAnBA,IACAA,mBAAmB,CAACC,IAAI,CAAJA,GAAAA,CAAD,MAACA,CAAD,EADnBD,SACmB,CADnBA,IAEAA,mBAAmB,CACjBC,IAAI,CAAJA,GAAAA,CAASL,MAAM,GAANA,MAAAA,GAAkBM,MAAM,GADhB,MACjBD,CADiB,EAHrB,SAGqB,CAHrB;AAQD;;;WAEDE,qCAAgD;AAAA,+BAAzBC,MAAyB;AAAA,UAAjB,CAAiB,gBAAjB,CAAiB;AAAA,UAAZL,CAAY,gBAAZA,CAAY;AAE9C,UAAMM,IAAI,GAAG,KAAA,IAAA,CAAb,qBAAa,EAAb;AAEA,aAAO;AACLC,QAAAA,SAAS,EADJ,CAAA;AAELC,QAAAA,SAAS,EAFJ,CAAA;AAGLT,QAAAA,CAAC,EAAEA,CAAC,GAAGO,IAAI,CAHN,IAAA;AAILN,QAAAA,CAAC,EAAEA,CAAC,GAAGM,IAAI,CAACG;AAJP,OAAP;AAMD;;;WAEDC,yCAAwB,WAAxBA,SAWE;AAAA,UAVA,WAUA,SAVA,WAUA;AAAA,UAVA,WAUA,SAVA,WAUA;AAAA,UAVA,SAUA,SAVA,SAUA;AAAA,UAVA,SAUA,SAVA,SAUA;AAAA,UAVA,SAUA,SAVA,SAUA;AAAA,UAJEZ,uBAIF,SAJEA,uBAIF;AAAA,UADA,aACA,SADEa,WACF;AAAA,UADA,MACA,SADA,MACA;AAAA,UADA,MACA,SADA,MACA;AAAA,UAD8Cd,MAC9C,SAD8CA,MAC9C;AACA,UAAMe,iBAAiB,GACrBC,aAAa,IAAbA,WAAAA,IAAgCA,aAAa,IAD/C,WAAA;;AAGA,UACE,KAAA,6BAAA,iCACE,MADF;AACeV,QAAAA,MAAb,EAAaA,MADf;AACuBN,QAAAA,MAAAA,EAAAA;AADvB,UAEE;AACEiB,QAAAA,SADF,EACEA,SADF;AAEEC,QAAAA,SAFF,EAEEA,SAFF;AAGEC,QAAAA,SAHF,EAGEA,SAHF;AAIElB,QAAAA,uBAAAA,EAAAA;AAJF,OAFF,KAWC,CAAA,iBAAA,IAAsB,KAZzB,gBAAA,EAaE;AACA,eAAO;AAAEmB,UAAAA,MAAM,EAAE;AAAV,SAAP;AACD;;AAED,aAAO;AAAEC,QAAAA,OAAO,EAAEN;AAAX,OAAP;AACD;;;;EAzEH,c;;AA4EA,eAAA,sBAAA","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler from './GestureHandler';\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\n\nabstract class DiscreteGestureHandler extends GestureHandler {\n  get isDiscrete() {\n    return true;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { x, y, deltaX, deltaY }: any,\n    { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }: any\n  ) {\n    if (shouldCancelWhenOutside) {\n      if (!this.isPointInView({ x, y })) {\n        return true;\n      }\n    }\n    return (\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) ||\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) ||\n      TEST_MAX_IF_NOT_NAN(\n        Math.abs(deltaY * deltaY + deltaX * deltaX),\n        maxDistSq\n      )\n    );\n  }\n\n  transformNativeEvent({ center: { x, y } }: any) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n\n    return {\n      absoluteX: x,\n      absoluteY: y,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n\n  isGestureEnabledForEvent(\n    {\n      minPointers,\n      maxPointers,\n      maxDeltaX,\n      maxDeltaY,\n      maxDistSq,\n      shouldCancelWhenOutside,\n    }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength, center, deltaX, deltaY }: any\n  ) {\n    const validPointerCount =\n      pointerLength >= minPointers && pointerLength <= maxPointers;\n\n    if (\n      this.shouldFailUnderCustomCriteria(\n        { ...center, deltaX, deltaY },\n        {\n          maxDeltaX,\n          maxDeltaY,\n          maxDistSq,\n          shouldCancelWhenOutside,\n        }\n      ) ||\n      // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n      // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n      (!validPointerCount && this.isGestureRunning)\n    ) {\n      return { failed: true };\n    }\n\n    return { success: validPointerCount };\n  }\n}\n\nexport default DiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"module"}