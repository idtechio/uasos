{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _templateObject;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { CompositionSection } from \"../Compositions\";\nimport { FormHeader, Spacer } from \"../FormLogin\";\nimport FormContainer from \"../FormLogin/FormContainer\";\nimport FormTextInput from \"../Inputs/FormTextInput\";\nimport { useTranslation } from \"react-i18next\";\nimport { ButtonCta, ButtonSM } from \"../Buttons\";\nimport FormPhoneInput from \"../Inputs/FormPhoneInput\";\nimport { generatePhonePrefixDropdownList } from \"../Inputs/FormPhoneInput/helpers\";\nimport { phonePrefixDropdownList } from \"../../consts/phonePrefixDropdown\";\nimport { InputCotrolLabel as InputControlLabel } from \"../Forms\";\nimport { FormFooter, ErrorText } from \"./styles\";\nimport { styles } from \"./styles\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../../pages/_app\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport SmsVerificationModal from \"../SmsVerificationModal\";\nimport SmsVerificationSuccessModal from \"../SmsVerificationSuccessModal\";\nimport { AccountApi } from \"../../client-api/account\";\nimport FormLanguageDropdown from \"../Inputs/FormLanguageDropdown\";\nimport { FirebaseError } from \"@firebase/util\";\nimport { css } from \"styled-components/native\";\nimport SmsNotificationInput from \"../EditUserProfileForm/Inputs/SmsNotificationInput\";\nexport default function FromRegisterWithSocials() {\n  var _errors$registerWithS, _errors$registrationU, _errors$registerWithS2, _errors$registerWithS3, _errors$registerWithS4;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useContext = useContext(AuthContext),\n      identity = _useContext.identity,\n      account = _useContext.account;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      phoneLoginConfirmation = _useState2[0],\n      setPhoneLoginConfirmation = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      phoneNumber = _useState4[0],\n      setPhoneNumber = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      smsVerificationSuccess = _useState8[0],\n      setSmsVerificationSuccess = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      data = _useState10[0],\n      setData = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      apiError = _useState12[0],\n      setApiError = _useState12[1];\n\n  var parseError = function parseError(error) {\n    if (error.includes(\"email-already-exists\")) {\n      setApiError(t(\"others:userRegistration.errors.emailExists\"));\n    } else if (error.includes(\"phone-number-already-exists\") || error.includes(\"account-exists\")) {\n      setApiError(t(\"others:userRegistration.errors.phoneLinkingFailed\"));\n    } else if (error.includes(\"too-many-requests\")) {\n      setApiError(t(\"others:userRegistration.errors.tooManyRequest\"));\n    } else if (error.includes(\"invalid-verification\")) {\n      setApiError(t(\"others:userRegistration.errors.invalidCode\"));\n    } else {\n      setApiError(t(\"others:common.sms.verificationFail\"));\n    }\n  };\n\n  var provider = identity != null && identity.providerData.map(function (provider) {\n    return provider.providerId;\n  }).includes(\"google.com\") ? \"google\" : identity != null && identity.providerData.map(function (provider) {\n    return provider.providerId;\n  }).includes(\"facebook.com\") ? \"facebook\" : \"\";\n  var form = useForm({\n    defaultValues: {\n      registerWithSocials: {\n        name: provider ? identity && identity.displayName ? identity == null ? void 0 : identity.displayName.split(\" \")[0] : \"\" : account == null ? void 0 : account.name,\n        email: identity && identity.email ? identity == null ? void 0 : identity.email : \"\",\n        smsNotification: true,\n        preferredLanguage: \"pl\"\n      }\n    }\n  });\n  var handleSubmit = form.handleSubmit;\n\n  var onSubmit = function onSubmit(e) {\n    var confirmation;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setData({\n              name: e.registerWithSocials.name,\n              preferredLang: e.registerWithSocials.preferredLanguage,\n              smsNotification: e.registerWithSocials.smsNotification\n            });\n            setIsLoading(true);\n            _context.prev = 2;\n            confirmation = null;\n\n            if (!identity) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(Authorization.linkWithPhone(e.registerWithSocials.phonePrefix + e.registerWithSocials.phoneNumber, Authorization.initCaptcha(\"captcha__container\")));\n\n          case 7:\n            confirmation = _context.sent;\n\n          case 8:\n            setPhoneLoginConfirmation(confirmation);\n            setPhoneNumber(e.registerWithSocials.phonePrefix + e.registerWithSocials.phoneNumber);\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (_context.t0 instanceof Error || _context.t0 instanceof FirebaseError) {\n              parseError(_context.t0 == null ? void 0 : _context.t0.message);\n            }\n\n          case 15:\n            setIsLoading(false);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n\n  var updateAccount = function updateAccount() {\n    return _regeneratorRuntime.async(function updateAccount$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!data) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AccountApi.updateAccount({\n              payload: data\n            }));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var errors = form.formState.errors;\n  return React.createElement(CompositionSection, {\n    padding: [40, 15, 0, 15],\n    flexGrow: \"2\"\n  }, React.createElement(View, {\n    style: {\n      display: \"none\"\n    },\n    nativeID: \"captcha__container\"\n  }), React.createElement(FormContainer, null, React.createElement(FormHeader, null, t(\"others:forms.userRegistration.userRegistration\")), provider === \"facebook\" || provider === \"google\" ? React.createElement(ButtonSM, {\n    id: provider,\n    onPress: function onPress() {\n      return null;\n    },\n    anchor: provider === \"facebook\" ? t(\"others:forms.login.signInFacebook\") : t(\"others:forms.login.signInGoogle\")\n  }) : React.createElement(React.Fragment, null), React.createElement(Spacer, null), React.createElement(FormProvider, form, React.createElement(InputControlLabel, {\n    marginBottom: \"10px\"\n  }, t(\"others:forms.generic.name\")), React.createElement(FormTextInput, {\n    name: \"registerWithSocials.name\",\n    label: t(\"others:forms.generic.name\"),\n    rules: {\n      required: true\n    },\n    error: errors == null ? void 0 : (_errors$registerWithS = errors.registerWithSocials) == null ? void 0 : _errors$registerWithS.name,\n    errorMsg: t(\"hostAdd.errors.name\"),\n    styles: {\n      wrapper: {\n        marginBottom: 12\n      }\n    }\n  }), React.createElement(InputControlLabel, null, t(\"others:forms.userRegistration.preferredLanguage\")), React.createElement(FormLanguageDropdown, {\n    name: \"registerWithSocials.preferredLanguage\",\n    rules: {\n      required: true\n    },\n    error: errors == null ? void 0 : (_errors$registrationU = errors.registrationUserForm) == null ? void 0 : _errors$registrationU.preferredLanguage,\n    errorMsg: t(\"registrationUserForm.errors.preferredLanguage\")\n  }), React.createElement(InputControlLabel, {\n    style: {\n      marginTop: 12\n    }\n  }, t(\"others:forms.generic.email\")), React.createElement(FormTextInput, {\n    zIndex: -1,\n    styles: {\n      wrapper: {\n        height: \"auto\",\n        marginBottom: \"12px\",\n        zIndex: -1\n      }\n    },\n    name: \"registerWithSocials.email\",\n    label: t(\"others:forms.generic.email\"),\n    rules: {\n      required: true,\n      pattern: {\n        value: /\\S+@\\S+\\.\\S+/,\n        message: t(\"validations.invalidEmail\")\n      }\n    },\n    error: errors == null ? void 0 : (_errors$registerWithS2 = errors.registerWithSocials) == null ? void 0 : _errors$registerWithS2.email,\n    errorMsg: t(\"hostAdd.errors.email\"),\n    readonly: true\n  }), React.createElement(CompositionSection, {\n    padding: [0, 0, 0, 0],\n    zIndex: 1\n  }, React.createElement(InputControlLabel, null, t(\"others:forms.generic.phoneNumber\")), React.createElement(FormPhoneInput, {\n    prefixName: \"registerWithSocials.phonePrefix\",\n    numberName: \"registerWithSocials.phoneNumber\",\n    phonePrefixLabel: t(\"others:forms.generic.country\"),\n    phoneLabel: t(\"_ _ _  _ _ _  _ _ _\"),\n    errorPrefix: errors == null ? void 0 : (_errors$registerWithS3 = errors.registerWithSocials) == null ? void 0 : _errors$registerWithS3.phonePrefix,\n    errorPrefixMsg: t(\"hostAdd.errors.country\"),\n    error: errors == null ? void 0 : (_errors$registerWithS4 = errors.registerWithSocials) == null ? void 0 : _errors$registerWithS4.phoneNumber,\n    errorMsg: t(\"hostAdd.errors.phoneNumber\"),\n    data: generatePhonePrefixDropdownList(phonePrefixDropdownList)\n  })), React.createElement(CompositionSection, {\n    padding: [20, 0, 0, 0]\n  }, React.createElement(SmsNotificationInput, {\n    wrapperStyleProp: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n                align-items: flex-start;\\n              \"]))),\n    name: \"registerWithSocials.smsNotification\",\n    rules: {\n      required: false\n    }\n  })), React.createElement(FormFooter, null, React.createElement(ButtonCta, {\n    onPress: function onPress() {\n      return Authorization.logOut();\n    },\n    anchor: t(\"others:common.buttons.back\"),\n    style: styles.backButton,\n    disabled: isLoading\n  }), React.createElement(ButtonCta, {\n    isLoading: isLoading,\n    onPress: handleSubmit(onSubmit, function () {}),\n    anchor: t(\"others:common.buttons.verify\"),\n    style: styles.verifyButton\n  }))), phoneLoginConfirmation ? React.createElement(SmsVerificationModal, {\n    callback: updateAccount,\n    mode: \"LINK\",\n    phoneNumber: phoneNumber,\n    confirmation: phoneLoginConfirmation,\n    setVerificationSuccess: setSmsVerificationSuccess,\n    close: function close() {\n      return setPhoneLoginConfirmation(null);\n    }\n  }) : React.createElement(React.Fragment, null), smsVerificationSuccess ? React.createElement(SmsVerificationSuccessModal, null) : React.createElement(React.Fragment, null), apiError ? React.createElement(ErrorText, null, apiError) : React.createElement(React.Fragment, null)));\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/FormRegisterWithSocials/index.tsx"],"names":["React","useState","FormProvider","useForm","CompositionSection","FormHeader","Spacer","FormContainer","FormTextInput","useTranslation","ButtonCta","ButtonSM","FormPhoneInput","generatePhonePrefixDropdownList","phonePrefixDropdownList","InputCotrolLabel","InputControlLabel","FormFooter","ErrorText","styles","useContext","AuthContext","Authorization","SmsVerificationModal","SmsVerificationSuccessModal","AccountApi","FormLanguageDropdown","FirebaseError","css","SmsNotificationInput","FromRegisterWithSocials","t","identity","account","phoneLoginConfirmation","setPhoneLoginConfirmation","phoneNumber","setPhoneNumber","isLoading","setIsLoading","smsVerificationSuccess","setSmsVerificationSuccess","data","setData","apiError","setApiError","parseError","error","includes","provider","providerData","map","providerId","form","defaultValues","registerWithSocials","name","displayName","split","email","smsNotification","preferredLanguage","handleSubmit","onSubmit","e","preferredLang","confirmation","linkWithPhone","phonePrefix","initCaptcha","Error","message","updateAccount","payload","errors","formState","display","required","wrapper","marginBottom","registrationUserForm","marginTop","height","zIndex","pattern","value","logOut","backButton","verifyButton"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { View } from \"react-native\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { FormType } from \"../../helpers/FormTypes\";\nimport { CompositionSection } from \"../Compositions\";\nimport { FormHeader, Spacer } from \"../FormLogin\";\nimport FormContainer from \"../FormLogin/FormContainer\";\nimport FormTextInput from \"../Inputs/FormTextInput\";\nimport { useTranslation } from \"react-i18next\";\nimport { ButtonCta, ButtonSM } from \"../Buttons\";\nimport FormPhoneInput from \"../Inputs/FormPhoneInput\";\nimport { generatePhonePrefixDropdownList } from \"../Inputs/FormPhoneInput/helpers\";\nimport { phonePrefixDropdownList } from \"../../consts/phonePrefixDropdown\";\nimport { InputCotrolLabel as InputControlLabel } from \"../Forms\";\nimport { FormFooter, ErrorText } from \"./styles\";\nimport { styles } from \"./styles\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../../pages/_app\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport { ConfirmationResult } from \"firebase/auth\";\nimport SmsVerificationModal from \"../SmsVerificationModal\";\nimport SmsVerificationSuccessModal from \"../SmsVerificationSuccessModal\";\nimport { AccountApi } from \"../../client-api/account\";\nimport FormLanguageDropdown from \"../Inputs/FormLanguageDropdown\";\nimport { FirebaseError } from \"@firebase/util\";\nimport { css } from \"styled-components/native\";\nimport SmsNotificationInput from \"../EditUserProfileForm/Inputs/SmsNotificationInput\";\n\nexport default function FromRegisterWithSocials() {\n  const { t } = useTranslation();\n  const { identity, account } = useContext(AuthContext);\n  const [phoneLoginConfirmation, setPhoneLoginConfirmation] =\n    useState<ConfirmationResult | null>(null);\n  const [phoneNumber, setPhoneNumber] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [smsVerificationSuccess, setSmsVerificationSuccess] =\n    useState<boolean>(false);\n  const [data, setData] = useState<{\n    name: string;\n    preferredLang: string;\n    smsNotification: boolean;\n  }>();\n  const [apiError, setApiError] = useState<string>(\"\");\n  const parseError = (error: string) => {\n    if (error.includes(\"email-already-exists\")) {\n      setApiError(t(\"others:userRegistration.errors.emailExists\"));\n    } else if (\n      error.includes(\"phone-number-already-exists\") ||\n      error.includes(\"account-exists\")\n    ) {\n      setApiError(t(\"others:userRegistration.errors.phoneLinkingFailed\"));\n    } else if (error.includes(\"too-many-requests\")) {\n      setApiError(t(\"others:userRegistration.errors.tooManyRequest\"));\n    } else if (error.includes(\"invalid-verification\")) {\n      setApiError(t(\"others:userRegistration.errors.invalidCode\"));\n    } else {\n      setApiError(t(\"others:common.sms.verificationFail\"));\n    }\n  };\n  const provider = identity?.providerData\n    .map((provider) => provider.providerId)\n    .includes(\"google.com\")\n    ? \"google\"\n    : identity?.providerData\n        .map((provider) => provider.providerId)\n        .includes(\"facebook.com\")\n    ? \"facebook\"\n    : \"\";\n  const form = useForm<FormType>({\n    defaultValues: {\n      registerWithSocials: {\n        name: provider\n          ? identity && identity.displayName\n            ? identity?.displayName.split(\" \")[0]\n            : \"\"\n          : account?.name,\n        email: identity && identity.email ? identity?.email : \"\",\n        smsNotification: true,\n        preferredLanguage: \"pl\",\n      },\n    },\n  });\n  const { handleSubmit } = form;\n\n  const onSubmit = async (e: Pick<FormType, \"registerWithSocials\">) => {\n    setData({\n      name: e.registerWithSocials.name,\n      preferredLang: e.registerWithSocials.preferredLanguage,\n      smsNotification: e.registerWithSocials.smsNotification,\n    });\n    setIsLoading(true);\n    try {\n      let confirmation = null;\n      if (identity) {\n        confirmation = await Authorization.linkWithPhone(\n          e.registerWithSocials.phonePrefix + e.registerWithSocials.phoneNumber,\n          Authorization.initCaptcha(\"captcha__container\")\n        );\n      }\n      setPhoneLoginConfirmation(confirmation);\n      setPhoneNumber(\n        e.registerWithSocials.phonePrefix + e.registerWithSocials.phoneNumber\n      );\n    } catch (error: unknown) {\n      if (error instanceof Error || error instanceof FirebaseError) {\n        parseError(error?.message);\n      }\n    }\n    setIsLoading(false);\n  };\n\n  const updateAccount = async () => {\n    if (data) {\n      await AccountApi.updateAccount({\n        payload: data,\n      });\n    }\n  };\n\n  const {\n    formState: { errors },\n  } = form;\n\n  return (\n    <CompositionSection padding={[40, 15, 0, 15]} flexGrow=\"2\">\n      <View style={{ display: \"none\" }} nativeID=\"captcha__container\" />\n      <FormContainer>\n        <FormHeader>\n          {t(\"others:forms.userRegistration.userRegistration\")}\n        </FormHeader>\n        {provider === \"facebook\" || provider === \"google\" ? (\n          <ButtonSM\n            id={provider}\n            onPress={() => null}\n            anchor={\n              provider === \"facebook\"\n                ? t(\"others:forms.login.signInFacebook\")\n                : t(\"others:forms.login.signInGoogle\")\n            }\n          />\n        ) : (\n          <></>\n        )}\n        <Spacer />\n        <FormProvider {...form}>\n          <InputControlLabel marginBottom=\"10px\">\n            {t(\"others:forms.generic.name\")}\n          </InputControlLabel>\n          <FormTextInput\n            name=\"registerWithSocials.name\"\n            label={t(\"others:forms.generic.name\")}\n            rules={{\n              required: true,\n            }}\n            error={errors?.registerWithSocials?.name}\n            errorMsg={t(\"hostAdd.errors.name\")}\n            styles={{ wrapper: { marginBottom: 12 } }}\n          />\n          <InputControlLabel>\n            {t(\"others:forms.userRegistration.preferredLanguage\")}\n          </InputControlLabel>\n          <FormLanguageDropdown\n            name=\"registerWithSocials.preferredLanguage\"\n            rules={{\n              required: true,\n            }}\n            error={errors?.registrationUserForm?.preferredLanguage}\n            errorMsg={t(\"registrationUserForm.errors.preferredLanguage\")}\n          />\n          {/* <PreferredLanguageInput></PreferredLanguageInput> */}\n\n          <InputControlLabel style={{ marginTop: 12 }}>\n            {t(\"others:forms.generic.email\")}\n          </InputControlLabel>\n          <FormTextInput\n            zIndex={-1}\n            styles={{\n              wrapper: { height: \"auto\", marginBottom: \"12px\", zIndex: -1 },\n            }}\n            name=\"registerWithSocials.email\"\n            label={t(\"others:forms.generic.email\")}\n            rules={{\n              required: true,\n              pattern: {\n                value: /\\S+@\\S+\\.\\S+/,\n                message: t(\"validations.invalidEmail\"),\n              },\n            }}\n            error={errors?.registerWithSocials?.email}\n            errorMsg={t(\"hostAdd.errors.email\")}\n            readonly={true}\n          />\n\n          <CompositionSection padding={[0, 0, 0, 0]} zIndex={1}>\n            <InputControlLabel>\n              {t(\"others:forms.generic.phoneNumber\")}\n            </InputControlLabel>\n            <FormPhoneInput\n              prefixName=\"registerWithSocials.phonePrefix\"\n              numberName=\"registerWithSocials.phoneNumber\"\n              phonePrefixLabel={t(\"others:forms.generic.country\")}\n              phoneLabel={t(\"_ _ _  _ _ _  _ _ _\")}\n              errorPrefix={errors?.registerWithSocials?.phonePrefix}\n              errorPrefixMsg={t(\"hostAdd.errors.country\")}\n              error={errors?.registerWithSocials?.phoneNumber}\n              errorMsg={t(\"hostAdd.errors.phoneNumber\")}\n              data={generatePhonePrefixDropdownList(phonePrefixDropdownList)}\n            />\n          </CompositionSection>\n          <CompositionSection padding={[20, 0, 0, 0]}>\n            <SmsNotificationInput\n              wrapperStyleProp={css`\n                align-items: flex-start;\n              `}\n              name=\"registerWithSocials.smsNotification\"\n              rules={{\n                required: false,\n              }}\n            />\n          </CompositionSection>\n\n          <FormFooter>\n            <ButtonCta\n              onPress={() => Authorization.logOut()}\n              anchor={t(\"others:common.buttons.back\")}\n              style={styles.backButton}\n              disabled={isLoading}\n            />\n            <ButtonCta\n              isLoading={isLoading}\n              onPress={handleSubmit(onSubmit, () => {})}\n              anchor={t(\"others:common.buttons.verify\")}\n              style={styles.verifyButton}\n            />\n          </FormFooter>\n        </FormProvider>\n        {phoneLoginConfirmation ? (\n          <SmsVerificationModal\n            callback={updateAccount}\n            mode=\"LINK\"\n            phoneNumber={phoneNumber}\n            confirmation={phoneLoginConfirmation}\n            setVerificationSuccess={setSmsVerificationSuccess}\n            close={() => setPhoneLoginConfirmation(null)}\n          />\n        ) : (\n          <></>\n        )}\n        {smsVerificationSuccess ? <SmsVerificationSuccessModal /> : <></>}\n        {apiError ? <ErrorText>{apiError}</ErrorText> : <></>}\n      </FormContainer>\n    </CompositionSection>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}