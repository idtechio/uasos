{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RadioButtonGroup = exports.default = exports.RadioButtonContext = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar RadioButtonContext = React.createContext(null);\nexports.RadioButtonContext = RadioButtonContext;\n\nvar RadioButtonGroup = function RadioButtonGroup(_ref) {\n  var value = _ref.value,\n      onValueChange = _ref.onValueChange,\n      children = _ref.children;\n  return React.createElement(RadioButtonContext.Provider, {\n    value: {\n      value: value,\n      onValueChange: onValueChange\n    }\n  }, React.createElement(_reactNative.View, {\n    accessibilityRole: \"radiogroup\"\n  }, children));\n};\n\nexports.RadioButtonGroup = RadioButtonGroup;\nRadioButtonGroup.displayName = 'RadioButton.Group';\nvar _default = RadioButtonGroup;\nexports.default = _default;","map":{"version":3,"sources":["RadioButtonGroup.tsx"],"names":["RadioButtonContext","React","RadioButtonGroup","children","value","onValueChange"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBO,IAAMA,kBAAkB,GAAGC,KAAK,CAALA,aAAAA,CAA3B,IAA2BA,CAA3B;;;AA4CP,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAAC,aAAD,QAAC,aAAD;AAAA,MAAyBC,QAAzB,QAAyBA,QAAzB;AAAA,SACvB,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;AAA6B,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAF,EAAEA,KAAF;AAASC,MAAAA,aAAAA,EAAAA;AAAT;AAApC,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,IAAA,iBAAiB,EAAC;AAAxB,GAAA,EAFJ,QAEI,CADF,CADuB;AAAA,CAAzB;;;AAMAH,gBAAgB,CAAhBA,WAAAA,GAAAA,mBAAAA;eACeA,gB","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected radio button.\n   */\n  value: string;\n  /**\n   * React elements containing radio buttons.\n   */\n  children: React.ReactNode;\n};\n\nexport type RadioButtonContextType = {\n  value: string;\n  onValueChange: (item: string) => void;\n};\n\nexport const RadioButtonContext = React.createContext<RadioButtonContextType>(\n  null as any\n);\n\n/**\n * Radio button group allows to control a group of radio buttons.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-button-group-android.gif\" />\n *  <figcaption>Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-button-group-ios.gif\" />\n *  <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton, Text } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={newValue => setValue(newValue)} value={value}>\n *       <View>\n *         <Text>First</Text>\n *         <RadioButton value=\"first\" />\n *       </View>\n *       <View>\n *         <Text>Second</Text>\n *         <RadioButton value=\"second\" />\n *       </View>\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonGroup = ({ value, onValueChange, children }: Props) => (\n  <RadioButtonContext.Provider value={{ value, onValueChange }}>\n    <View accessibilityRole=\"radiogroup\">{children}</View>\n  </RadioButtonContext.Provider>\n);\n\nRadioButtonGroup.displayName = 'RadioButton.Group';\nexport default RadioButtonGroup;\n\n// @component-docs ignore-next-line\nexport { RadioButtonGroup };\n"]},"metadata":{},"sourceType":"script"}