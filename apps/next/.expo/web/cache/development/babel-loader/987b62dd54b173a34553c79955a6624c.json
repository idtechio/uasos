{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { BaseGesture } from \"./gesture\";\nexport var NativeGesture = function (_BaseGesture) {\n  _inherits(NativeGesture, _BaseGesture);\n\n  var _super = _createSuper(NativeGesture);\n\n  function NativeGesture() {\n    var _this;\n\n    _classCallCheck(this, NativeGesture);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"config\", {});\n\n    _this.handlerName = 'NativeViewGestureHandler';\n    return _this;\n  }\n\n  _createClass(NativeGesture, [{\n    key: \"shouldActivateOnStart\",\n    value: function shouldActivateOnStart(value) {\n      this.config.shouldActivateOnStart = value;\n      return this;\n    }\n  }, {\n    key: \"disallowInterruption\",\n    value: function disallowInterruption(value) {\n      this.config.disallowInterruption = value;\n      return this;\n    }\n  }]);\n\n  return NativeGesture;\n}(BaseGesture);","map":{"version":3,"sources":["nativeGesture.ts"],"names":["constructor","shouldActivateOnStart","disallowInterruption"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,WAAA;AAMA,WAAO,aAAP;AAAA;;AAAA;;AAGEA,2BAAc;AAAA;;AAAA;;AACZ;;AADY,IAAA,eAAA,gCAAA,QAAA,EAF+C,EAE/C,CAAA;;AAGZ,UAAA,WAAA,GAAA,0BAAA;AAHY;AAIb;;AAPH;AAAA;AAAA,WASEC,+BAAqB,KAArBA,EAAsC;AACpC,WAAA,MAAA,CAAA,qBAAA,GAAA,KAAA;AACA,aAAA,IAAA;AACD;AAZH;AAAA;AAAA,WAcEC,8BAAoB,KAApBA,EAAqC;AACnC,WAAA,MAAA,CAAA,oBAAA,GAAA,KAAA;AACA,aAAA,IAAA;AACD;AAjBH;;AAAA;AAAA,EAAO,WAAP","sourcesContent":["import { BaseGestureConfig, BaseGesture } from './gesture';\nimport {\n  NativeViewGestureConfig,\n  NativeViewGestureHandlerPayload,\n} from '../NativeViewGestureHandler';\n\nexport class NativeGesture extends BaseGesture<NativeViewGestureHandlerPayload> {\n  public config: BaseGestureConfig & NativeViewGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'NativeViewGestureHandler';\n  }\n\n  shouldActivateOnStart(value: boolean) {\n    this.config.shouldActivateOnStart = value;\n    return this;\n  }\n\n  disallowInterruption(value: boolean) {\n    this.config.disallowInterruption = value;\n    return this;\n  }\n}\n\nexport type NativeGestureType = InstanceType<typeof NativeGesture>;\n"]},"metadata":{},"sourceType":"module"}