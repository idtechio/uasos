{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport React from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"next-i18next\";\nimport styled from \"styled-components/native\";\nimport CountrySelect from \"../../Forms/CountrySelect\";\nimport { InputWrapper } from \"./style\";\nvar ListOfLanguages = {\n  PL: \"Polski\",\n  CS: \"Čeština\",\n  DE: \"Deutch\",\n  EL: \"Ελληνικά\",\n  EN: \"English\",\n  ES: \"Español\",\n  ET: \"Eesti\",\n  FR: \"Français\",\n  HR: \"Hrvatski\",\n  HU: \"Magyar\",\n  IT: \"Italiano\",\n  LV: \"Latviešu\",\n  RO: \"Română\",\n  RU: \"Pусский\",\n  SL: \"Slovenčina\",\n  UK: \"Yкраїнська\"\n};\nvar LanguageWrapper = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\"])));\nvar LanguageText = styled.Text(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\"])));\n\nvar LanguageLabel = function LanguageLabel(_ref) {\n  var _ListOfLanguages$lang;\n\n  var language = _ref.language;\n  return React.createElement(LanguageWrapper, null, React.createElement(LanguageText, null, (_ListOfLanguages$lang = ListOfLanguages[language]) != null ? _ListOfLanguages$lang : language));\n};\n\nvar data = [{\n  label: React.createElement(LanguageLabel, {\n    language: \"UK\"\n  }),\n  value: \"uk\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"PL\"\n  }),\n  value: \"pl\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"CS\"\n  }),\n  value: \"cs\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"DE\"\n  }),\n  value: \"de\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"EL\"\n  }),\n  value: \"el\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"EN\"\n  }),\n  value: \"en\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"ES\"\n  }),\n  value: \"es\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"ET\"\n  }),\n  value: \"et\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"FR\"\n  }),\n  value: \"fr\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"HR\"\n  }),\n  value: \"hr\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"HU\"\n  }),\n  value: \"hu\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"IT\"\n  }),\n  value: \"it\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"LV\"\n  }),\n  value: \"lv\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"RO\"\n  }),\n  value: \"ro\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"RU\"\n  }),\n  value: \"ru\"\n}, {\n  label: React.createElement(LanguageLabel, {\n    language: \"SL\"\n  }),\n  value: \"sl\"\n}];\nexport default function PreferredLanguageInput() {\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control;\n\n  var _useTranslation = useTranslation(\"common\"),\n      t = _useTranslation.t;\n\n  return React.createElement(InputWrapper, {\n    label: t(\"others:forms.userRegistration.preferredLanguage\"),\n    styles: {\n      container: {\n        zIndex: 9999\n      }\n    }\n  }, React.createElement(Controller, {\n    control: control,\n    name: \"preferredLanguage\",\n    render: function render(_ref2) {\n      var _ref2$field = _ref2.field,\n          value = _ref2$field.value,\n          onChange = _ref2$field.onChange,\n          error = _ref2.fieldState.error;\n      return React.createElement(CountrySelect, {\n        data: data,\n        value: value || \"\",\n        onChange: onChange,\n        placeholder: t(\"others:forms.userRegistration.preferredLanguage\"),\n        error: error,\n        errorMsg: error == null ? void 0 : error.message\n      });\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/EditUserProfileForm/Inputs/PreferredLanguageInput.tsx"],"names":["React","Controller","useFormContext","useTranslation","styled","CountrySelect","InputWrapper","ListOfLanguages","PL","CS","DE","EL","EN","ES","ET","FR","HR","HU","IT","LV","RO","RU","SL","UK","LanguageWrapper","View","LanguageText","Text","LanguageLabel","language","data","label","value","PreferredLanguageInput","control","t","container","zIndex","field","onChange","error","fieldState","message"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,iBAA3C;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP;AAGA,SAASC,YAAT;AAEA,IAAMC,eAA0C,GAAG;AACjDC,EAAAA,EAAE,EAAE,QAD6C;AAEjDC,EAAAA,EAAE,EAAE,SAF6C;AAGjDC,EAAAA,EAAE,EAAE,QAH6C;AAIjDC,EAAAA,EAAE,EAAE,UAJ6C;AAKjDC,EAAAA,EAAE,EAAE,SAL6C;AAMjDC,EAAAA,EAAE,EAAE,SAN6C;AAOjDC,EAAAA,EAAE,EAAE,OAP6C;AAQjDC,EAAAA,EAAE,EAAE,UAR6C;AASjDC,EAAAA,EAAE,EAAE,UAT6C;AAUjDC,EAAAA,EAAE,EAAE,QAV6C;AAWjDC,EAAAA,EAAE,EAAE,UAX6C;AAYjDC,EAAAA,EAAE,EAAE,UAZ6C;AAajDC,EAAAA,EAAE,EAAE,QAb6C;AAcjDC,EAAAA,EAAE,EAAE,SAd6C;AAejDC,EAAAA,EAAE,EAAE,YAf6C;AAgBjDC,EAAAA,EAAE,EAAE;AAhB6C,CAAnD;AAmBA,IAAMC,eAAe,GAAGpB,MAAM,CAACqB,IAAV,0EAArB;AAEA,IAAMC,YAAY,GAAGtB,MAAM,CAACuB,IAAV,4EAAlB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAwC;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;AAC5D,SACE,oBAAC,eAAD,QACE,oBAAC,YAAD,iCAAetB,eAAe,CAACsB,QAAD,CAA9B,oCAA4CA,QAA5C,CADF,CADF;AAKD,CAND;;AAQA,IAAMC,IAA+B,GAAG,CACtC;AAAEC,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CADsC,EAEtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAFsC,EAGtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAHsC,EAItC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAJsC,EAKtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CALsC,EAMtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CANsC,EAOtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAPsC,EAQtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CARsC,EAStC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CATsC,EAUtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAVsC,EAWtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAXsC,EAYtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAZsC,EAatC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAbsC,EActC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAdsC,EAetC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAfsC,EAgBtC;AAAED,EAAAA,KAAK,EAAE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC;AAAxB,IAAT;AAA0CC,EAAAA,KAAK,EAAE;AAAjD,CAhBsC,CAAxC;AAmBA,eAAe,SAASC,sBAAT,GAAkC;AAC/C,wBAAoB/B,cAAc,EAAlC;AAAA,MAAQgC,OAAR,mBAAQA,OAAR;;AACA,wBAAc/B,cAAc,CAAC,QAAD,CAA5B;AAAA,MAAQgC,CAAR,mBAAQA,CAAR;;AAEA,SACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAEA,CAAC,CAAC,iDAAD,CADV;AAEE,IAAA,MAAM,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV;AAAb;AAFV,KAIE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,IAAI,EAAC,mBAFP;AAGE,IAAA,MAAM,EAAE;AAAA,8BAAGI,KAAH;AAAA,UAAYN,KAAZ,eAAYA,KAAZ;AAAA,UAAmBO,QAAnB,eAAmBA,QAAnB;AAAA,UAA6CC,KAA7C,SAA+BC,UAA/B,CAA6CD,KAA7C;AAAA,aACN,oBAAC,aAAD;AACE,QAAA,IAAI,EAAEV,IADR;AAEE,QAAA,KAAK,EAAEE,KAAK,IAAI,EAFlB;AAGE,QAAA,QAAQ,EAAEO,QAHZ;AAIE,QAAA,WAAW,EAAEJ,CAAC,CAAC,iDAAD,CAJhB;AAKE,QAAA,KAAK,EAAEK,KALT;AAME,QAAA,QAAQ,EAAEA,KAAF,oBAAEA,KAAK,CAAEE;AANnB,QADM;AAAA;AAHV,IAJF,CADF;AAqBD","sourcesContent":["import React from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"next-i18next\";\nimport styled from \"styled-components/native\";\nimport CountrySelect from \"../../Forms/CountrySelect\";\nimport { CountryDropdownItemType } from \"../../Forms/CountrySelect/types\";\nimport { EditProfileForm } from \"../types\";\nimport { InputWrapper } from \"./style\";\n\nconst ListOfLanguages: { [key: string]: string } = {\n  PL: \"Polski\",\n  CS: \"Čeština\",\n  DE: \"Deutch\",\n  EL: \"Ελληνικά\",\n  EN: \"English\",\n  ES: \"Español\",\n  ET: \"Eesti\",\n  FR: \"Français\",\n  HR: \"Hrvatski\",\n  HU: \"Magyar\",\n  IT: \"Italiano\",\n  LV: \"Latviešu\",\n  RO: \"Română\",\n  RU: \"Pусский\",\n  SL: \"Slovenčina\",\n  UK: \"Yкраїнська\",\n};\n\nconst LanguageWrapper = styled.View``;\n\nconst LanguageText = styled.Text``;\n\nconst LanguageLabel = ({ language }: { language: string }) => {\n  return (\n    <LanguageWrapper>\n      <LanguageText>{ListOfLanguages[language] ?? language}</LanguageText>\n    </LanguageWrapper>\n  );\n};\n\nconst data: CountryDropdownItemType[] = [\n  { label: <LanguageLabel language=\"UK\" />, value: \"uk\" },\n  { label: <LanguageLabel language=\"PL\" />, value: \"pl\" },\n  { label: <LanguageLabel language=\"CS\" />, value: \"cs\" },\n  { label: <LanguageLabel language=\"DE\" />, value: \"de\" },\n  { label: <LanguageLabel language=\"EL\" />, value: \"el\" },\n  { label: <LanguageLabel language=\"EN\" />, value: \"en\" },\n  { label: <LanguageLabel language=\"ES\" />, value: \"es\" },\n  { label: <LanguageLabel language=\"ET\" />, value: \"et\" },\n  { label: <LanguageLabel language=\"FR\" />, value: \"fr\" },\n  { label: <LanguageLabel language=\"HR\" />, value: \"hr\" },\n  { label: <LanguageLabel language=\"HU\" />, value: \"hu\" },\n  { label: <LanguageLabel language=\"IT\" />, value: \"it\" },\n  { label: <LanguageLabel language=\"LV\" />, value: \"lv\" },\n  { label: <LanguageLabel language=\"RO\" />, value: \"ro\" },\n  { label: <LanguageLabel language=\"RU\" />, value: \"ru\" },\n  { label: <LanguageLabel language=\"SL\" />, value: \"sl\" },\n];\n\nexport default function PreferredLanguageInput() {\n  const { control } = useFormContext<EditProfileForm>();\n  const { t } = useTranslation(\"common\");\n\n  return (\n    <InputWrapper\n      label={t(\"others:forms.userRegistration.preferredLanguage\")}\n      styles={{ container: { zIndex: 9999 } }}\n    >\n      <Controller\n        control={control}\n        name=\"preferredLanguage\"\n        render={({ field: { value, onChange }, fieldState: { error } }) => (\n          <CountrySelect\n            data={data}\n            value={value || \"\"}\n            onChange={onChange}\n            placeholder={t(\"others:forms.userRegistration.preferredLanguage\")}\n            error={error}\n            errorMsg={error?.message}\n          />\n        )}\n      />\n    </InputWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}