{"ast":null,"code":"import NavigationMenuItem from \"./NavigationMenuItem.tsx/NavigationMenuItem\";\nimport { useTranslation } from \"next-i18next\";\nimport { AuthContext } from \"../../../pages/_app\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport LogoutIcon from \"../../style/svgs/logout.svg\";\nimport UserIcon from \"../../style/svgs/user.svg\";\nimport { DrawerContainer, DrawerEmptySpace } from \"./style\";\nimport { signOut } from \"next-auth/react\";\nimport { useRouter } from \"next/router\";\nimport { Routes } from \"../../consts/router\";\nimport { useContext } from \"react\";\n\nvar NavigationDrawer = function NavigationDrawer(_ref) {\n  var isOpen = _ref.isOpen,\n      hideDrawer = _ref.hideDrawer;\n  var router = useRouter();\n\n  var _useTranslation = useTranslation(\"common\"),\n      t = _useTranslation.t;\n\n  var _useContext = useContext(AuthContext),\n      identity = _useContext.identity;\n\n  var handleSignOut = function handleSignOut() {\n    Authorization.logOut();\n    return signOut({\n      redirect: true,\n      callbackUrl: router.locale ? \"/\" + router.locale : undefined\n    });\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(DrawerContainer, null, identity ? React.createElement(React.Fragment, null, React.createElement(NavigationMenuItem, {\n    title: t(\"others:common.words.dashboard\"),\n    Icon: UserIcon,\n    onPress: function onPress() {\n      router.push(\"/dashboard\");\n      hideDrawer();\n    }\n  }), React.createElement(NavigationMenuItem, {\n    title: t(\"navigationDrawer.profile\"),\n    Icon: UserIcon,\n    onPress: function onPress() {\n      router.push(\"/user-profile\");\n      hideDrawer();\n    }\n  }), React.createElement(NavigationMenuItem, {\n    title: t(\"navigationDrawer.logout\"),\n    Icon: LogoutIcon,\n    onPress: handleSignOut\n  })) : React.createElement(NavigationMenuItem, {\n    title: t(\"navigationDrawer.logIn\"),\n    Icon: UserIcon,\n    onPress: function onPress() {\n      router.push(\"/\" + (router == null ? void 0 : router.locale) + Routes.SIGN_IN);\n    }\n  })), React.createElement(DrawerEmptySpace, {\n    onPress: hideDrawer\n  }));\n};\n\nexport default NavigationDrawer;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Navigation/NavigationDrawer.tsx"],"names":["NavigationMenuItem","useTranslation","AuthContext","Authorization","LogoutIcon","UserIcon","DrawerContainer","DrawerEmptySpace","signOut","useRouter","Routes","useContext","NavigationDrawer","isOpen","hideDrawer","router","t","identity","handleSignOut","logOut","redirect","callbackUrl","locale","undefined","push","SIGN_IN"],"mappings":"AAAA,OAAOA,kBAAP;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,WAAT;AACA,SAASC,aAAT;AACA,OAAOC,UAAP;AACA,OAAOC,QAAP;AACA,SAASC,eAAT,EAA0BC,gBAA1B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT;AACA,SAASC,UAAT,QAA2B,OAA3B;;AAOA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAmC;AAAA,MAAhCC,MAAgC,QAAhCA,MAAgC;AAAA,MAAxBC,UAAwB,QAAxBA,UAAwB;AAC1D,MAAMC,MAAM,GAAGN,SAAS,EAAxB;;AACA,wBAAcR,cAAc,CAAC,QAAD,CAA5B;AAAA,MAAQe,CAAR,mBAAQA,CAAR;;AACA,oBAAqBL,UAAU,CAACT,WAAD,CAA/B;AAAA,MAAQe,QAAR,eAAQA,QAAR;;AAEA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1Bf,IAAAA,aAAa,CAACgB,MAAd;AACA,WAAOX,OAAO,CAAC;AACbY,MAAAA,QAAQ,EAAE,IADG;AAEbC,MAAAA,WAAW,EAAEN,MAAM,CAACO,MAAP,SAAoBP,MAAM,CAACO,MAA3B,GAAsCC;AAFtC,KAAD,CAAd;AAID,GAND;;AAQA,MAAI,CAACV,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAED,SACE,0CACE,oBAAC,eAAD,QACGI,QAAQ,GACP,0CACE,oBAAC,kBAAD;AACE,IAAA,KAAK,EAAED,CAAC,CAAC,+BAAD,CADV;AAEE,IAAA,IAAI,EAAEX,QAFR;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbU,MAAAA,MAAM,CAACS,IAAP,CAAY,YAAZ;AACAV,MAAAA,UAAU;AACX;AANH,IADF,EASE,oBAAC,kBAAD;AACE,IAAA,KAAK,EAAEE,CAAC,CAAC,0BAAD,CADV;AAEE,IAAA,IAAI,EAAEX,QAFR;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbU,MAAAA,MAAM,CAACS,IAAP,CAAY,eAAZ;AACAV,MAAAA,UAAU;AACX;AANH,IATF,EAkBE,oBAAC,kBAAD;AACE,IAAA,KAAK,EAAEE,CAAC,CAAC,yBAAD,CADV;AAEE,IAAA,IAAI,EAAEZ,UAFR;AAGE,IAAA,OAAO,EAAEc;AAHX,IAlBF,CADO,GA0BP,oBAAC,kBAAD;AACE,IAAA,KAAK,EAAEF,CAAC,CAAC,wBAAD,CADV;AAEE,IAAA,IAAI,EAAEX,QAFR;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbU,MAAAA,MAAM,CAACS,IAAP,QAAgBT,MAAhB,oBAAgBA,MAAM,CAAEO,MAAxB,IAAiCZ,MAAM,CAACe,OAAxC;AACD;AALH,IA3BJ,CADF,EAqCE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEX;AAA3B,IArCF,CADF;AAyCD,CA1DD;;AA4DA,eAAeF,gBAAf","sourcesContent":["import NavigationMenuItem from \"./NavigationMenuItem.tsx/NavigationMenuItem\";\nimport { useTranslation } from \"next-i18next\";\nimport { AuthContext } from \"../../../pages/_app\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport LogoutIcon from \"../../style/svgs/logout.svg\";\nimport UserIcon from \"../../style/svgs/user.svg\";\nimport { DrawerContainer, DrawerEmptySpace } from \"./style\";\nimport { signOut } from \"next-auth/react\";\nimport { useRouter } from \"next/router\";\nimport { Routes } from \"../../consts/router\";\nimport { useContext } from \"react\";\n\ninterface Props {\n  isOpen: boolean;\n  hideDrawer: () => void;\n}\n\nconst NavigationDrawer = ({ isOpen, hideDrawer }: Props) => {\n  const router = useRouter();\n  const { t } = useTranslation(\"common\");\n  const { identity } = useContext(AuthContext);\n\n  const handleSignOut = () => {\n    Authorization.logOut();\n    return signOut({\n      redirect: true,\n      callbackUrl: router.locale ? `/${router.locale}` : undefined,\n    });\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <>\n      <DrawerContainer>\n        {identity ? (\n          <>\n            <NavigationMenuItem\n              title={t(\"others:common.words.dashboard\")}\n              Icon={UserIcon}\n              onPress={() => {\n                router.push(\"/dashboard\");\n                hideDrawer();\n              }}\n            />\n            <NavigationMenuItem\n              title={t(\"navigationDrawer.profile\")}\n              Icon={UserIcon}\n              onPress={() => {\n                router.push(\"/user-profile\");\n                hideDrawer();\n              }}\n            />\n\n            <NavigationMenuItem\n              title={t(\"navigationDrawer.logout\")}\n              Icon={LogoutIcon}\n              onPress={handleSignOut}\n            />\n          </>\n        ) : (\n          <NavigationMenuItem\n            title={t(\"navigationDrawer.logIn\")}\n            Icon={UserIcon}\n            onPress={() => {\n              router.push(`/${router?.locale}${Routes.SIGN_IN}`);\n            }}\n          />\n        )}\n      </DrawerContainer>\n      <DrawerEmptySpace onPress={hideDrawer} />\n    </>\n  );\n};\n\nexport default NavigationDrawer;\n"]},"metadata":{},"sourceType":"module"}