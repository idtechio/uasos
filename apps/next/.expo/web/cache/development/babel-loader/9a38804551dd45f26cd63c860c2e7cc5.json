{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { getOffersList } from \"../client-api/offers\";\nimport { GuestHostStatus, GuestHostType, Boolean } from \"../components/SupportSection/mapper\";\nimport addHostToApi from \"../helpers/addHostToApi\";\nimport { API_REFRESH_LATENCY, uid } from \"../helpers/misc\";\nimport updateHostToApi from \"../helpers/updateHostToApi\";\nimport { useProgressToastContext } from \"../providers/ProgressToastProvider\";\nimport { QueryKeys } from \"./queryKeys\";\nexport var useOffersList = function useOffersList() {\n  return useQuery([QueryKeys.GET_OFFERS_LIST], getOffersList);\n};\nexport var useAddHostToApi = function useAddHostToApi() {\n  var queryClient = useQueryClient();\n\n  var _useProgressToastCont = useProgressToastContext(),\n      actions = _useProgressToastCont.actions;\n\n  return useMutation(addHostToApi, {\n    onSuccess: function onSuccess(_, variables) {\n      var _variables$name, _variables$phone_num, _variables$email;\n\n      var clientOnlyId = uid();\n\n      var newItem = _objectSpread(_objectSpread({}, variables), {}, {\n        name: (_variables$name = variables.name) != null ? _variables$name : \"\",\n        phone_num: (_variables$phone_num = variables.phone_num) != null ? _variables$phone_num : \"\",\n        email: (_variables$email = variables.email) != null ? _variables$email : \"\",\n        id: \"not-yet-ready-\" + clientOnlyId,\n        status: GuestHostStatus.DEFAULT,\n        type: GuestHostType.LOOKING_FOR_MATCH,\n        can_be_verified: Boolean[variables.can_be_verified],\n        transport_included: Boolean[variables.transport_included],\n        ok_for_pregnant: Boolean[variables.ok_for_pregnant],\n        ok_for_elderly: Boolean[variables.ok_for_elderly],\n        ok_for_disabilities: Boolean[variables.ok_for_disabilities],\n        ok_for_any_nationality: Boolean[variables.ok_for_any_nationality],\n        ok_for_animals: Boolean[variables.ok_for_animals],\n        client_only: true\n      });\n\n      actions.showProgressToast();\n      queryClient.setQueryData([QueryKeys.GET_OFFERS_LIST], function (data) {\n        return data && _objectSpread(_objectSpread({}, data), {}, {\n          offers: [].concat(_toConsumableArray(data.offers), [newItem])\n        });\n      });\n      setTimeout(function () {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    }\n  });\n};\nexport var useUpdateHostToApi = function useUpdateHostToApi() {\n  var queryClient = useQueryClient();\n\n  var _useProgressToastCont2 = useProgressToastContext(),\n      actions = _useProgressToastCont2.actions;\n\n  return useMutation(updateHostToApi, {\n    onSuccess: function onSuccess(_, variables) {\n      queryClient.setQueryData([QueryKeys.GET_OFFERS_LIST], function (data) {\n        return data && _objectSpread(_objectSpread({}, data), {}, {\n          offers: data.offers.map(function (offer) {\n            if (offer.id === variables.id) {\n              return _objectSpread(_objectSpread(_objectSpread({}, offer), variables), {}, {\n                client_only: true\n              });\n            }\n\n            return offer;\n          })\n        });\n      });\n      actions.showProgressToast();\n      setTimeout(function () {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/queries/useOffersList.ts"],"names":["useMutation","useQuery","useQueryClient","getOffersList","GuestHostStatus","GuestHostType","Boolean","addHostToApi","API_REFRESH_LATENCY","uid","updateHostToApi","useProgressToastContext","QueryKeys","useOffersList","GET_OFFERS_LIST","useAddHostToApi","queryClient","actions","onSuccess","_","variables","clientOnlyId","newItem","name","phone_num","email","id","status","DEFAULT","type","LOOKING_FOR_MATCH","can_be_verified","transport_included","ok_for_pregnant","ok_for_elderly","ok_for_disabilities","ok_for_any_nationality","ok_for_animals","client_only","showProgressToast","setQueryData","data","offers","setTimeout","invalidateQueries","GET_REQUESTS_LIST","useUpdateHostToApi","map","offer"],"mappings":"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","sourcesContent":["import { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { OfferProps } from \"../../pages/api/listing/offers\";\nimport { getOffersList, GetOffersListDTO } from \"../client-api/offers\";\nimport {\n  GuestHostStatus,\n  GuestHostType,\n  Boolean,\n} from \"../components/SupportSection/mapper\";\nimport addHostToApi from \"../helpers/addHostToApi\";\nimport { API_REFRESH_LATENCY, uid } from \"../helpers/misc\";\nimport updateHostToApi from \"../helpers/updateHostToApi\";\nimport { useProgressToastContext } from \"../providers/ProgressToastProvider\";\nimport { QueryKeys } from \"./queryKeys\";\n\nexport const useOffersList = () =>\n  useQuery([QueryKeys.GET_OFFERS_LIST], getOffersList);\n\nexport const useAddHostToApi = () => {\n  const queryClient = useQueryClient();\n  const { actions } = useProgressToastContext();\n\n  return useMutation(addHostToApi, {\n    onSuccess: (_, variables) => {\n      const clientOnlyId = uid();\n      const newItem: OfferProps = {\n        ...variables,\n        name: variables.name ?? \"\",\n        phone_num: variables.phone_num ?? \"\",\n        email: variables.email ?? \"\",\n        id: `not-yet-ready-${clientOnlyId}`,\n        status: GuestHostStatus.DEFAULT,\n        type: GuestHostType.LOOKING_FOR_MATCH,\n        can_be_verified: Boolean[variables.can_be_verified],\n        transport_included: Boolean[variables.transport_included],\n        ok_for_pregnant: Boolean[variables.ok_for_pregnant],\n        ok_for_elderly: Boolean[variables.ok_for_elderly],\n        ok_for_disabilities: Boolean[variables.ok_for_disabilities],\n        ok_for_any_nationality: Boolean[variables.ok_for_any_nationality],\n        ok_for_animals: Boolean[variables.ok_for_animals],\n        client_only: true,\n      };\n\n      actions.showProgressToast();\n\n      queryClient.setQueryData<GetOffersListDTO | undefined>(\n        [QueryKeys.GET_OFFERS_LIST],\n        (data) => data && { ...data, offers: [...data.offers, newItem] }\n      );\n\n      // Backend won't return new offer in list immediately after successful form submit.\n      // We have to wait few seconds to synchronize list locally with server changes.\n      setTimeout(() => {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    },\n  });\n};\n\nexport const useUpdateHostToApi = () => {\n  const queryClient = useQueryClient();\n  const { actions } = useProgressToastContext();\n\n  return useMutation(updateHostToApi, {\n    onSuccess: (_, variables) => {\n      queryClient.setQueryData<GetOffersListDTO | undefined>(\n        [QueryKeys.GET_OFFERS_LIST],\n        (data) =>\n          data && {\n            ...data,\n            offers: data.offers.map((offer) => {\n              if (offer.id === variables.id) {\n                return {\n                  ...offer,\n                  ...(variables as OfferProps),\n                  client_only: true,\n                };\n              }\n              return offer;\n            }),\n          }\n      );\n\n      actions.showProgressToast();\n\n      setTimeout(() => {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}