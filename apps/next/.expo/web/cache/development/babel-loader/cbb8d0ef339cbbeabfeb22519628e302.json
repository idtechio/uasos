{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { runOnUI } from \"../core\";\nimport { withStyleAnimation } from \"../animation/styleAnimation\";\nimport { ColorProperties } from \"../UpdateProps\";\nimport { processColor } from \"../Colors\";\nrunOnUI(function () {\n  'worklet';\n\n  var configs = {};\n  var enteringAnimationForTag = {};\n  global.LayoutAnimationRepository = {\n    configs: configs,\n    registerConfig: function registerConfig(tag, config) {\n      configs[tag] = config;\n      enteringAnimationForTag[tag] = null;\n    },\n    removeConfig: function removeConfig(tag) {\n      delete configs[tag];\n      delete enteringAnimationForTag[tag];\n    },\n    startAnimationForTag: function startAnimationForTag(tag, type, yogaValues) {\n      if (configs[tag] == null) {\n        return;\n      }\n\n      var style = configs[tag][type](yogaValues);\n      var currentAnimation = style.animations;\n\n      if (type === 'entering') {\n        enteringAnimationForTag[tag] = style;\n      } else if (type === 'layout' && enteringAnimationForTag[tag] !== null) {\n        var entryAniamtion = enteringAnimationForTag[tag].animations;\n        var layoutAnimation = style.animations;\n        currentAnimation = {};\n\n        for (var key in entryAniamtion) {\n          currentAnimation[key] = entryAniamtion[key];\n        }\n\n        for (var _key in layoutAnimation) {\n          currentAnimation[_key] = layoutAnimation[_key];\n        }\n      }\n\n      var sv = configs[tag].sv;\n\n      _stopObservingProgress(tag, false);\n\n      _startObservingProgress(tag, sv);\n\n      var backupColor = {};\n\n      for (var _key2 in style.initialValues) {\n        if (ColorProperties.includes(_key2)) {\n          var value = style.initialValues[_key2];\n          backupColor[_key2] = value;\n          style.initialValues[_key2] = processColor(value);\n        }\n      }\n\n      sv.value = _extends({}, sv._value, style.initialValues);\n\n      _stopObservingProgress(tag, false);\n\n      var animation = withStyleAnimation(currentAnimation);\n\n      animation.callback = function (finished) {\n        if (finished) {\n          _stopObservingProgress(tag, finished);\n        }\n\n        style.callback && style.callback(finished);\n      };\n\n      if (backupColor) {\n        configs[tag].sv._value = _extends(_extends({}, configs[tag].sv.value), backupColor);\n      }\n\n      configs[tag].sv.value = animation;\n\n      _startObservingProgress(tag, sv);\n    }\n  };\n})();","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/LayoutAnimationRepository.js"],"names":["runOnUI","withStyleAnimation","ColorProperties","processColor","configs","enteringAnimationForTag","global","LayoutAnimationRepository","registerConfig","tag","config","removeConfig","startAnimationForTag","type","yogaValues","style","currentAnimation","animations","entryAniamtion","layoutAnimation","key","sv","_stopObservingProgress","_startObservingProgress","backupColor","initialValues","includes","value","_value","animation","callback","finished"],"mappings":"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","sourcesContent":["/* global _stopObservingProgress, _startObservingProgress */\nimport { runOnUI } from '../core';\nimport { withStyleAnimation } from '../animation/styleAnimation';\nimport { ColorProperties } from '../UpdateProps';\nimport { processColor } from '../Colors';\nrunOnUI(() => {\n    'worklet';\n    const configs = {};\n    const enteringAnimationForTag = {};\n    global.LayoutAnimationRepository = {\n        configs,\n        registerConfig(tag, config) {\n            configs[tag] = config;\n            enteringAnimationForTag[tag] = null;\n        },\n        removeConfig(tag) {\n            delete configs[tag];\n            delete enteringAnimationForTag[tag];\n        },\n        startAnimationForTag(tag, type, yogaValues) {\n            if (configs[tag] == null) {\n                return; // :(\n            }\n            const style = configs[tag][type](yogaValues);\n            let currentAnimation = style.animations;\n            if (type === 'entering') {\n                enteringAnimationForTag[tag] = style;\n            }\n            else if (type === 'layout' && enteringAnimationForTag[tag] !== null) {\n                const entryAniamtion = enteringAnimationForTag[tag].animations;\n                const layoutAnimation = style.animations;\n                currentAnimation = {};\n                for (const key in entryAniamtion) {\n                    currentAnimation[key] = entryAniamtion[key];\n                }\n                for (const key in layoutAnimation) {\n                    currentAnimation[key] = layoutAnimation[key];\n                }\n            }\n            const sv = configs[tag].sv;\n            _stopObservingProgress(tag, false);\n            _startObservingProgress(tag, sv);\n            const backupColor = {};\n            for (const key in style.initialValues) {\n                if (ColorProperties.includes(key)) {\n                    const value = style.initialValues[key];\n                    backupColor[key] = value;\n                    style.initialValues[key] = processColor(value);\n                }\n            }\n            sv.value = Object.assign({}, sv._value, style.initialValues);\n            _stopObservingProgress(tag, false);\n            const animation = withStyleAnimation(currentAnimation);\n            animation.callback = (finished) => {\n                if (finished) {\n                    _stopObservingProgress(tag, finished);\n                }\n                style.callback && style.callback(finished);\n            };\n            if (backupColor) {\n                configs[tag].sv._value = Object.assign(Object.assign({}, configs[tag].sv.value), backupColor);\n            }\n            configs[tag].sv.value = animation;\n            _startObservingProgress(tag, sv);\n        },\n    };\n})();\n"]},"metadata":{},"sourceType":"module"}