{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"style\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theming = require(\"../../core/theming\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction AnimatedText(_ref) {\n  var style = _ref.style,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var writingDirection = _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr';\n  return React.createElement(_reactNative.Animated.Text, _extends({}, rest, {\n    style: [styles.text, _objectSpread(_objectSpread({}, theme.fonts.regular), {}, {\n      color: theme.colors.text,\n      writingDirection: writingDirection\n    }), style]\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(AnimatedText);\n\nexports.default = _default;","map":{"version":3,"sources":["AnimatedText.tsx"],"names":["rest","writingDirection","I18nManager","styles","theme","color","text","textAlign"],"mappings":";;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAQA,IAAA,QAAA,GAAA,OAAA,sBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,SAAA,YAAA,OAAwD;AAAA,MAAlC,KAAkC,QAAlC,KAAkC;AAAA,MAAlC,KAAkC,QAAlC,KAAkC;AAAA,MAAfA,IAAe;;AACtD,MAAMC,gBAAgB,GAAGC,YAAAA,CAAAA,WAAAA,CAAAA,KAAAA,GAAAA,KAAAA,GAAzB,KAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,QAAC,CAAD,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAAE,CACLC,MAAM,CADD,IAAA,kCAGAC,KAAK,CAALA,KAAAA,CADL,OAFK;AAIHC,MAAAA,KAAK,EAAED,KAAK,CAALA,MAAAA,CAFT,IAFK;AAKHH,MAAAA,gBAAAA,EAAAA;AALG,QAAA,KAAA;AAFT,GAAA,CAAA,CADF;AAcD;;AAED,IAAME,MAAM,GAAG,YAAA,CAAA,UAAA,CAAA,MAAA,CAAkB;AAC/BG,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AADyB,CAAlB,CAAf;;eAMe,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,YAAA,C","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextStyle,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof Animated.Text> & {\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nfunction AnimatedText({ style, theme, ...rest }: Props) {\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Animated.Text\n      {...rest}\n      style={[\n        styles.text,\n        {\n          ...theme.fonts.regular,\n          color: theme.colors.text,\n          writingDirection,\n        },\n        style,\n      ]}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(AnimatedText);\n"]},"metadata":{},"sourceType":"script"}