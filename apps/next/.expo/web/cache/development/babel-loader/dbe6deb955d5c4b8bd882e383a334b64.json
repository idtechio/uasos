{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { getNextHandlerTag } from \"../handlersRegistry\";\nexport var CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10\n};\nexport var Gesture = _createClass(function Gesture() {\n  _classCallCheck(this, Gesture);\n});\nexport var BaseGesture = function (_Gesture) {\n  _inherits(BaseGesture, _Gesture);\n\n  var _super = _createSuper(BaseGesture);\n\n  function BaseGesture() {\n    var _this;\n\n    _classCallCheck(this, BaseGesture);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"handlerTag\", -1);\n\n    _defineProperty(_assertThisInitialized(_this), \"handlerName\", '');\n\n    _defineProperty(_assertThisInitialized(_this), \"config\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handlers\", {\n      handlerTag: -1,\n      isWorklet: [false, false, false, false]\n    });\n\n    return _this;\n  }\n\n  _createClass(BaseGesture, [{\n    key: \"addDependency\",\n    value: function addDependency(key, gesture) {\n      var value = this.config[key];\n      this.config[key] = value ? Array().concat(value, gesture) : [gesture];\n    }\n  }, {\n    key: \"withRef\",\n    value: function withRef(ref) {\n      this.config.ref = ref;\n      return this;\n    }\n  }, {\n    key: \"isWorklet\",\n    value: function isWorklet(callback) {\n      return callback.__workletHash !== undefined;\n    }\n  }, {\n    key: \"onBegin\",\n    value: function onBegin(callback) {\n      this.handlers.onBegin = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(callback) {\n      this.handlers.onStart = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(callback) {\n      this.handlers.onEnd = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onFinalize\",\n    value: function onFinalize(callback) {\n      this.handlers.onFinalize = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesDown\",\n    value: function onTouchesDown(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesDown = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesMove\",\n    value: function onTouchesMove(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesMove = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesUp\",\n    value: function onTouchesUp(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesUp = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesCancelled\",\n    value: function onTouchesCancelled(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesCancelled = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"enabled\",\n    value: function enabled(_enabled) {\n      this.config.enabled = _enabled;\n      return this;\n    }\n  }, {\n    key: \"shouldCancelWhenOutside\",\n    value: function shouldCancelWhenOutside(value) {\n      this.config.shouldCancelWhenOutside = value;\n      return this;\n    }\n  }, {\n    key: \"hitSlop\",\n    value: function hitSlop(_hitSlop) {\n      this.config.hitSlop = _hitSlop;\n      return this;\n    }\n  }, {\n    key: \"simultaneousWithExternalGesture\",\n    value: function simultaneousWithExternalGesture() {\n      for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        gestures[_key2] = arguments[_key2];\n      }\n\n      for (var _i = 0, _gestures = gestures; _i < _gestures.length; _i++) {\n        var gesture = _gestures[_i];\n        this.addDependency('simultaneousWith', gesture);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"requireExternalGestureToFail\",\n    value: function requireExternalGestureToFail() {\n      for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        gestures[_key3] = arguments[_key3];\n      }\n\n      for (var _i2 = 0, _gestures2 = gestures; _i2 < _gestures2.length; _i2++) {\n        var gesture = _gestures2[_i2];\n        this.addDependency('requireToFail', gesture);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.handlerTag = getNextHandlerTag();\n      this.handlers = _objectSpread(_objectSpread({}, this.handlers), {}, {\n        handlerTag: this.handlerTag\n      });\n\n      if (this.config.ref) {\n        this.config.ref.current = this;\n      }\n    }\n  }, {\n    key: \"toGestureArray\",\n    value: function toGestureArray() {\n      return [this];\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {}\n  }]);\n\n  return BaseGesture;\n}(Gesture);\nexport var ContinousBaseGesture = function (_BaseGesture) {\n  _inherits(ContinousBaseGesture, _BaseGesture);\n\n  var _super2 = _createSuper(ContinousBaseGesture);\n\n  function ContinousBaseGesture() {\n    _classCallCheck(this, ContinousBaseGesture);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ContinousBaseGesture, [{\n    key: \"onUpdate\",\n    value: function onUpdate(callback) {\n      this.handlers.onUpdate = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.onChange = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"manualActivation\",\n    value: function manualActivation(_manualActivation) {\n      this.config.manualActivation = _manualActivation;\n      return this;\n    }\n  }]);\n\n  return ContinousBaseGesture;\n}(BaseGesture);","map":{"version":3,"sources":["gesture.ts"],"names":["CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","handlerTag","isWorklet","addDependency","value","Array","withRef","callback","onBegin","onStart","onEnd","onFinalize","onTouchesDown","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","simultaneousWithExternalGesture","gesture","requireExternalGestureToFail","initialize","getNextHandlerTag","toGestureArray","prepare","onUpdate","onChange","manualActivation"],"mappings":"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","sourcesContent":["import { FlingGestureHandlerEventPayload } from '../FlingGestureHandler';\nimport { ForceTouchGestureHandlerEventPayload } from '../ForceTouchGestureHandler';\nimport {\n  HitSlop,\n  CommonGestureConfig,\n  GestureTouchEvent,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n} from '../gestureHandlerCommon';\nimport { getNextHandlerTag } from '../handlersRegistry';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { LongPressGestureHandlerEventPayload } from '../LongPressGestureHandler';\nimport { PanGestureHandlerEventPayload } from '../PanGestureHandler';\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { TapGestureHandlerEventPayload } from '../TapGestureHandler';\nimport { NativeViewGestureHandlerPayload } from '../NativeViewGestureHandler';\n\nexport type GestureType =\n  | BaseGesture<Record<string, unknown>>\n  | BaseGesture<Record<string, never>>\n  | BaseGesture<TapGestureHandlerEventPayload>\n  | BaseGesture<PanGestureHandlerEventPayload>\n  | BaseGesture<LongPressGestureHandlerEventPayload>\n  | BaseGesture<RotationGestureHandlerEventPayload>\n  | BaseGesture<PinchGestureHandlerEventPayload>\n  | BaseGesture<FlingGestureHandlerEventPayload>\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\n  | BaseGesture<NativeViewGestureHandlerPayload>;\n\nexport type GestureRef =\n  | number\n  | GestureType\n  | React.RefObject<GestureType | undefined>\n  | React.RefObject<React.ComponentType | undefined>; // allow adding a ref to a gesture handler\nexport interface BaseGestureConfig\n  extends CommonGestureConfig,\n    Record<string, unknown> {\n  ref?: React.MutableRefObject<GestureType | undefined>;\n  requireToFail?: GestureRef[];\n  simultaneousWith?: GestureRef[];\n  needsPointerData?: boolean;\n  manualActivation?: boolean;\n}\n\ntype TouchEventHandlerType = (\n  event: GestureTouchEvent,\n  stateManager: GestureStateManagerType\n) => void;\n\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\n  handlerTag: number;\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onEnd?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\n  onChange?: (event: any) => void;\n  onTouchesDown?: TouchEventHandlerType;\n  onTouchesMove?: TouchEventHandlerType;\n  onTouchesUp?: TouchEventHandlerType;\n  onTouchesCancelled?: TouchEventHandlerType;\n  changeEventCalculator?: (\n    current: GestureUpdateEvent<Record<string, unknown>>,\n    previous?: GestureUpdateEvent<Record<string, unknown>>\n  ) => GestureUpdateEvent<Record<string, unknown>>;\n  isWorklet: boolean[];\n};\n\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10,\n} as const;\n\n// Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type CALLBACK_TYPE = typeof CALLBACK_TYPE[keyof typeof CALLBACK_TYPE];\n\nexport abstract class Gesture {\n  /**\n   * Return array of gestures, providing the same interface for creating and updating\n   * handlers, no matter which object was used to create gesture instance.\n   */\n  abstract toGestureArray(): GestureType[];\n\n  /**\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\n   */\n  abstract initialize(): void;\n\n  /**\n   * Make sure that values of properties defining relations are arrays. Do any necessary\n   * preprocessing required to configure relations between handlers. Called just before\n   * updating the handler on the native side.\n   */\n  abstract prepare(): void;\n}\n\nexport abstract class BaseGesture<\n  EventPayloadT extends Record<string, unknown>\n> extends Gesture {\n  public handlerTag = -1;\n  public handlerName = '';\n  public config: BaseGestureConfig = {};\n  public handlers: HandlerCallbacks<EventPayloadT> = {\n    handlerTag: -1,\n    isWorklet: [false, false, false, false],\n  };\n\n  private addDependency(\n    key: 'simultaneousWith' | 'requireToFail',\n    gesture: Exclude<GestureRef, number>\n  ) {\n    const value = this.config[key];\n    this.config[key] = value\n      ? Array<GestureRef>().concat(value, gesture)\n      : [gesture];\n  }\n\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\n    this.config.ref = ref;\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected isWorklet(callback: Function) {\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n\n  onEnd(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onEnd = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n\n  onFinalize(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onFinalize = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onTouchesDown(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  onTouchesMove(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  onTouchesUp(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  onTouchesCancelled(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  enabled(enabled: boolean) {\n    this.config.enabled = enabled;\n    return this;\n  }\n\n  shouldCancelWhenOutside(value: boolean) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n\n  hitSlop(hitSlop: HitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\n\n    if (this.config.ref) {\n      this.config.ref.current = this as GestureType;\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return [this as GestureType];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  prepare() {}\n}\n\nexport abstract class ContinousBaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n  EventChangePayloadT extends Record<string, unknown>\n> extends BaseGesture<EventPayloadT> {\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\n    ) => void\n  ) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n\n  manualActivation(manualActivation: boolean) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}