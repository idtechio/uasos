{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAdornmentConfig = getAdornmentConfig;\nexports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _TextInputIcon = _interopRequireWildcard(require(\"./TextInputIcon\"));\n\nvar _TextInputAffix = _interopRequireWildcard(require(\"./TextInputAffix\"));\n\nvar _constants = require(\"../constants\");\n\nvar _enums = require(\"./enums\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: _enums.AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: _enums.AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && _react.default.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === _TextInputAffix.default) {\n          type = _enums.AdornmentType.Affix;\n        } else if (adornment.type === _TextInputIcon.default) {\n          type = _enums.AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nfunction getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n      mode = _ref3.mode;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref5;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isLeftSide = side === _enums.AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? _constants.ADORNMENT_OFFSET + _constants.OUTLINED_INPUT_OFFSET : _constants.ADORNMENT_OFFSET;\n      var paddingKey = \"padding\" + captalize(side);\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === _enums.AdornmentType.Affix;\n      var marginKey = \"margin\" + captalize(side);\n      return _ref5 = {}, _defineProperty(_ref5, marginKey, isAffix ? 0 : offset), _defineProperty(_ref5, paddingKey, isAffix ? offset : inputOffset), _ref5;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref6) {\n  var adornmentConfig = _ref6.adornmentConfig,\n      left = _ref6.left,\n      right = _ref6.right,\n      onAffixChange = _ref6.onAffixChange,\n      textStyle = _ref6.textStyle,\n      visible = _ref6.visible,\n      topPosition = _ref6.topPosition,\n      isTextInputFocused = _ref6.isTextInputFocused,\n      forceFocus = _ref6.forceFocus,\n      paddingHorizontal = _ref6.paddingHorizontal;\n\n  if (adornmentConfig.length) {\n    return _react.default.createElement(_react.default.Fragment, null, adornmentConfig.map(function (_ref7) {\n      var type = _ref7.type,\n          side = _ref7.side;\n      var inputAdornmentComponent;\n\n      if (side === _enums.AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === _enums.AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: side + \"-\" + type + \"-adornment\",\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n\n      if (type === _enums.AdornmentType.Icon) {\n        return _react.default.createElement(_TextInputIcon.IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[_enums.AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === _enums.AdornmentType.Affix) {\n        return _react.default.createElement(_TextInputAffix.AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[_enums.AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nvar _default = TextInputAdornment;\nexports.default = _default;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["right","adornmentConfig","left","side","AdornmentSide","adornment","React","TextInputAffix","type","AdornmentType","TextInputIcon","inputOffset","mode","adornmentStyleAdjustmentForNativeInput","isLeftSide","inputModeAdornemntOffset","InputMode","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","currentStyle","text","TextInputAdornment","paddingHorizontal","inputAdornmentComponent","commonProps","key","testID","isTextInputFocused","topPosition","forceFocus","onAffixChange","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"script"}