{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { deleteListItem } from \"../client-api/delete\";\nimport { reportListItem } from \"../client-api/report\";\nimport { renewListItem } from \"../client-api/renew\";\nimport { QueryKeys } from \"./queryKeys\";\nimport { API_REFRESH_LATENCY } from \"../helpers/misc\";\nexport var useDeleteItem = function useDeleteItem() {\n  var queryClient = useQueryClient();\n  return useMutation(deleteListItem, {\n    onSuccess: function onSuccess(_, variables) {\n      if (variables.targetType === \"hosts\") {\n        queryClient.setQueryData([QueryKeys.GET_OFFERS_LIST], function (data) {\n          return data && _objectSpread(_objectSpread({}, data), {}, {\n            offers: data.offers.filter(function (offer) {\n              return offer.id !== variables.targetID;\n            })\n          });\n        });\n      }\n\n      if (variables.targetType === \"guests\") {\n        queryClient.setQueryData([QueryKeys.GET_REQUESTS_LIST], function (data) {\n          return data && _objectSpread(_objectSpread({}, data), {}, {\n            requests: data.requests.filter(function (request) {\n              return request.id !== variables.targetID;\n            })\n          });\n        });\n      }\n\n      setTimeout(function () {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    }\n  });\n};\nexport var useReportItem = function useReportItem() {\n  return useMutation(reportListItem);\n};\nexport var useRenewItem = function useRenewItem() {\n  var queryClient = useQueryClient();\n  return useMutation(renewListItem, {\n    onSuccess: function onSuccess(_, variables) {\n      if (variables.targetType === \"hosts\") {\n        queryClient.setQueryData([QueryKeys.GET_OFFERS_LIST], function (data) {\n          return data && _objectSpread(_objectSpread({}, data), {}, {\n            offers: data.offers.map(function (offer) {\n              if (offer.id === variables.targetID) {\n                return _objectSpread(_objectSpread({}, offer), {}, {\n                  client_only: true,\n                  match_status: \"default\"\n                });\n              }\n\n              return offer;\n            })\n          });\n        });\n      }\n\n      if (variables.targetType === \"guests\") {\n        queryClient.setQueryData([QueryKeys.GET_REQUESTS_LIST], function (data) {\n          return data && _objectSpread(_objectSpread({}, data), {}, {\n            requests: data.requests.map(function (request) {\n              if (request.id === variables.targetID) {\n                return _objectSpread(_objectSpread({}, request), {}, {\n                  client_only: true,\n                  match_status: \"default\"\n                });\n              }\n\n              return request;\n            })\n          });\n        });\n      }\n\n      setTimeout(function () {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/queries/useListing.ts"],"names":["useMutation","useQueryClient","deleteListItem","reportListItem","renewListItem","QueryKeys","API_REFRESH_LATENCY","useDeleteItem","queryClient","onSuccess","_","variables","targetType","setQueryData","GET_OFFERS_LIST","data","offers","filter","offer","id","targetID","GET_REQUESTS_LIST","requests","request","setTimeout","invalidateQueries","useReportItem","useRenewItem","map","client_only","match_status"],"mappings":"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","sourcesContent":["import { useMutation, useQueryClient } from \"react-query\";\nimport { deleteListItem } from \"../client-api/delete\";\nimport { reportListItem } from \"../client-api/report\";\nimport { renewListItem } from \"../client-api/renew\";\nimport { GetOffersListDTO } from \"../client-api/offers\";\nimport { QueryKeys } from \"./queryKeys\";\nimport { GetRequestsListDTO } from \"../client-api/requests\";\nimport { API_REFRESH_LATENCY } from \"../helpers/misc\";\nimport { MatchStatus } from \"../../pages/api/listing/offers\";\n\nexport const useDeleteItem = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation(deleteListItem, {\n    onSuccess: (_, variables) => {\n      if (variables.targetType === \"hosts\") {\n        queryClient.setQueryData<GetOffersListDTO | undefined>(\n          [QueryKeys.GET_OFFERS_LIST],\n          (data) =>\n            data && {\n              ...data,\n              offers: data.offers.filter(\n                (offer) => offer.id !== variables.targetID\n              ),\n            }\n        );\n      }\n\n      if (variables.targetType === \"guests\") {\n        queryClient.setQueryData<GetRequestsListDTO | undefined>(\n          [QueryKeys.GET_REQUESTS_LIST],\n          (data) =>\n            data && {\n              ...data,\n              requests: data.requests.filter(\n                (request) => request.id !== variables.targetID\n              ),\n            }\n        );\n      }\n\n      setTimeout(() => {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    },\n  });\n};\nexport const useReportItem = () => useMutation(reportListItem);\n\nexport const useRenewItem = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation(renewListItem, {\n    onSuccess: (_, variables) => {\n      if (variables.targetType === \"hosts\") {\n        queryClient.setQueryData<GetOffersListDTO | undefined>(\n          [QueryKeys.GET_OFFERS_LIST],\n          (data) =>\n            data && {\n              ...data,\n              offers: data.offers.map((offer) => {\n                if (offer.id === variables.targetID) {\n                  return {\n                    ...offer,\n                    client_only: true,\n                    match_status: \"default\" as MatchStatus,\n                  };\n                }\n                return offer;\n              }),\n            }\n        );\n      }\n\n      if (variables.targetType === \"guests\") {\n        queryClient.setQueryData<GetRequestsListDTO | undefined>(\n          [QueryKeys.GET_REQUESTS_LIST],\n          (data) =>\n            data && {\n              ...data,\n              requests: data.requests.map((request) => {\n                if (request.id === variables.targetID) {\n                  return {\n                    ...request,\n                    client_only: true,\n                    match_status: \"default\" as MatchStatus,\n                  };\n                }\n                return request;\n              }),\n            }\n        );\n      }\n\n      setTimeout(() => {\n        queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n        queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n      }, API_REFRESH_LATENCY);\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}