{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport RadioButtons from \"../Forms/RadioButtons\";\nimport ChoiceButton from \"../Forms/ChoiceButton\";\nimport RadioButton from \"../Forms/RadioButton\";\nimport { Error } from \"./style\";\n\nvar FormRadioGroup = function FormRadioGroup(_ref) {\n  var name = _ref.name,\n      rules = _ref.rules,\n      data = _ref.data,\n      errorMsg = _ref.errorMsg,\n      isRadio = _ref.isRadio;\n\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control,\n      formState = _useFormContext.formState,\n      getValues = _useFormContext.getValues;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      markedCheckbox = _useState2[0],\n      setMarkedCheckbox = _useState2[1];\n\n  useEffect(function () {\n    if (data && getValues(name) && !markedCheckbox) {\n      var _data$filter$;\n\n      setMarkedCheckbox((_data$filter$ = data.filter(function (el) {\n        return el.value === getValues(name);\n      })[0]) == null ? void 0 : _data$filter$.label);\n    }\n  }, [data, getValues, markedCheckbox, name]);\n  var error = useMemo(function () {\n    return name.split(\".\").reduce(function (accu, item) {\n      return accu ? accu[item] : undefined;\n    }, formState.errors);\n  }, [name, formState]);\n  return React.createElement(Controller, {\n    control: control,\n    rules: rules,\n    render: function render(_ref2) {\n      var onChange = _ref2.field.onChange;\n      return React.createElement(RadioButtons, null, data.map(function (_ref3) {\n        var label = _ref3.label,\n            value = _ref3.value;\n        return React.createElement(React.Fragment, null, isRadio ? React.createElement(RadioButton, {\n          key: label,\n          labelText: label,\n          isSelected: label === markedCheckbox,\n          onPress: function onPress() {\n            setMarkedCheckbox(label);\n            onChange(value);\n          }\n        }) : React.createElement(ChoiceButton, {\n          key: label,\n          onPress: function onPress() {\n            setMarkedCheckbox(label);\n            onChange(value);\n          },\n          error: !!error,\n          text: label,\n          isSmall: true,\n          isSelected: label === markedCheckbox\n        }));\n      }), error ? React.createElement(Error, null, errorMsg) : null);\n    },\n    name: name\n  });\n};\n\nexport default FormRadioGroup;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Inputs/FormRadioGroup.tsx"],"names":["React","useEffect","useMemo","useState","Controller","useFormContext","RadioButtons","ChoiceButton","RadioButton","Error","FormRadioGroup","name","rules","data","errorMsg","isRadio","control","formState","getValues","markedCheckbox","setMarkedCheckbox","filter","el","value","label","error","split","reduce","accu","item","undefined","errors","onChange","field","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { Controller, FieldError, useFormContext } from \"react-hook-form\";\nimport { FormKey } from \"../../helpers/FormTypes\";\nimport RadioButtons from \"../Forms/RadioButtons\";\nimport ChoiceButton from \"../Forms/ChoiceButton\";\nimport RadioButton from \"../Forms/RadioButton\";\nimport { Error } from \"./style\";\n\ntype Data = {\n  label: string;\n  value: string;\n};\n\ntype Props = {\n  name: FormKey;\n  data: Data[];\n  error?: FieldError | FieldError[];\n  errorMsg?: string;\n  isRadio?: boolean;\n} & Pick<React.ComponentProps<typeof Controller>, \"rules\">;\n\nconst FormRadioGroup = ({ name, rules, data, errorMsg, isRadio }: Props) => {\n  const { control, formState, getValues } = useFormContext();\n  const [markedCheckbox, setMarkedCheckbox] = useState<string>();\n\n  useEffect(() => {\n    if (data && getValues(name) && !markedCheckbox) {\n      setMarkedCheckbox(\n        data.filter((el) => el.value === getValues(name))[0]?.label\n      );\n    }\n  }, [data, getValues, markedCheckbox, name]);\n\n  const error = useMemo(() => {\n    return name\n      .split(\".\")\n      .reduce(\n        (accu, item) => (accu ? accu[item] : undefined),\n        formState.errors\n      );\n  }, [name, formState]);\n\n  return (\n    <Controller\n      control={control}\n      rules={rules}\n      render={({ field: { onChange } }) => (\n        <RadioButtons>\n          {data.map(({ label, value }) => (\n            <>\n              {isRadio ? (\n                <RadioButton\n                  key={label}\n                  labelText={label}\n                  isSelected={label === markedCheckbox}\n                  onPress={() => {\n                    setMarkedCheckbox(label);\n                    onChange(value);\n                  }}\n                />\n              ) : (\n                <ChoiceButton\n                  key={label}\n                  onPress={() => {\n                    setMarkedCheckbox(label);\n                    onChange(value);\n                  }}\n                  error={!!error}\n                  text={label}\n                  isSmall\n                  isSelected={label === markedCheckbox}\n                />\n              )}\n            </>\n          ))}\n          {error ? <Error>{errorMsg}</Error> : null}\n        </RadioButtons>\n      )}\n      name={name}\n    />\n  );\n};\n\nexport default FormRadioGroup;\n"]},"metadata":{},"sourceType":"module"}