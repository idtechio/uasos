{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { applyActionCode, confirmPasswordReset, createUserWithEmailAndPassword, FacebookAuthProvider, fetchSignInMethodsForEmail, getAuth, getIdToken, getRedirectResult, GoogleAuthProvider, linkWithPhoneNumber, onAuthStateChanged, PhoneAuthProvider, RecaptchaVerifier, sendEmailVerification, sendPasswordResetEmail as _sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPhoneNumber, signInWithRedirect, signOut, updateEmail, updatePhoneNumber } from \"firebase/auth\";\nimport { useEffect, useState } from \"react\";\nimport { auth } from \"../../lib/firebase-app\";\nimport { AccountApi } from \"../client-api/account\";\nauth.useDeviceLanguage();\n\nvar useAuth = function useAuth() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      identity = _useState2[0],\n      setIdentity = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      account = _useState4[0],\n      setAccount = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loaded = _useState6[0],\n      setLoaded = _useState6[1];\n\n  useEffect(function () {\n    onAuthStateChanged(auth, function _callee(user) {\n      var account, updatedAccount, _updatedAccount;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AccountApi.getAccount().then(function (res) {\n                return res;\n              }).catch(function () {\n                return null;\n              }));\n\n            case 2:\n              account = _context.sent;\n              setAccount(account);\n\n              if (!(user && user.emailVerified && !(account != null && account.confirmedEmail))) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(AccountApi.updateAccount({\n                payload: {\n                  preferredLang: account == null ? void 0 : account.preferredLang\n                }\n              }));\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(AccountApi.getAccount().then(function (res) {\n                return res;\n              }).catch(function () {\n                return null;\n              }));\n\n            case 9:\n              updatedAccount = _context.sent;\n              setAccount(updatedAccount);\n\n            case 11:\n              if (!(user && user.phoneNumber && !account)) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(AccountApi.updateAccount({\n                payload: {\n                  phone: user == null ? void 0 : user.phoneNumber\n                }\n              }));\n\n            case 14:\n              if (!(user && !account)) {\n                _context.next = 19;\n                break;\n              }\n\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(AccountApi.getAccount().then(function (res) {\n                return res;\n              }).catch(function () {\n                return null;\n              }));\n\n            case 17:\n              _updatedAccount = _context.sent;\n              setAccount(_updatedAccount);\n\n            case 19:\n              setIdentity(user);\n              setLoaded(true);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  }, []);\n  var getTokenForAPI = null;\n\n  if (identity) {\n    getTokenForAPI = function getTokenForAPI() {\n      return _regeneratorRuntime.async(function getTokenForAPI$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(getIdToken(identity, true));\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n\n  var refetchAccount = function refetchAccount() {\n    var account;\n    return _regeneratorRuntime.async(function refetchAccount$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AccountApi.getAccount());\n\n          case 2:\n            account = _context3.sent;\n            setAccount(account);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return {\n    identity: identity,\n    account: account,\n    getTokenForAPI: getTokenForAPI,\n    loaded: loaded,\n    refetchAccount: refetchAccount\n  };\n};\n\nvar Authorization = {\n  recaptcha: null,\n  logOut: function logOut() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(signOut(auth));\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  signInWithGoogle: function signInWithGoogle() {\n    return function _callee3() {\n      var res;\n      return _regeneratorRuntime.async(function _callee3$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(signInWithRedirect(auth, new GoogleAuthProvider()));\n\n            case 2:\n              _context5.next = 4;\n              return _regeneratorRuntime.awrap(getRedirectResult(auth));\n\n            case 4:\n              res = _context5.sent;\n              return _context5.abrupt(\"return\", res);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  signInWithFacebook: function signInWithFacebook() {\n    return function _callee4() {\n      var res;\n      return _regeneratorRuntime.async(function _callee4$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              signInWithRedirect(auth, new FacebookAuthProvider());\n              _context6.next = 3;\n              return _regeneratorRuntime.awrap(getRedirectResult(auth));\n\n            case 3:\n              res = _context6.sent;\n              return _context6.abrupt(\"return\", res);\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  signInWithPhone: function signInWithPhone(phoneNumber, recaptcha) {\n    return function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(signInWithPhoneNumber(auth, phoneNumber, recaptcha));\n\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  signInWithEmail: function signInWithEmail(email, password) {\n    return function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(signInWithEmailAndPassword(auth, email, password));\n\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  initCaptcha: function initCaptcha(containerId) {\n    this.recaptcha = new RecaptchaVerifier(containerId, {\n      size: \"invisible\",\n      callback: function callback() {\n        return console.log(\"success\");\n      },\n      \"expired-callback\": function expiredCallback() {\n        return console.log(\"failier\");\n      }\n    }, auth);\n    return this.recaptcha;\n  },\n  sendPasswordResetEmail: function sendPasswordResetEmail(email) {\n    return function _callee7() {\n      return _regeneratorRuntime.async(function _callee7$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regeneratorRuntime.awrap(_sendPasswordResetEmail(auth, email));\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  confirmPasswordResetEmail: function confirmPasswordResetEmail(oobCode, password) {\n    return function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regeneratorRuntime.awrap(confirmPasswordReset(auth, oobCode, password));\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  sendVerificationEmail: function sendVerificationEmail(user) {\n    return function _callee9() {\n      return _regeneratorRuntime.async(function _callee9$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _regeneratorRuntime.awrap(sendEmailVerification(user));\n\n            case 2:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  initUpdatePhone: function initUpdatePhone(phoneNumber, recaptcha) {\n    return function _callee10() {\n      var provider;\n      return _regeneratorRuntime.async(function _callee10$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              provider = new PhoneAuthProvider(auth);\n              _context12.next = 3;\n              return _regeneratorRuntime.awrap(provider.verifyPhoneNumber(phoneNumber, recaptcha));\n\n            case 3:\n              return _context12.abrupt(\"return\", _context12.sent);\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  updatePhone: function updatePhone(phoneCredential) {\n    return function _callee11() {\n      var user;\n      return _regeneratorRuntime.async(function _callee11$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              user = getAuth().currentUser;\n\n              if (user) {\n                _context13.next = 3;\n                break;\n              }\n\n              throw new Error(\"No user\");\n\n            case 3:\n              _context13.next = 5;\n              return _regeneratorRuntime.awrap(updatePhoneNumber(user, phoneCredential));\n\n            case 5:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  createUser: function createUser(email, password) {\n    return function _callee12() {\n      return _regeneratorRuntime.async(function _callee12$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return _regeneratorRuntime.awrap(createUserWithEmailAndPassword(auth, email, password));\n\n            case 2:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  linkWithPhone: function linkWithPhone(phoneNumber, recaptcha) {\n    return function _callee13() {\n      var user;\n      return _regeneratorRuntime.async(function _callee13$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              user = getAuth().currentUser;\n\n              if (user) {\n                _context15.next = 3;\n                break;\n              }\n\n              throw new Error(\"No user\");\n\n            case 3:\n              _context15.next = 5;\n              return _regeneratorRuntime.awrap(linkWithPhoneNumber(user, phoneNumber, recaptcha));\n\n            case 5:\n              return _context15.abrupt(\"return\", _context15.sent);\n\n            case 6:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  applyCode: function applyCode(code) {\n    return function _callee14() {\n      return _regeneratorRuntime.async(function _callee14$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return _regeneratorRuntime.awrap(applyActionCode(auth, code));\n\n            case 2:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  updateMail: function updateMail(email) {\n    return function _callee15() {\n      var user;\n      return _regeneratorRuntime.async(function _callee15$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              user = getAuth().currentUser;\n\n              if (user) {\n                _context17.next = 3;\n                break;\n              }\n\n              throw new Error(\"No user\");\n\n            case 3:\n              _context17.next = 5;\n              return _regeneratorRuntime.awrap(updateEmail(user, email));\n\n            case 5:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getSignInMethods: function getSignInMethods() {\n    return function _callee16() {\n      var auth, targetUser, methods;\n      return _regeneratorRuntime.async(function _callee16$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              auth = getAuth();\n              targetUser = getAuth().currentUser;\n\n              if (!(!(targetUser != null && targetUser.email) || !auth)) {\n                _context18.next = 4;\n                break;\n              }\n\n              return _context18.abrupt(\"return\", []);\n\n            case 4:\n              _context18.next = 6;\n              return _regeneratorRuntime.awrap(fetchSignInMethodsForEmail(auth, targetUser.email));\n\n            case 6:\n              methods = _context18.sent;\n              return _context18.abrupt(\"return\", methods);\n\n            case 8:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};\nexport default useAuth;\nexport { Authorization };","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/hooks/useAuth.ts"],"names":["applyActionCode","confirmPasswordReset","createUserWithEmailAndPassword","FacebookAuthProvider","fetchSignInMethodsForEmail","getAuth","getIdToken","getRedirectResult","GoogleAuthProvider","linkWithPhoneNumber","onAuthStateChanged","PhoneAuthProvider","RecaptchaVerifier","sendEmailVerification","sendPasswordResetEmail","signInWithEmailAndPassword","signInWithPhoneNumber","signInWithRedirect","signOut","updateEmail","updatePhoneNumber","useEffect","useState","auth","AccountApi","useDeviceLanguage","useAuth","identity","setIdentity","account","setAccount","loaded","setLoaded","user","getAccount","then","res","catch","emailVerified","confirmedEmail","updateAccount","payload","preferredLang","updatedAccount","phoneNumber","phone","getTokenForAPI","refetchAccount","Authorization","recaptcha","logOut","signInWithGoogle","signInWithFacebook","signInWithPhone","signInWithEmail","email","password","initCaptcha","containerId","size","callback","console","log","confirmPasswordResetEmail","oobCode","sendVerificationEmail","initUpdatePhone","provider","verifyPhoneNumber","updatePhone","phoneCredential","currentUser","Error","createUser","linkWithPhone","applyCode","code","updateMail","getSignInMethods","targetUser","methods"],"mappings":"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","sourcesContent":["import {\n  applyActionCode,\n  ConfirmationResult,\n  confirmPasswordReset,\n  createUserWithEmailAndPassword,\n  FacebookAuthProvider,\n  fetchSignInMethodsForEmail,\n  getAuth,\n  getIdToken,\n  getRedirectResult,\n  GoogleAuthProvider,\n  linkWithPhoneNumber,\n  onAuthStateChanged,\n  PhoneAuthCredential,\n  PhoneAuthProvider,\n  RecaptchaVerifier,\n  sendEmailVerification,\n  sendPasswordResetEmail,\n  signInWithEmailAndPassword,\n  signInWithPhoneNumber,\n  signInWithRedirect,\n  signOut,\n  updateEmail,\n  updatePhoneNumber,\n  User,\n  UserCredential,\n} from \"firebase/auth\";\nimport React, { useEffect, useState } from \"react\";\nimport { auth } from \"../../lib/firebase-app\";\nimport { AccountApi, getAccountDTO } from \"../client-api/account\";\n\nauth.useDeviceLanguage();\n\nconst useAuth = () => {\n  const [identity, setIdentity] = useState<null | User>(null);\n  const [account, setAccount] = useState<null | getAccountDTO>(null);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    onAuthStateChanged(auth, async (user) => {\n      const account = await AccountApi.getAccount()\n        .then((res) => res)\n        .catch(() => null);\n      setAccount(account);\n      if (user && user.emailVerified && !account?.confirmedEmail) {\n        await AccountApi.updateAccount({\n          payload: { preferredLang: account?.preferredLang },\n        });\n        const updatedAccount = await AccountApi.getAccount()\n          .then((res) => res)\n          .catch(() => null);\n        setAccount(updatedAccount);\n      }\n      if (user && user.phoneNumber && !account) {\n        await AccountApi.updateAccount({\n          payload: { phone: user?.phoneNumber },\n        });\n      }\n      if (user && !account) {\n        const updatedAccount = await AccountApi.getAccount()\n          .then((res) => res)\n          .catch(() => null);\n        setAccount(updatedAccount);\n      }\n\n      setIdentity(user);\n      setLoaded(true);\n    });\n  }, []);\n  let getTokenForAPI = null;\n  if (identity) {\n    getTokenForAPI = async () => await getIdToken(identity, true);\n  }\n  const refetchAccount = async () => {\n    const account = await AccountApi.getAccount();\n    setAccount(account);\n  };\n\n  return { identity, account, getTokenForAPI, loaded, refetchAccount };\n};\n\ninterface Authorization {\n  recaptcha: RecaptchaVerifier | null;\n  logOut: () => Promise<void>;\n  signInWithGoogle: () => Promise<UserCredential | null>;\n  signInWithFacebook: () => Promise<UserCredential | null>;\n  signInWithPhone: (\n    phoneNumber: string,\n    recaptcha: RecaptchaVerifier\n  ) => Promise<ConfirmationResult>;\n  initCaptcha: (containerId: string) => RecaptchaVerifier;\n  signInWithEmail: (email: string, password: string) => Promise<void>;\n  sendPasswordResetEmail: (email: string) => Promise<void>;\n  confirmPasswordResetEmail: (\n    oobCode: string,\n    password: string\n  ) => Promise<void>;\n  sendVerificationEmail: (user: User) => Promise<void>;\n  updatePhone: (phoneCredential: PhoneAuthCredential) => Promise<void>;\n  initUpdatePhone: (\n    phoneNumber: string,\n    recaptcha: RecaptchaVerifier\n  ) => Promise<string>;\n  createUser: (email: string, password: string) => Promise<void>;\n  linkWithPhone: (\n    phoneNumber: string,\n    recaptcha: RecaptchaVerifier\n  ) => Promise<ConfirmationResult>;\n  applyCode: (code: string) => Promise<void>;\n  updateMail: (email: string) => Promise<void>;\n  getSignInMethods: () => Promise<string[]>;\n}\nconst Authorization: Authorization = {\n  recaptcha: null,\n\n  async logOut() {\n    await signOut(auth);\n  },\n  async signInWithGoogle() {\n    await signInWithRedirect(auth, new GoogleAuthProvider());\n    const res = await getRedirectResult(auth);\n    return res;\n  },\n  async signInWithFacebook() {\n    signInWithRedirect(auth, new FacebookAuthProvider());\n    const res = await getRedirectResult(auth);\n    return res;\n  },\n  async signInWithPhone(phoneNumber, recaptcha) {\n    return await signInWithPhoneNumber(auth, phoneNumber, recaptcha);\n  },\n  async signInWithEmail(email, password) {\n    await signInWithEmailAndPassword(auth, email, password);\n  },\n\n  initCaptcha(containerId) {\n    this.recaptcha = new RecaptchaVerifier(\n      containerId,\n      {\n        size: \"invisible\",\n        // eslint-disable-next-line no-console\n        callback: () => console.log(\"success\"),\n        // eslint-disable-next-line no-console\n        \"expired-callback\": () => console.log(\"failier\"),\n      },\n      auth\n    );\n\n    return this.recaptcha;\n  },\n  async sendPasswordResetEmail(email) {\n    await sendPasswordResetEmail(auth, email);\n  },\n  async confirmPasswordResetEmail(oobCode, password) {\n    await confirmPasswordReset(auth, oobCode, password);\n  },\n  async sendVerificationEmail(user) {\n    await sendEmailVerification(user);\n  },\n  async initUpdatePhone(phoneNumber, recaptcha) {\n    const provider = new PhoneAuthProvider(auth);\n    return await provider.verifyPhoneNumber(phoneNumber, recaptcha);\n  },\n  async updatePhone(phoneCredential) {\n    const user = getAuth().currentUser;\n\n    if (!user) {\n      throw new Error(\"No user\");\n    }\n    await updatePhoneNumber(user, phoneCredential);\n  },\n  async createUser(email, password) {\n    await createUserWithEmailAndPassword(auth, email, password);\n  },\n  async linkWithPhone(phoneNumber, recaptcha) {\n    const user = getAuth().currentUser;\n    if (!user) {\n      throw new Error(\"No user\");\n    }\n    return await linkWithPhoneNumber(user, phoneNumber, recaptcha);\n  },\n  async applyCode(code) {\n    await applyActionCode(auth, code);\n  },\n  async updateMail(email) {\n    const user = getAuth().currentUser;\n    if (!user) {\n      throw new Error(\"No user\");\n    }\n    await updateEmail(user, email);\n  },\n\n  async getSignInMethods() {\n    const auth = getAuth();\n    const targetUser = getAuth().currentUser;\n\n    if (!targetUser?.email || !auth) {\n      return [];\n    }\n\n    const methods = await fetchSignInMethodsForEmail(auth, targetUser.email);\n\n    return methods;\n  },\n};\n\nexport default useAuth;\nexport { Authorization };\n"]},"metadata":{},"sourceType":"module"}