{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/construct\";\nimport { FlingGesture } from \"./flingGesture\";\nimport { ForceTouchGesture } from \"./forceTouchGesture\";\nimport { ComposedGesture, ExclusiveGesture, SimultaneousGesture } from \"./gestureComposition\";\nimport { LongPressGesture } from \"./longPressGesture\";\nimport { PanGesture } from \"./panGesture\";\nimport { PinchGesture } from \"./pinchGesture\";\nimport { RotationGesture } from \"./rotationGesture\";\nimport { TapGesture } from \"./tapGesture\";\nimport { NativeGesture } from \"./nativeGesture\";\nimport { ManualGesture } from \"./manualGesture\";\nexport var GestureObjects = {\n  Tap: function Tap() {\n    return new TapGesture();\n  },\n  Pan: function Pan() {\n    return new PanGesture();\n  },\n  Pinch: function Pinch() {\n    return new PinchGesture();\n  },\n  Rotation: function Rotation() {\n    return new RotationGesture();\n  },\n  Fling: function Fling() {\n    return new FlingGesture();\n  },\n  LongPress: function LongPress() {\n    return new LongPressGesture();\n  },\n  ForceTouch: function ForceTouch() {\n    return new ForceTouchGesture();\n  },\n  Native: function Native() {\n    return new NativeGesture();\n  },\n  Manual: function Manual() {\n    return new ManualGesture();\n  },\n  Race: function Race() {\n    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {\n      gestures[_key] = arguments[_key];\n    }\n\n    return _construct(ComposedGesture, gestures);\n  },\n  Simultaneous: function Simultaneous() {\n    for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      gestures[_key2] = arguments[_key2];\n    }\n\n    return _construct(SimultaneousGesture, gestures);\n  },\n  Exclusive: function Exclusive() {\n    for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      gestures[_key3] = arguments[_key3];\n    }\n\n    return _construct(ExclusiveGesture, gestures);\n  }\n};","map":{"version":3,"sources":["gestureObjects.ts"],"names":["GestureObjects","Tap","Pan","Pinch","Rotation","Fling","LongPress","ForceTouch","Native","Manual","Race","Simultaneous","Exclusive"],"mappings":";AAAA,SAAA,YAAA;AACA,SAAA,iBAAA;AAEA,SAAA,eAAA,EAAA,gBAAA,EAAA,mBAAA;AAKA,SAAA,gBAAA;AACA,SAAA,UAAA;AACA,SAAA,YAAA;AACA,SAAA,eAAA;AACA,SAAA,UAAA;AACA,SAAA,aAAA;AACA,SAAA,aAAA;AAEA,OAAO,IAAMA,cAAc,GAAG;AAC5BC,EAAAA,GAAG,EAAE,eAAM;AACT,WAAO,IAAP,UAAO,EAAP;AAF0B,GAAA;AAK5BC,EAAAA,GAAG,EAAE,eAAM;AACT,WAAO,IAAP,UAAO,EAAP;AAN0B,GAAA;AAS5BC,EAAAA,KAAK,EAAE,iBAAM;AACX,WAAO,IAAP,YAAO,EAAP;AAV0B,GAAA;AAa5BC,EAAAA,QAAQ,EAAE,oBAAM;AACd,WAAO,IAAP,eAAO,EAAP;AAd0B,GAAA;AAiB5BC,EAAAA,KAAK,EAAE,iBAAM;AACX,WAAO,IAAP,YAAO,EAAP;AAlB0B,GAAA;AAqB5BC,EAAAA,SAAS,EAAE,qBAAM;AACf,WAAO,IAAP,gBAAO,EAAP;AAtB0B,GAAA;AAyB5BC,EAAAA,UAAU,EAAE,sBAAM;AAChB,WAAO,IAAP,iBAAO,EAAP;AA1B0B,GAAA;AA6B5BC,EAAAA,MAAM,EAAE,kBAAM;AACZ,WAAO,IAAP,aAAO,EAAP;AA9B0B,GAAA;AAiC5BC,EAAAA,MAAM,EAAE,kBAAM;AACZ,WAAO,IAAP,aAAO,EAAP;AAlC0B,GAAA;AAyC5BC,EAAAA,IAAI,EAAE,gBAA4B;AAAA,sCAA5B,QAA4B;AAA5B,MAAA,QAA4B;AAAA;;AAChC,sBAAO,eAAP,EAAA,QAAA;AA1C0B,GAAA;AAgD5BC,EAAAA,YAhD4B,0BAgDS;AAAA,uCAAzB,QAAyB;AAAzB,MAAA,QAAyB;AAAA;;AACnC,sBAAO,mBAAP,EAAA,QAAA;AAjD0B,GAAA;AA2D5BC,EAAAA,SA3D4B,uBA2DM;AAAA,uCAAzB,QAAyB;AAAzB,MAAA,QAAyB;AAAA;;AAChC,sBAAO,gBAAP,EAAA,QAAA;AACD;AA7D2B,CAAvB","sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\n\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}