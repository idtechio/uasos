{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { BaseGesture } from \"./gesture\";\nexport var FlingGesture = function (_BaseGesture) {\n  _inherits(FlingGesture, _BaseGesture);\n\n  var _super = _createSuper(FlingGesture);\n\n  function FlingGesture() {\n    var _this;\n\n    _classCallCheck(this, FlingGesture);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"config\", {});\n\n    _this.handlerName = 'FlingGestureHandler';\n    return _this;\n  }\n\n  _createClass(FlingGesture, [{\n    key: \"numberOfPointers\",\n    value: function numberOfPointers(pointers) {\n      this.config.numberOfPointers = pointers;\n      return this;\n    }\n  }, {\n    key: \"direction\",\n    value: function direction(_direction) {\n      this.config.direction = _direction;\n      return this;\n    }\n  }]);\n\n  return FlingGesture;\n}(BaseGesture);","map":{"version":3,"sources":["flingGesture.ts"],"names":["constructor","numberOfPointers","direction"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,WAAA;AAMA,WAAO,YAAP;AAAA;;AAAA;;AAGEA,0BAAc;AAAA;;AAAA;;AACZ;;AADY,IAAA,eAAA,gCAAA,QAAA,EAF0C,EAE1C,CAAA;;AAGZ,UAAA,WAAA,GAAA,qBAAA;AAHY;AAIb;;AAPH;AAAA;AAAA,WASEC,0BAAgB,QAAhBA,EAAmC;AACjC,WAAA,MAAA,CAAA,gBAAA,GAAA,QAAA;AACA,aAAA,IAAA;AACD;AAZH;AAAA;AAAA,WAcEC,mBAAS,UAATA,EAA6B;AAC3B,WAAA,MAAA,CAAA,SAAA,GAAA,UAAA;AACA,aAAA,IAAA;AACD;AAjBH;;AAAA;AAAA,EAAO,WAAP","sourcesContent":["import { BaseGesture, BaseGestureConfig } from './gesture';\nimport {\n  FlingGestureConfig,\n  FlingGestureHandlerEventPayload,\n} from '../FlingGestureHandler';\n\nexport class FlingGesture extends BaseGesture<FlingGestureHandlerEventPayload> {\n  public config: BaseGestureConfig & FlingGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'FlingGestureHandler';\n  }\n\n  numberOfPointers(pointers: number) {\n    this.config.numberOfPointers = pointers;\n    return this;\n  }\n\n  direction(direction: number) {\n    this.config.direction = direction;\n    return this;\n  }\n}\n\nexport type FlingGestureType = InstanceType<typeof FlingGesture>;\n"]},"metadata":{},"sourceType":"module"}