{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport { handlerIDToTag } from \"./handlersRegistry\";\nimport { toArray } from \"../utils\";\nvar commonProps = ['id', 'enabled', 'shouldCancelWhenOutside', 'hitSlop'];\nvar componentInteractionProps = ['waitFor', 'simultaneousHandlers'];\nexport var baseGestureHandlerProps = [].concat(commonProps, componentInteractionProps, ['onBegan', 'onFailed', 'onCancelled', 'onActivated', 'onEnded', 'onGestureEvent', 'onHandlerStateChange']);\nexport var baseGestureHandlerWithMonitorProps = [].concat(commonProps, ['needsPointerData', 'manualActivation']);\n\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\n\nexport function filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var filteredConfig = _objectSpread({}, defaults);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(validProps), _step; !(_step = _iterator()).done;) {\n    var key = _step.value;\n    var value = props[key];\n\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = {\n          top: value,\n          left: value,\n          bottom: value,\n          right: value\n        };\n      }\n\n      filteredConfig[key] = value;\n    }\n  }\n\n  return filteredConfig;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  handlerIDs = toArray(handlerIDs);\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n\n  return handlerIDs.map(function (handlerID) {\n    var _handlerID$current;\n\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\n\nexport function findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}","map":{"version":3,"sources":["gestureHandlerCommon.ts"],"names":["commonProps","componentInteractionProps","baseGestureHandlerProps","baseGestureHandlerWithMonitorProps","param","Object","name","defaults","filteredConfig","value","props","isConfigParam","key","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","toArray","Platform","current","handle","handlerID","handlerIDToTag","handlerTag","findNodeHandleRN"],"mappings":";;;;;;;;;;;;;;AAUA,SAAA,cAAA;AACA,SAAA,OAAA;AAEA,IAAMA,WAAW,GAAG,CAAA,IAAA,EAAA,SAAA,EAAA,yBAAA,EAApB,SAAoB,CAApB;AAOA,IAAMC,yBAAyB,GAAG,CAAA,SAAA,EAAlC,sBAAkC,CAAlC;AAEA,OAAO,IAAMC,uBAAuB,aAAG,WAAH,EAAG,yBAAH,GAAG,SAAH,EAAG,UAAH,EAAG,aAAH,EAAG,aAAH,EAAG,SAAH,EAAG,gBAAH,EAA7B,sBAA6B,EAA7B;AAYP,OAAO,IAAMC,kCAAkC,aAAG,WAAH,GAAG,kBAAH,EAAxC,kBAAwC,EAAxC;;AAgGP,SAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAqD;AAGnD,SACEC,KAAK,KAALA,SAAAA,KACCA,KAAK,KAAKC,MAAM,CAAhBD,KAAgB,CAAhBA,IACC,EAAE,gBAFJA,KAEE,CAFFA,KAGAE,IAAI,KAHJF,sBAAAA,IAIAE,IAAI,KALN,gBAAA;AAOD;;AAED,OAAO,SAAA,YAAA,CAAA,KAAA,EAAA,UAAA,EAIL;AAAA,MADAC,QACA,uEAJK,EAIL;;AACA,MAAMC,cAAc,qBAAQD,QAAR,CAApB;;AACA,uDAAA,UAAA,wCAA8B;AAAA,QAA9B,GAA8B;AAC5B,QAAIE,KAAK,GAAGC,KAAK,CAAjB,GAAiB,CAAjB;;AACA,QAAIC,aAAa,CAAA,KAAA,EAAjB,GAAiB,CAAjB,EAA+B;AAC7B,UAAIC,GAAG,KAAHA,sBAAAA,IAAkCA,GAAG,KAAzC,SAAA,EAAyD;AACvDH,QAAAA,KAAK,GAAGI,wBAAwB,CAACH,KAAK,CAAtCD,GAAsC,CAAN,CAAhCA;AADF,OAAA,MAEO,IAAIG,GAAG,KAAHA,SAAAA,IAAqB,OAAA,KAAA,KAAzB,QAAA,EAAoD;AACzDH,QAAAA,KAAK,GAAG;AAAEK,UAAAA,GAAG,EAAL,KAAA;AAAcC,UAAAA,IAAI,EAAlB,KAAA;AAA2BC,UAAAA,MAAM,EAAjC,KAAA;AAA0CC,UAAAA,KAAK,EAAER;AAAjD,SAARA;AACD;;AACDD,MAAAA,cAAc,CAAdA,GAAc,CAAdA,GAAAA,KAAAA;AACD;AACF;;AACD,SAAA,cAAA;AACD;;AAED,SAAA,wBAAA,CAAA,UAAA,EAAmD;AACjDU,EAAAA,UAAU,GAAGC,OAAO,CAApBD,UAAoB,CAApBA;;AAEA,MAAIE,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AACzB,WAAOF,UAAU,CAAVA,GAAAA,CACA;AAAA,UAAGG,OAAH,QAAGA,OAAH;AAAA,aADAH,OACA;AAAA,KADAA,EAAAA,MAAAA,CAEII,UAAAA,MAAD;AAAA,aAFV,MAEU;AAAA,KAFHJ,CAAP;AAJ+C;;AASjD,SAAO,UAAU,CAAV,GAAA,CAEFK,UAAAA,SAAD,EAAA;AAAA,QAAA,kBAAA;;AAAA,WACEC,cAAc,CAAdA,SAAc,CAAdA,KAAAA,CAAAA,kBAAAA,GAA6BD,SAAS,CAAtCC,OAAAA,MAAAA,IAAAA,IAAAA,kBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAA6BD,kBAAAA,CAA7BC,UAAAA,KAA8D,CADhE,CAAA;AAFG,GAAA,EAAA,MAAA,CAKIC,UAAAA,UAAD;AAAA,WAAwBA,UAAU,GAL5C,CAKU;AAAA,GALH,CAAP;AAMD;;AAED,OAAO,SAAA,cAAA,CAAA,IAAA,EAEkE;AACvE,MAAIL,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B,OAAA,IAAA;AAC3B,SAAOM,gBAAgB,CAAvB,IAAuB,CAAvB;AACD","sourcesContent":["// Previous types exported gesture handlers as classes which creates an interface and variable, both named the same as class.\n// Without those types, we'd introduce breaking change, forcing users to prefix every handler type specification with typeof\n// e.g. React.createRef<TapGestureHandler> -> React.createRef<typeof TapGestureHandler>.\n// See https://www.typescriptlang.org/docs/handbook/classes.html#constructor-functions for reference.\nimport * as React from 'react';\nimport { Platform, findNodeHandle as findNodeHandleRN } from 'react-native';\n\nimport { State } from '../State';\nimport { EventType } from '../EventType';\nimport { ValueOf } from '../typeUtils';\nimport { handlerIDToTag } from './handlersRegistry';\nimport { toArray } from '../utils';\n\nconst commonProps = [\n  'id',\n  'enabled',\n  'shouldCancelWhenOutside',\n  'hitSlop',\n] as const;\n\nconst componentInteractionProps = ['waitFor', 'simultaneousHandlers'] as const;\n\nexport const baseGestureHandlerProps = [\n  ...commonProps,\n  ...componentInteractionProps,\n  'onBegan',\n  'onFailed',\n  'onCancelled',\n  'onActivated',\n  'onEnded',\n  'onGestureEvent',\n  'onHandlerStateChange',\n] as const;\n\nexport const baseGestureHandlerWithMonitorProps = [\n  ...commonProps,\n  'needsPointerData',\n  'manualActivation',\n];\n\nexport interface GestureEventPayload {\n  handlerTag: number;\n  numberOfPointers: number;\n  state: ValueOf<typeof State>;\n}\n\nexport interface HandlerStateChangeEventPayload {\n  handlerTag: number;\n  numberOfPointers: number;\n  state: ValueOf<typeof State>;\n  oldState: ValueOf<typeof State>;\n}\n\nexport type HitSlop =\n  | number\n  | Partial<\n      Record<\n        'left' | 'right' | 'top' | 'bottom' | 'vertical' | 'horizontal',\n        number\n      >\n    >\n  | Record<'width' | 'left', number>\n  | Record<'width' | 'right', number>\n  | Record<'height' | 'top', number>\n  | Record<'height' | 'bottom', number>;\n\n//TODO(TS) events in handlers\n\nexport interface GestureEvent<ExtraEventPayloadT = Record<string, unknown>> {\n  nativeEvent: Readonly<GestureEventPayload & ExtraEventPayloadT>;\n}\nexport interface HandlerStateChangeEvent<\n  ExtraEventPayloadT = Record<string, unknown>\n> {\n  nativeEvent: Readonly<HandlerStateChangeEventPayload & ExtraEventPayloadT>;\n}\n\nexport type TouchData = {\n  id: number;\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n};\n\nexport type GestureTouchEvent = {\n  handlerTag: number;\n  numberOfTouches: number;\n  state: ValueOf<typeof State>;\n  eventType: EventType;\n  allTouches: TouchData[];\n  changedTouches: TouchData[];\n};\n\nexport type GestureUpdateEvent<\n  GestureEventPayloadT = Record<string, unknown>\n> = GestureEventPayload & GestureEventPayloadT;\n\nexport type GestureStateChangeEvent<\n  GestureStateChangeEventPayloadT = Record<string, unknown>\n> = HandlerStateChangeEventPayload & GestureStateChangeEventPayloadT;\n\nexport type CommonGestureConfig = {\n  enabled?: boolean;\n  shouldCancelWhenOutside?: boolean;\n  hitSlop?: HitSlop;\n};\n\n// Events payloads are types instead of interfaces due to TS limitation.\n// See https://github.com/microsoft/TypeScript/issues/15300 for more info.\nexport type BaseGestureHandlerProps<\n  ExtraEventPayloadT extends Record<string, unknown> = Record<string, unknown>\n> = CommonGestureConfig & {\n  id?: string;\n  waitFor?: React.Ref<unknown> | React.Ref<unknown>[];\n  simultaneousHandlers?: React.Ref<unknown> | React.Ref<unknown>[];\n  // TODO(TS) - fix event types\n  onBegan?: (event: HandlerStateChangeEvent) => void;\n  onFailed?: (event: HandlerStateChangeEvent) => void;\n  onCancelled?: (event: HandlerStateChangeEvent) => void;\n  onActivated?: (event: HandlerStateChangeEvent) => void;\n  onEnded?: (event: HandlerStateChangeEvent) => void;\n\n  //TODO(TS) consider using NativeSyntheticEvent\n  onGestureEvent?: (event: GestureEvent<ExtraEventPayloadT>) => void;\n  onHandlerStateChange?: (\n    event: HandlerStateChangeEvent<ExtraEventPayloadT>\n  ) => void;\n};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nexport function filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const filteredConfig = { ...defaults };\n  for (const key of validProps) {\n    let value = props[key];\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = { top: value, left: value, bottom: value, right: value };\n      }\n      filteredConfig[key] = value;\n    }\n  }\n  return filteredConfig;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  handlerIDs = toArray(handlerIDs);\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\nexport function findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n"]},"metadata":{},"sourceType":"module"}