{"ast":null,"code":"import { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { LanguageFlags } from \"./LanguageFlags\";\nimport React, { useMemo } from \"react\";\nimport { Dropdown } from \"../Dropdown\";\nimport { getLocaleFullName } from \"./getLocaleFullName\";\nimport { DropDownListItemObject, DropDownWrapperObject, LanguageLabel, InnerLink, DropDownListItemObjectSelected, DropDownWrapperMobileObject, ItemTextStyle, Flex } from \"./style\";\nimport { useBreakPointGetter } from \"../../hooks/useBreakPointGetter\";\n\nfunction LanguageSwitcher() {\n  var _useRouter = useRouter(),\n      locales = _useRouter.locales,\n      asPath = _useRouter.asPath,\n      locale = _useRouter.locale;\n\n  var getBreakPoint = useBreakPointGetter();\n  var isDesktop = getBreakPoint({\n    default: false,\n    lg: true\n  });\n  var dropdownData = useMemo(function () {\n    return locales == null ? void 0 : locales.map(function (locale) {\n      return {\n        label: React.createElement(Link, {\n          passHref: true,\n          href: asPath,\n          locale: locale\n        }, React.createElement(\"a\", {\n          style: InnerLink\n        }, React.createElement(Flex, null, React.createElement(LanguageFlags, {\n          locale: locale\n        }), isDesktop && React.createElement(LanguageLabel, null, locale ? getLocaleFullName(locale) : locale)))),\n        value: locale\n      };\n    });\n  }, [locales, asPath, isDesktop]);\n\n  if (!dropdownData) {\n    return null;\n  }\n\n  return React.createElement(Dropdown, {\n    itemPressFunction: function itemPressFunction() {\n      return null;\n    },\n    selected: locale,\n    data: dropdownData,\n    itemListAutoHeight: true,\n    highlightSelectedItem: true,\n    styles: {\n      select: isDesktop ? DropDownWrapperObject : DropDownWrapperMobileObject,\n      item: DropDownListItemObject,\n      itemSelected: DropDownListItemObjectSelected,\n      itemTextStyle: ItemTextStyle\n    }\n  });\n}\n\nexport default LanguageSwitcher;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/LanguageSwitcher/index.tsx"],"names":["useRouter","Link","LanguageFlags","React","useMemo","Dropdown","getLocaleFullName","DropDownListItemObject","DropDownWrapperObject","LanguageLabel","InnerLink","DropDownListItemObjectSelected","DropDownWrapperMobileObject","ItemTextStyle","Flex","useBreakPointGetter","LanguageSwitcher","locales","asPath","locale","getBreakPoint","isDesktop","default","lg","dropdownData","map","label","value","select","item","itemSelected","itemTextStyle"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,aAAT;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,QAAT;AACA,SAASC,iBAAT;AACA,SACEC,sBADF,EAEEC,qBAFF,EAGEC,aAHF,EAIEC,SAJF,EAKEC,8BALF,EAMEC,2BANF,EAOEC,aAPF,EAQEC,IARF;AAUA,SAASC,mBAAT;;AAEA,SAASC,gBAAT,GAA4B;AAC1B,mBAAoChB,SAAS,EAA7C;AAAA,MAAQiB,OAAR,cAAQA,OAAR;AAAA,MAAiBC,MAAjB,cAAiBA,MAAjB;AAAA,MAAyBC,MAAzB,cAAyBA,MAAzB;;AACA,MAAMC,aAAa,GAAGL,mBAAmB,EAAzC;AAEA,MAAMM,SAAS,GAAGD,aAAa,CAAC;AAAEE,IAAAA,OAAO,EAAE,KAAX;AAAkBC,IAAAA,EAAE,EAAE;AAAtB,GAAD,CAA/B;AAEA,MAAMC,YAAY,GAAGpB,OAAO,CAC1B;AAAA,WACEa,OADF,oBACEA,OAAO,CAAEQ,GAAT,CAAa,UAACN,MAAD;AAAA,aAAa;AACxBO,QAAAA,KAAK,EACH,oBAAC,IAAD;AAAM,UAAA,QAAQ,MAAd;AAAe,UAAA,IAAI,EAAER,MAArB;AAA6B,UAAA,MAAM,EAAEC;AAArC,WACE;AAAG,UAAA,KAAK,EAAET;AAAV,WACE,oBAAC,IAAD,QACE,oBAAC,aAAD;AAAe,UAAA,MAAM,EAAES;AAAvB,UADF,EAEGE,SAAS,IACR,oBAAC,aAAD,QACGF,MAAM,GAAGb,iBAAiB,CAACa,MAAD,CAApB,GAA+BA,MADxC,CAHJ,CADF,CADF,CAFsB;AAexBQ,QAAAA,KAAK,EAAER;AAfiB,OAAb;AAAA,KAAb,CADF;AAAA,GAD0B,EAmB1B,CAACF,OAAD,EAAUC,MAAV,EAAkBG,SAAlB,CAnB0B,CAA5B;;AAsBA,MAAI,CAACG,YAAL,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,SACE,oBAAC,QAAD;AACE,IAAA,iBAAiB,EAAE;AAAA,aAAM,IAAN;AAAA,KADrB;AAEE,IAAA,QAAQ,EAAEL,MAFZ;AAGE,IAAA,IAAI,EAAEK,YAHR;AAIE,IAAA,kBAAkB,MAJpB;AAKE,IAAA,qBAAqB,MALvB;AAME,IAAA,MAAM,EAAE;AACNI,MAAAA,MAAM,EAAEP,SAAS,GAAGb,qBAAH,GAA2BI,2BADtC;AAENiB,MAAAA,IAAI,EAAEtB,sBAFA;AAGNuB,MAAAA,YAAY,EAAEnB,8BAHR;AAINoB,MAAAA,aAAa,EAAElB;AAJT;AANV,IADF;AAeD;;AAED,eAAeG,gBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { LanguageFlags } from \"./LanguageFlags\";\nimport React, { useMemo } from \"react\";\nimport { Dropdown } from \"../Dropdown\";\nimport { getLocaleFullName } from \"./getLocaleFullName\";\nimport {\n  DropDownListItemObject,\n  DropDownWrapperObject,\n  LanguageLabel,\n  InnerLink,\n  DropDownListItemObjectSelected,\n  DropDownWrapperMobileObject,\n  ItemTextStyle,\n  Flex,\n} from \"./style\";\nimport { useBreakPointGetter } from \"../../hooks/useBreakPointGetter\";\n\nfunction LanguageSwitcher() {\n  const { locales, asPath, locale } = useRouter();\n  const getBreakPoint = useBreakPointGetter();\n\n  const isDesktop = getBreakPoint({ default: false, lg: true });\n\n  const dropdownData = useMemo(\n    () =>\n      locales?.map((locale) => ({\n        label: (\n          <Link passHref href={asPath} locale={locale}>\n            <a style={InnerLink}>\n              <Flex>\n                <LanguageFlags locale={locale} />\n                {isDesktop && (\n                  <LanguageLabel>\n                    {locale ? getLocaleFullName(locale) : locale}\n                  </LanguageLabel>\n                )}\n              </Flex>\n            </a>\n          </Link>\n        ),\n        value: locale,\n      })),\n    [locales, asPath, isDesktop]\n  );\n\n  if (!dropdownData) {\n    return null;\n  }\n\n  return (\n    <Dropdown\n      itemPressFunction={() => null}\n      selected={locale}\n      data={dropdownData}\n      itemListAutoHeight\n      highlightSelectedItem\n      styles={{\n        select: isDesktop ? DropDownWrapperObject : DropDownWrapperMobileObject,\n        item: DropDownListItemObject,\n        itemSelected: DropDownListItemObjectSelected,\n        itemTextStyle: ItemTextStyle,\n      }}\n    />\n  );\n}\n\nexport default LanguageSwitcher;\n"]},"metadata":{},"sourceType":"module"}