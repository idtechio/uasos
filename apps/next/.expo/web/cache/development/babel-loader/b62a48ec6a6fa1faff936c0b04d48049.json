{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport styled from \"styled-components/native\";\nexport var Button = styled.Pressable(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n\\tbackground-color: \", \";\\n\\tborder-radius: 50px;\\n\\tpadding: 16px 25px,\\n\\ttext-align: center;\\n\\tdisplay: inline-block;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\t&:hover {\\n\\t\\topacity: 0.7\\n\\t}\\n\"])), function (_ref) {\n  var theme = _ref.theme,\n      colorOpposite = _ref.colorOpposite;\n  return colorOpposite ? theme.colors.textOnCta : theme.colors.cta;\n});\nexport var Text = styled.Text(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  font-weight: 700;\\n  text-align: center;\\n  color: \", \";\\n  width: 100%;\\n  justify-content: center;\\n  display: flex;\\n\"])), function (_ref2) {\n  var theme = _ref2.theme,\n      colorOpposite = _ref2.colorOpposite;\n  return colorOpposite ? theme.colors.cta : theme.colors.textOnCta;\n});","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Buttons/ButtonCta/style.tsx"],"names":["styled","Button","Pressable","theme","colorOpposite","colors","textOnCta","cta","Text"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,0BAAnB;AAGA,OAAO,IAAMC,MAAM,GAAGD,MAAM,CAACE,SAAV,gSAIE;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,aAAV,QAAUA,aAAV;AAAA,SACjBA,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAaC,SAAhB,GAA4BH,KAAK,CAACE,MAAN,CAAaE,GADrC;AAAA,CAJF,CAAZ;AAiBP,OAAO,IAAMC,IAAI,GAAGR,MAAM,CAACQ,IAAV,yMAGN;AAAA,MAAGL,KAAH,SAAGA,KAAH;AAAA,MAAUC,aAAV,SAAUA,aAAV;AAAA,SACPA,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAaE,GAAhB,GAAsBJ,KAAK,CAACE,MAAN,CAAaC,SADzC;AAAA,CAHM,CAAV","sourcesContent":["import styled from \"styled-components/native\";\nimport { Theme } from \"../../../style/theme.config\";\n\nexport const Button = styled.Pressable<{\n  colorOpposite?: boolean;\n  theme: Theme;\n}>`\n\tbackground-color: ${({ theme, colorOpposite }) =>\n    colorOpposite ? theme.colors.textOnCta : theme.colors.cta};\n\tborder-radius: 50px;\n\tpadding: 16px 25px,\n\ttext-align: center;\n\tdisplay: inline-block;\n\tjustify-content: center;\n\talign-items: center;\n\t&:hover {\n\t\topacity: 0.7\n\t}\n`;\n\nexport const Text = styled.Text<{ colorOpposite?: boolean; theme: Theme }>`\n  font-weight: 700;\n  text-align: center;\n  color: ${({ theme, colorOpposite }) =>\n    colorOpposite ? theme.colors.cta : theme.colors.textOnCta};\n  width: 100%;\n  justify-content: center;\n  display: flex;\n`;\n"]},"metadata":{},"sourceType":"module"}