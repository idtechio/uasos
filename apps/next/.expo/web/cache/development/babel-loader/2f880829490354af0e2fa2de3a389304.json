{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getFirebaseToken } from \"../helpers/getFirebaseToken\";\nexport var reportListItem = function reportListItem(_ref) {\n  var matchID, targetType, targetID, reportType, token, res;\n  return _regeneratorRuntime.async(function reportListItem$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          matchID = _ref.matchID, targetType = _ref.targetType, targetID = _ref.targetID, reportType = _ref.reportType;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getFirebaseToken());\n\n        case 3:\n          token = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fetch(process.env.NEXT_PUBLIC_DOMAIN + \"api/listing/report\", {\n            method: \"POST\",\n            headers: {\n              Authorization: \"Bearer \" + token,\n              \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify(_objectSpread(_objectSpread(_objectSpread({\n              match_id: matchID\n            }, targetType == \"hosts\" && {\n              host_id: targetID\n            }), targetType == \"guests\" && {\n              guest_id: targetID\n            }), {}, {\n              report_type: reportType\n            }))\n          }));\n\n        case 6:\n          res = _context.sent;\n\n          if (!(res.status != 200)) {\n            _context.next = 9;\n            break;\n          }\n\n          throw new Error(\"Couldn't report item.\");\n\n        case 9:\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 11:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/client-api/report.ts"],"names":["getFirebaseToken","reportListItem","matchID","targetType","targetID","reportType","token","fetch","process","env","NEXT_PUBLIC_DOMAIN","method","headers","Authorization","body","JSON","stringify","match_id","host_id","guest_id","report_type","res","status","Error","json"],"mappings":";;;;;;;AAAA,SAASA,gBAAT;AASA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BC,UAAAA,OAD4B,QAC5BA,OAD4B,EAE5BC,UAF4B,QAE5BA,UAF4B,EAG5BC,QAH4B,QAG5BA,QAH4B,EAI5BC,UAJ4B,QAI5BA,UAJ4B;AAAA;AAAA,2CAMRL,gBAAgB,EANR;;AAAA;AAMtBM,UAAAA,KANsB;AAAA;AAAA,2CAQVC,KAAK,CAClBC,OAAO,CAACC,GAAR,CAAYC,kBADM,yBAErB;AACEC,YAAAA,MAAM,EAAE,MADV;AAEEC,YAAAA,OAAO,EAAE;AACPC,cAAAA,aAAa,cAAYP,KADlB;AAEP,8BAAgB;AAFT,aAFX;AAMEQ,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL;AACJC,cAAAA,QAAQ,EAAEf;AADN,eAEAC,UAAU,IAAI,OAAd,IAAyB;AAAEe,cAAAA,OAAO,EAAEd;AAAX,aAFzB,GAGAD,UAAU,IAAI,QAAd,IAA0B;AAAEgB,cAAAA,QAAQ,EAAEf;AAAZ,aAH1B;AAIJgB,cAAAA,WAAW,EAAEf;AAJT;AANR,WAFqB,CARK;;AAAA;AAQtBgB,UAAAA,GARsB;;AAAA,gBAyBxBA,GAAG,CAACC,MAAJ,IAAc,GAzBU;AAAA;AAAA;AAAA;;AAAA,gBA0BpB,IAAIC,KAAJ,CAAU,uBAAV,CA1BoB;;AAAA;AAAA;AAAA,2CA6BfF,GAAG,CAACG,IAAJ,EA7Be;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["import { getFirebaseToken } from \"../helpers/getFirebaseToken\";\n\nexport type ReportListItemDTO = {\n  matchID: string;\n  targetID: string;\n  targetType: \"guests\" | \"hosts\";\n  reportType: string;\n};\n\nexport const reportListItem = async ({\n  matchID,\n  targetType,\n  targetID,\n  reportType,\n}: ReportListItemDTO) => {\n  const token = await getFirebaseToken();\n\n  const res = await fetch(\n    `${process.env.NEXT_PUBLIC_DOMAIN}api/listing/report`,\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        match_id: matchID,\n        ...(targetType == \"hosts\" && { host_id: targetID }),\n        ...(targetType == \"guests\" && { guest_id: targetID }),\n        report_type: reportType,\n      }),\n    }\n  );\n\n  if (res.status != 200) {\n    throw new Error(\"Couldn't report item.\");\n  }\n\n  return await res.json();\n};\n"]},"metadata":{},"sourceType":"module"}