{"ast":null,"code":"import React from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useRouter } from \"next/router\";\nimport { generateLanguageDropdownList } from \"./helpers\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Dropdown } from \"../../Dropdown\";\nimport { Error } from \"../style\";\nimport InputControl from \"../../Forms/InputControl\";\n\nvar FormLanguageDropdown = function FormLanguageDropdown(props) {\n  var name = props.name,\n      errorMsg = props.errorMsg,\n      rules = props.rules,\n      error = props.error,\n      placeholder = props.placeholder;\n\n  var _useRouter = useRouter(),\n      locales = _useRouter.locales;\n\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control;\n\n  if (!locales) {\n    return null;\n  }\n\n  return React.createElement(Controller, {\n    control: control,\n    rules: rules,\n    render: function render(_ref) {\n      var _ref$field = _ref.field,\n          onChange = _ref$field.onChange,\n          onBlur = _ref$field.onBlur,\n          value = _ref$field.value;\n      return React.createElement(InputControl, null, React.createElement(Dropdown, {\n        data: generateLanguageDropdownList(locales),\n        placeholder: placeholder,\n        itemPressFunction: onChange,\n        onBlur: onBlur,\n        selected: value,\n        error: !!error,\n        styles: dropdownStyles\n      }), error && React.createElement(Error, null, errorMsg));\n    },\n    name: name\n  });\n};\n\nvar dropdownStyles = StyleSheet.create({\n  select: {\n    paddingTop: \"14px\",\n    paddingBottom: \"14px\",\n    height: \"54px\"\n  }\n});\nexport default FormLanguageDropdown;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Inputs/FormLanguageDropdown/index.tsx"],"names":["React","Controller","useFormContext","useRouter","generateLanguageDropdownList","Dropdown","Error","InputControl","FormLanguageDropdown","props","name","errorMsg","rules","error","placeholder","locales","control","field","onChange","onBlur","value","dropdownStyles","StyleSheet","create","select","paddingTop","paddingBottom","height"],"mappings":"AAAA,OAAOA,KAAP,MAA2B,OAA3B;AACA,SAASC,UAAT,EAAiCC,cAAjC,QAAuD,iBAAvD;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,4BAAT;;AAEA,SAASC,QAAT;AACA,SAASC,KAAT;AACA,OAAOC,YAAP;;AAaA,IAAMC,oBAAgC,GAAG,SAAnCA,oBAAmC,CAACC,KAAD,EAAW;AAClD,MAAQC,IAAR,GAAsDD,KAAtD,CAAQC,IAAR;AAAA,MAAcC,QAAd,GAAsDF,KAAtD,CAAcE,QAAd;AAAA,MAAwBC,KAAxB,GAAsDH,KAAtD,CAAwBG,KAAxB;AAAA,MAA+BC,KAA/B,GAAsDJ,KAAtD,CAA+BI,KAA/B;AAAA,MAAsCC,WAAtC,GAAsDL,KAAtD,CAAsCK,WAAtC;;AACA,mBAAoBX,SAAS,EAA7B;AAAA,MAAQY,OAAR,cAAQA,OAAR;;AACA,wBAAoBb,cAAc,EAAlC;AAAA,MAAQc,OAAR,mBAAQA,OAAR;;AAEA,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEC,OADX;AAEE,IAAA,KAAK,EAAEJ,KAFT;AAGE,IAAA,MAAM,EAAE;AAAA,4BAAGK,KAAH;AAAA,UAAYC,QAAZ,cAAYA,QAAZ;AAAA,UAAsBC,MAAtB,cAAsBA,MAAtB;AAAA,UAA8BC,KAA9B,cAA8BA,KAA9B;AAAA,aACN,oBAAC,YAAD,QACE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAEhB,4BAA4B,CAACW,OAAD,CADpC;AAEE,QAAA,WAAW,EAAED,WAFf;AAGE,QAAA,iBAAiB,EAAEI,QAHrB;AAIE,QAAA,MAAM,EAAEC,MAJV;AAKE,QAAA,QAAQ,EAAEC,KALZ;AAME,QAAA,KAAK,EAAE,CAAC,CAACP,KANX;AAOE,QAAA,MAAM,EAAEQ;AAPV,QADF,EAUGR,KAAK,IAAI,oBAAC,KAAD,QAAQF,QAAR,CAVZ,CADM;AAAA,KAHV;AAiBE,IAAA,IAAI,EAAED;AAjBR,IADF;AAqBD,CA9BD;;AAgCA,IAAMW,cAAc,GAAGC,UAAU,CAACC,MAAX,CAAkB;AACvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,UAAU,EAAE,MADN;AAENC,IAAAA,aAAa,EAAE,MAFT;AAGNC,IAAAA,MAAM,EAAE;AAHF;AAD+B,CAAlB,CAAvB;AAQA,eAAenB,oBAAf","sourcesContent":["import React, { VFC } from \"react\";\nimport { Controller, FieldError, useFormContext } from \"react-hook-form\";\nimport { FormKey } from \"../../../helpers/FormTypes\";\nimport { useRouter } from \"next/router\";\nimport { generateLanguageDropdownList } from \"./helpers\";\nimport { StyleSheet } from \"react-native\";\nimport { Dropdown } from \"../../Dropdown\";\nimport { Error } from \"../style\";\nimport InputControl from \"../../Forms/InputControl\";\n\ntype Props = {\n  name: FormKey;\n  label?: string;\n  zIndex?: number;\n  placeholder?: string;\n  error?: FieldError;\n  multiSelect?: boolean;\n  errorMsg?: string;\n  onChange?: (selected: string | string[]) => void;\n} & Pick<React.ComponentProps<typeof Controller>, \"rules\">;\n\nconst FormLanguageDropdown: VFC<Props> = (props) => {\n  const { name, errorMsg, rules, error, placeholder } = props;\n  const { locales } = useRouter();\n  const { control } = useFormContext();\n\n  if (!locales) {\n    return null;\n  }\n\n  return (\n    <Controller\n      control={control}\n      rules={rules}\n      render={({ field: { onChange, onBlur, value } }) => (\n        <InputControl>\n          <Dropdown\n            data={generateLanguageDropdownList(locales)}\n            placeholder={placeholder}\n            itemPressFunction={onChange}\n            onBlur={onBlur}\n            selected={value}\n            error={!!error}\n            styles={dropdownStyles}\n          />\n          {error && <Error>{errorMsg}</Error>}\n        </InputControl>\n      )}\n      name={name}\n    />\n  );\n};\n\nconst dropdownStyles = StyleSheet.create({\n  select: {\n    paddingTop: \"14px\",\n    paddingBottom: \"14px\",\n    height: \"54px\",\n  },\n});\n\nexport default FormLanguageDropdown;\n"]},"metadata":{},"sourceType":"module"}