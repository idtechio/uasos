{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { ContinousBaseGesture } from \"./gesture\";\n\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  var changePayload;\n\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY\n    };\n  }\n\n  return _objectSpread(_objectSpread({}, current), changePayload);\n}\n\nexport var PanGesture = function (_ContinousBaseGesture) {\n  _inherits(PanGesture, _ContinousBaseGesture);\n\n  var _super = _createSuper(PanGesture);\n\n  function PanGesture() {\n    var _this;\n\n    _classCallCheck(this, PanGesture);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"config\", {});\n\n    _this.handlerName = 'PanGestureHandler';\n    return _this;\n  }\n\n  _createClass(PanGesture, [{\n    key: \"activeOffsetY\",\n    value: function activeOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetYStart = offset[0];\n        this.config.activeOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetYStart = offset;\n      } else {\n        this.config.activeOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"activeOffsetX\",\n    value: function activeOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetXStart = offset[0];\n        this.config.activeOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetXStart = offset;\n      } else {\n        this.config.activeOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetY\",\n    value: function failOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetYStart = offset[0];\n        this.config.failOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetYStart = offset;\n      } else {\n        this.config.failOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetX\",\n    value: function failOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetXStart = offset[0];\n        this.config.failOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetXStart = offset;\n      } else {\n        this.config.failOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"minPointers\",\n    value: function minPointers(_minPointers) {\n      this.config.minPointers = _minPointers;\n      return this;\n    }\n  }, {\n    key: \"maxPointers\",\n    value: function maxPointers(_maxPointers) {\n      this.config.maxPointers = _maxPointers;\n      return this;\n    }\n  }, {\n    key: \"minDistance\",\n    value: function minDistance(distance) {\n      this.config.minDist = distance;\n      return this;\n    }\n  }, {\n    key: \"minVelocity\",\n    value: function minVelocity(velocity) {\n      this.config.minVelocity = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityX\",\n    value: function minVelocityX(velocity) {\n      this.config.minVelocityX = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityY\",\n    value: function minVelocityY(velocity) {\n      this.config.minVelocityY = velocity;\n      return this;\n    }\n  }, {\n    key: \"averageTouches\",\n    value: function averageTouches(value) {\n      this.config.avgTouches = value;\n      return this;\n    }\n  }, {\n    key: \"enableTrackpadTwoFingerGesture\",\n    value: function enableTrackpadTwoFingerGesture(value) {\n      this.config.enableTrackpadTwoFingerGesture = value;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return _get(_getPrototypeOf(PanGesture.prototype), \"onChange\", this).call(this, callback);\n    }\n  }]);\n\n  return PanGesture;\n}(ContinousBaseGesture);","map":{"version":3,"sources":["panGesture.ts"],"names":["previous","changePayload","changeX","current","changeY","translationY","constructor","activeOffsetY","Array","offset","activeOffsetX","failOffsetY","failOffsetX","minPointers","maxPointers","minDistance","minVelocity","minVelocityX","minVelocityY","averageTouches","enableTrackpadTwoFingerGesture","onChange"],"mappings":"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","sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport {\n  PanGestureConfig,\n  PanGestureHandlerEventPayload,\n} from '../PanGestureHandler';\n\ntype PanGestureChangeEventPayload = {\n  changeX: number;\n  changeY: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PanGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PanGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PanGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY,\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PanGesture extends ContinousBaseGesture<\n  PanGestureHandlerEventPayload,\n  PanGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  activeOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  activeOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PanGestureHandlerEventPayload & PanGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"]},"metadata":{},"sourceType":"module"}