{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject;\n\nimport React from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport FormDropdown from \"./FormDropdown\";\nimport { LanguageFlags } from \"../LanguageSwitcher/LanguageFlags\";\nimport styled from \"styled-components/native\";\nvar countriesData = [{\n  icon: \"pl\",\n  label: \"hostAdd.countries.poland\",\n  value: \"poland\"\n}, {\n  icon: \"hu\",\n  label: \"hostAdd.countries.hungary\",\n  value: \"hungary\"\n}, {\n  icon: \"cs\",\n  label: \"hostAdd.countries.czechia\",\n  value: \"czechia\"\n}, {\n  icon: \"sk\",\n  label: \"hostAdd.countries.slovakia\",\n  value: \"slovakia\"\n}, {\n  icon: \"ro\",\n  label: \"hostAdd.countries.romania\",\n  value: \"romania\"\n}];\n\nvar FormTextInput = function FormTextInput(props) {\n  var name = props.name,\n      label = props.label,\n      errorMsg = props.errorMsg,\n      rules = props.rules,\n      error = props.error,\n      zIndex = props.zIndex,\n      placeholder = props.placeholder,\n      multiSelect = props.multiSelect;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var countryDropdownList = countriesData.map(function (country) {\n    return {\n      label: React.createElement(FlexAlignCenter, null, React.createElement(LanguageFlags, {\n        locale: country.icon\n      }), React.createElement(\"span\", {\n        style: {\n          marginLeft: 5\n        }\n      }, t(country.label))),\n      value: country.value\n    };\n  });\n\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control;\n\n  return React.createElement(Controller, {\n    control: control,\n    rules: rules,\n    render: function render() {\n      return React.createElement(FormDropdown, {\n        zIndex: zIndex,\n        data: countryDropdownList,\n        name: name,\n        placeholder: placeholder,\n        rules: rules,\n        error: error,\n        label: label,\n        errorMsg: errorMsg,\n        multiSelect: multiSelect\n      });\n    },\n    name: name\n  });\n};\n\nexport default FormTextInput;\nvar FlexAlignCenter = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  flex-direction: row;\\n  align-items: center;\\n\"])));","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Inputs/FormCountryDropdown.tsx"],"names":["React","Controller","useFormContext","useTranslation","FormDropdown","LanguageFlags","styled","countriesData","icon","label","value","FormTextInput","props","name","errorMsg","rules","error","zIndex","placeholder","multiSelect","t","countryDropdownList","map","country","marginLeft","control","FlexAlignCenter","View"],"mappings":";;;;AAAA,OAAOA,KAAP,MAA2B,OAA3B;AACA,SAASC,UAAT,EAAiCC,cAAjC,QAAuD,iBAAvD;AAGA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,YAAP;AACA,SAASC,aAAT;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAaA,IAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,KAAK,EAAE,0BAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CADoB,EAMpB;AACEF,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,KAAK,EAAE,2BAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CANoB,EAWpB;AAAEF,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,KAAK,EAAE,2BAArB;AAAkDC,EAAAA,KAAK,EAAE;AAAzD,CAXoB,EAYpB;AACEF,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,KAAK,EAAE,4BAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAZoB,EAiBpB;AACEF,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,KAAK,EAAE,2BAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAjBoB,CAAtB;;AAwBA,IAAMC,aAAyB,GAAG,SAA5BA,aAA4B,CAACC,KAAD,EAAW;AAC3C,MACEC,IADF,GASID,KATJ,CACEC,IADF;AAAA,MAEEJ,KAFF,GASIG,KATJ,CAEEH,KAFF;AAAA,MAGEK,QAHF,GASIF,KATJ,CAGEE,QAHF;AAAA,MAIEC,KAJF,GASIH,KATJ,CAIEG,KAJF;AAAA,MAKEC,KALF,GASIJ,KATJ,CAKEI,KALF;AAAA,MAMEC,MANF,GASIL,KATJ,CAMEK,MANF;AAAA,MAOEC,WAPF,GASIN,KATJ,CAOEM,WAPF;AAAA,MAQEC,WARF,GASIP,KATJ,CAQEO,WARF;;AAWA,wBAAchB,cAAc,EAA5B;AAAA,MAAQiB,CAAR,mBAAQA,CAAR;;AAEA,MAAMC,mBAAmB,GAAGd,aAAa,CAACe,GAAd,CAAkB,UAACC,OAAD;AAAA,WAAc;AAC1Dd,MAAAA,KAAK,EACH,oBAAC,eAAD,QACE,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAEc,OAAO,CAACf;AAA/B,QADF,EAEE;AAAM,QAAA,KAAK,EAAE;AAAEgB,UAAAA,UAAU,EAAE;AAAd;AAAb,SAAiCJ,CAAC,CAACG,OAAO,CAACd,KAAT,CAAlC,CAFF,CAFwD;AAO1DC,MAAAA,KAAK,EAAEa,OAAO,CAACb;AAP2C,KAAd;AAAA,GAAlB,CAA5B;;AAUA,wBAAoBR,cAAc,EAAlC;AAAA,MAAQuB,OAAR,mBAAQA,OAAR;;AACA,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,KAAK,EAAEV,KAFT;AAGE,IAAA,MAAM,EAAE;AAAA,aACN,oBAAC,YAAD;AACE,QAAA,MAAM,EAAEE,MADV;AAEE,QAAA,IAAI,EAAEI,mBAFR;AAGE,QAAA,IAAI,EAAER,IAHR;AAIE,QAAA,WAAW,EAAEK,WAJf;AAKE,QAAA,KAAK,EAAEH,KALT;AAME,QAAA,KAAK,EAAEC,KANT;AAOE,QAAA,KAAK,EAAEP,KAPT;AAQE,QAAA,QAAQ,EAAEK,QARZ;AASE,QAAA,WAAW,EAAEK;AATf,QADM;AAAA,KAHV;AAgBE,IAAA,IAAI,EAAEN;AAhBR,IADF;AAoBD,CA7CD;;AA8CA,eAAeF,aAAf;AAEA,IAAMe,eAAe,GAAGpB,MAAM,CAACqB,IAAV,4HAArB","sourcesContent":["import React, { VFC } from \"react\";\nimport { Controller, FieldError, useFormContext } from \"react-hook-form\";\n\nimport { FormKey } from \"../../helpers/FormTypes\";\nimport { useTranslation } from \"react-i18next\";\nimport FormDropdown from \"./FormDropdown\";\nimport { LanguageFlags } from \"../LanguageSwitcher/LanguageFlags\";\nimport styled from \"styled-components/native\";\n\ntype Props = {\n  name: FormKey;\n  label?: string;\n  zIndex?: number;\n  placeholder?: string;\n  error?: FieldError;\n  multiSelect?: boolean;\n  errorMsg?: string;\n  onChange?: (selected: string | string[]) => void;\n} & Pick<React.ComponentProps<typeof Controller>, \"rules\">;\n\nconst countriesData = [\n  {\n    icon: \"pl\",\n    label: \"hostAdd.countries.poland\",\n    value: \"poland\",\n  },\n  {\n    icon: \"hu\",\n    label: \"hostAdd.countries.hungary\",\n    value: \"hungary\",\n  },\n  { icon: \"cs\", label: \"hostAdd.countries.czechia\", value: \"czechia\" },\n  {\n    icon: \"sk\",\n    label: \"hostAdd.countries.slovakia\",\n    value: \"slovakia\",\n  },\n  {\n    icon: \"ro\",\n    label: \"hostAdd.countries.romania\",\n    value: \"romania\",\n  },\n];\n\nconst FormTextInput: VFC<Props> = (props) => {\n  const {\n    name,\n    label,\n    errorMsg,\n    rules,\n    error,\n    zIndex,\n    placeholder,\n    multiSelect,\n  } = props;\n\n  const { t } = useTranslation();\n\n  const countryDropdownList = countriesData.map((country) => ({\n    label: (\n      <FlexAlignCenter>\n        <LanguageFlags locale={country.icon} />\n        <span style={{ marginLeft: 5 }}>{t(country.label)}</span>\n      </FlexAlignCenter>\n    ),\n    value: country.value,\n  }));\n\n  const { control } = useFormContext();\n  return (\n    <Controller\n      control={control}\n      rules={rules}\n      render={() => (\n        <FormDropdown\n          zIndex={zIndex}\n          data={countryDropdownList}\n          name={name}\n          placeholder={placeholder}\n          rules={rules}\n          error={error}\n          label={label}\n          errorMsg={errorMsg}\n          multiSelect={multiSelect}\n        />\n      )}\n      name={name}\n    />\n  );\n};\nexport default FormTextInput;\n\nconst FlexAlignCenter = styled.View`\n  flex-direction: row;\n  align-items: center;\n`;\n"]},"metadata":{},"sourceType":"module"}