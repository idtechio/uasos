{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport GestureHandler from \"./GestureHandler\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\n\nvar DraggingGestureHandler = function (_GestureHandler) {\n  _inherits(DraggingGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(DraggingGestureHandler);\n\n  function DraggingGestureHandler() {\n    _classCallCheck(this, DraggingGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DraggingGestureHandler, [{\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY,\n          velocityX = _ref.velocityX,\n          velocityY = _ref.velocityY,\n          _ref$center = _ref.center,\n          x = _ref$center.x,\n          y = _ref$center.y;\n      var rect = this.view.getBoundingClientRect();\n      var ratio = PixelRatio.get();\n      return {\n        translationX: deltaX - (this.__initialX || 0),\n        translationY: deltaY - (this.__initialY || 0),\n        absoluteX: x,\n        absoluteY: y,\n        velocityX: velocityX * ratio,\n        velocityY: velocityY * ratio,\n        x: x - rect.left,\n        y: y - rect.top\n      };\n    }\n  }]);\n\n  return DraggingGestureHandler;\n}(GestureHandler);\n\nexport default DraggingGestureHandler;","map":{"version":3,"sources":["DraggingGestureHandler.ts"],"names":["shouldEnableGestureOnSetup","transformNativeEvent","center","y","rect","ratio","PixelRatio","translationX","deltaX","translationY","deltaY","absoluteX","absoluteY","velocityX","velocityY","x","top"],"mappings":";;;;;;;;;;AAEA,OAAA,cAAA;;;IAGA,sB;;;;;;;;;;;;;SACMA,eAA6B;AAC/B,aAAA,IAAA;AACD;;;WAEDC,oCAMmB;AAAA,UANE,MAMF,QANE,MAMF;AAAA,UANE,MAMF,QANE,MAMF;AAAA,UANE,SAMF,QANE,SAMF;AAAA,UANE,SAMF,QANE,SAMF;AAAA,6BADjBC,MACiB;AAAA,UADT,CACS,eADT,CACS;AAAA,UADJC,CACI,eADJA,CACI;AAEjB,UAAMC,IAAI,GAAG,KAAA,IAAA,CAAb,qBAAa,EAAb;AACA,UAAMC,KAAK,GAAGC,UAAU,CAAxB,GAAcA,EAAd;AACA,aAAO;AACLC,QAAAA,YAAY,EAAEC,MAAM,IAAI,KAAA,UAAA,IADnB,CACe,CADf;AAELC,QAAAA,YAAY,EAAEC,MAAM,IAAI,KAAA,UAAA,IAFnB,CAEe,CAFf;AAGLC,QAAAA,SAAS,EAHJ,CAAA;AAILC,QAAAA,SAAS,EAJJ,CAAA;AAKLC,QAAAA,SAAS,EAAEA,SAAS,GALf,KAAA;AAMLC,QAAAA,SAAS,EAAEA,SAAS,GANf,KAAA;AAOLC,QAAAA,CAAC,EAAEA,CAAC,GAAGX,IAAI,CAPN,IAAA;AAQLD,QAAAA,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACY;AARP,OAAP;AAUD;;;;EAzBH,c;;AA4BA,eAAA,sBAAA","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler, { HammerInputExt } from './GestureHandler';\nimport { PixelRatio } from 'react-native';\n\nabstract class DraggingGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  transformNativeEvent({\n    deltaX,\n    deltaY,\n    velocityX,\n    velocityY,\n    center: { x, y },\n  }: HammerInputExt) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const ratio = PixelRatio.get();\n    return {\n      translationX: deltaX - (this.__initialX || 0),\n      translationY: deltaY - (this.__initialY || 0),\n      absoluteX: x,\n      absoluteY: y,\n      velocityX: velocityX * ratio,\n      velocityY: velocityY * ratio,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n}\n\nexport default DraggingGestureHandler;\n"]},"metadata":{},"sourceType":"module"}