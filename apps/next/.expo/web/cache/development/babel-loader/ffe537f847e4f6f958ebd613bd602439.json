{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getProviders, getCsrfToken } from \"next-auth/react\";\nimport { serverSideTranslations } from \"next-i18next/serverSideTranslations\";\nimport LoginForm from \"../src/components/FormLogin\";\nimport FormRegisterWithSocials from \"../src/components/FormRegisterWithSocials\";\nimport AppBack from \"../src/components/AppBack\";\nimport { Routes } from \"../src/consts/router\";\nimport { withSession } from \"../src/helpers/withSession\";\nimport { CompositionAppBody } from \"../src/components/Compositions\";\nimport React, { useContext } from \"react\";\nimport { AuthContext } from \"./_app\";\nimport Redirect from \"../src/components/Redirect\";\nimport CardModal from \"../src/components/CardModal\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\n\nvar SignIn = function SignIn(_ref) {\n  var providers = _ref.providers,\n      csrfToken = _ref.csrfToken;\n\n  var _useContext = useContext(AuthContext),\n      identity = _useContext.identity,\n      loaded = _useContext.loaded;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      mounted = _useState2[0],\n      setMounted = _useState2[1];\n\n  return React.createElement(CompositionAppBody, null, React.createElement(AppBack, {\n    to: Routes.HOMEPAGE\n  }), loaded ? identity ? identity != null && identity.phoneNumber ? React.createElement(Redirect, {\n    path: \"/dashboard\"\n  }) : React.createElement(FormRegisterWithSocials, null) : React.createElement(LoginForm, {\n    providers: providers,\n    csrfToken: csrfToken\n  }) : React.createElement(CardModal, {\n    closeable: false\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\"\n  })));\n};\n\nexport var getServerSideProps = withSession(function _callee(_ref2, session) {\n  var locale, providers, csrfToken;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          locale = _ref2.locale;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getProviders());\n\n        case 3:\n          providers = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(getCsrfToken());\n\n        case 6:\n          csrfToken = _context.sent;\n          _context.t0 = _objectSpread;\n          _context.t1 = {\n            session: session,\n            providers: providers,\n            csrfToken: csrfToken\n          };\n          _context.t2 = locale;\n\n          if (!_context.t2) {\n            _context.next = 14;\n            break;\n          }\n\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(serverSideTranslations(locale));\n\n        case 13:\n          _context.t2 = _context.sent;\n\n        case 14:\n          _context.t3 = _context.t2;\n          _context.t4 = (0, _context.t0)(_context.t1, _context.t3);\n          return _context.abrupt(\"return\", {\n            props: _context.t4\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nexport default SignIn;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/pages/signin.tsx"],"names":["getProviders","getCsrfToken","serverSideTranslations","LoginForm","FormRegisterWithSocials","AppBack","Routes","withSession","CompositionAppBody","React","useContext","AuthContext","Redirect","CardModal","SignIn","providers","csrfToken","identity","loaded","useState","mounted","setMounted","HOMEPAGE","phoneNumber","getServerSideProps","session","locale","props"],"mappings":";;;;;;;;AAAA,SACEA,YADF,EAEEC,YAFF,QAKO,iBALP;AAMA,SAASC,sBAAT,QAAuC,qCAAvC;AAEA,OAAOC,SAAP;AACA,OAAOC,uBAAP;AACA,OAAOC,OAAP;AAEA,SAASC,MAAT;AACA,SAASC,WAAT;AAEA,SAASC,kBAAT;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,WAAT;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP;;;AAYA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAA2C;AAAA,MAAxCC,SAAwC,QAAxCA,SAAwC;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;;AACxD,oBAA6BN,UAAU,CAACC,WAAD,CAAvC;AAAA,MAAQM,QAAR,eAAQA,QAAR;AAAA,MAAkBC,MAAlB,eAAkBA,MAAlB;;AACA,kBAA8BC,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,SACE,oBAAC,kBAAD,QACE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAEf,MAAM,CAACgB;AAApB,IADF,EAEGJ,MAAM,GACLD,QAAQ,GACNA,QAAQ,QAAR,IAAAA,QAAQ,CAAEM,WAAV,GACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAC;AAAf,IADF,GAGE,oBAAC,uBAAD,OAJI,GAON,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAER,SAAtB;AAAiC,IAAA,SAAS,EAAEC;AAA5C,IARG,GAWL,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAE;AAAtB,KACE,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC;AAAxB,IADF,CAbJ,CADF;AAoBD,CAxBD;;AA0BA,OAAO,IAAMQ,kBAAsC,GAAGjB,WAAW,CAC/D,wBAAmBkB,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,MAAT,SAASA,MAAT;AAAA;AAAA,2CAC0B1B,YAAY,EADtC;;AAAA;AACQe,UAAAA,SADR;AAAA;AAAA,2CAE0Bd,YAAY,EAFtC;;AAAA;AAEQe,UAAAA,SAFR;AAAA;AAAA;AAMMS,YAAAA,OAAO,EAAPA,OANN;AAOMV,YAAAA,SAAS,EAATA,SAPN;AAQMC,YAAAA,SAAS,EAATA;AARN;AAAA,wBASUU,MATV;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAS2BxB,sBAAsB,CAACwB,MAAD,CATjD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKIC,YAAAA,KALJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAD+D,CAA1D;AAgBP,eAAeb,MAAf","sourcesContent":["import {\n  getProviders,\n  getCsrfToken,\n  LiteralUnion,\n  ClientSafeProvider,\n} from \"next-auth/react\";\nimport { serverSideTranslations } from \"next-i18next/serverSideTranslations\";\n\nimport LoginForm from \"../src/components/FormLogin\";\nimport FormRegisterWithSocials from \"../src/components/FormRegisterWithSocials\";\nimport AppBack from \"../src/components/AppBack\";\nimport { BuiltInProviderType } from \"next-auth/providers\";\nimport { Routes } from \"../src/consts/router\";\nimport { withSession } from \"../src/helpers/withSession\";\nimport { GetServerSideProps } from \"next\";\nimport { CompositionAppBody } from \"../src/components/Compositions\";\nimport React, { useContext } from \"react\";\nimport { AuthContext } from \"./_app\";\nimport Redirect from \"../src/components/Redirect\";\nimport CardModal from \"../src/components/CardModal\";\nimport { ActivityIndicator } from \"react-native\";\ntype Providers = Record<\n  LiteralUnion<BuiltInProviderType, string>,\n  ClientSafeProvider\n>;\n\nexport type SignInProps = {\n  providers: Providers;\n  csrfToken: string;\n};\n\nconst SignIn = ({ providers, csrfToken }: SignInProps) => {\n  const { identity, loaded } = useContext(AuthContext);\n  const [mounted, setMounted] = useState(false);\n\n  return (\n    <CompositionAppBody>\n      <AppBack to={Routes.HOMEPAGE} />\n      {loaded ? (\n        identity ? (\n          identity?.phoneNumber ? (\n            <Redirect path=\"/dashboard\"></Redirect>\n          ) : (\n            <FormRegisterWithSocials></FormRegisterWithSocials>\n          )\n        ) : (\n          <LoginForm providers={providers} csrfToken={csrfToken} />\n        )\n      ) : (\n        <CardModal closeable={false}>\n          <ActivityIndicator size=\"large\" />\n        </CardModal>\n      )}\n    </CompositionAppBody>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = withSession(\n  async ({ locale }, session) => {\n    const providers = await getProviders();\n    const csrfToken = await getCsrfToken();\n\n    return {\n      props: {\n        session,\n        providers,\n        csrfToken,\n        ...(locale && (await serverSideTranslations(locale))),\n      },\n    };\n  }\n);\n\nexport default SignIn;\n"]},"metadata":{},"sourceType":"module"}