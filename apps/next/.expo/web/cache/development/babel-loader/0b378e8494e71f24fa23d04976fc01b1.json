{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AffixAdornment = exports.TextInputAffix = exports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _theming = require(\"../../../core/theming\");\n\nvar _enums = require(\"./enums\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar AFFIX_OFFSET = 12;\n\nvar AffixContext = _react.default.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: _enums.AdornmentSide.Left\n});\n\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n      side = _ref.side,\n      textStyle = _ref.textStyle,\n      topPosition = _ref.topPosition,\n      onLayout = _ref.onLayout,\n      visible = _ref.visible,\n      paddingHorizontal = _ref.paddingHorizontal;\n  return _react.default.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal\n    }\n  }, affix);\n};\n\nexports.AffixAdornment = AffixAdornment;\n\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n      labelStyle = _ref2.textStyle,\n      theme = _ref2.theme;\n\n  var _react$default$useCon = _react.default.useContext(AffixContext),\n      textStyle = _react$default$useCon.textStyle,\n      onLayout = _react$default$useCon.onLayout,\n      topPosition = _react$default$useCon.topPosition,\n      side = _react$default$useCon.side,\n      visible = _react$default$useCon.visible,\n      paddingHorizontal = _react$default$useCon.paddingHorizontal;\n\n  var textColor = (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n\n  return _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, _react.default.createElement(_reactNative.Text, {\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\n\nexports.TextInputAffix = TextInputAffix;\nTextInputAffix.displayName = 'TextInput.Affix';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(TextInputAffix);\n\nexports.default = _default;","map":{"version":3,"sources":["TextInputAffix.tsx"],"names":["AFFIX_OFFSET","AffixContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","paddingHorizontal","onLayout","visible","TextInputAffix","theme","React","textColor","offset","style","top","styles","opacity","inputRange","outputRange","container","position","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle, labelStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"script"}