{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useTranslation } from \"next-i18next\";\nimport { useRouter } from \"next/router\";\nimport { ButtonCta } from \"../Buttons\";\nimport { CompositionSection } from \"../Compositions\";\nimport FormContainer from \"../FormLogin/FormContainer\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport FormTextInput from \"../Inputs/FormTextInput\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport { StyledText, StyledHeader, ButtonContainer, styles, ModalContainer, StyledModalText } from \"./styles\";\nimport { Routes } from \"../../consts/router\";\nimport Image from \"next/image\";\nimport ModalPicture from \"../../../public/assets/PasswordReset.png\";\nimport CardModal from \"../CardModal\";\nimport React, { useState } from \"react\";\n\nvar FormInitPasswordReset = function FormInitPasswordReset() {\n  var _errors$login;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      resetInitPassword = _useState2[0],\n      setResetInitPassword = _useState2[1];\n\n  var router = useRouter();\n  var EMAIL_REGEX = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  var formFields = useForm();\n  var handleSubmit = formFields.handleSubmit,\n      errors = formFields.formState.errors;\n\n  var onSubmit = function onSubmit(data) {\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Authorization.sendPasswordResetEmail(data.login.email));\n\n          case 3:\n            setResetInitPassword(true);\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", null);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  var onError = function onError() {\n    return null;\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(CompositionSection, {\n    padding: [40, 15, 0, 15],\n    flexGrow: \"2\"\n  }, React.createElement(StyledHeader, null, t(\"others:common.links.resetPassword\")), React.createElement(StyledText, null, t(\"others:forms.resetPassword.detail\")), React.createElement(FormContainer, null, React.createElement(FormProvider, formFields, React.createElement(FormTextInput, {\n    name: \"login.email\",\n    label: \"email\",\n    rules: {\n      required: true,\n      maxLength: 50,\n      pattern: EMAIL_REGEX\n    },\n    error: errors == null ? void 0 : (_errors$login = errors.login) == null ? void 0 : _errors$login.email,\n    errorMsg: \"Enter email\"\n  })), React.createElement(ButtonContainer, null, React.createElement(ButtonCta, {\n    onPress: function onPress() {\n      return router.push(Routes.SIGN_IN);\n    },\n    anchor: t(\"others:common.buttons.back\"),\n    style: styles.backButton\n  }), React.createElement(ButtonCta, {\n    onPress: handleSubmit(onSubmit, onError),\n    anchor: t(\"others:common.links.resetPassword\"),\n    style: styles.verifyButton\n  }))), resetInitPassword ? React.createElement(CardModal, null, React.createElement(ModalContainer, null, React.createElement(Image, {\n    src: ModalPicture,\n    alt: \"\"\n  }), React.createElement(StyledModalText, null, t(\"others:forms.resetPassword.emailSent\")), React.createElement(ButtonCta, {\n    onPress: function onPress() {\n      return router.push(Routes.SIGN_IN);\n    },\n    anchor: \"Continue\",\n    style: styles.confirmButton\n  }))) : React.createElement(React.Fragment, null)));\n};\n\nexport default FormInitPasswordReset;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/FormInitPasswordReset/index.tsx"],"names":["useTranslation","useRouter","ButtonCta","CompositionSection","FormContainer","FormProvider","useForm","FormTextInput","Authorization","StyledText","StyledHeader","ButtonContainer","styles","ModalContainer","StyledModalText","Routes","Image","ModalPicture","CardModal","React","useState","FormInitPasswordReset","t","resetInitPassword","setResetInitPassword","router","EMAIL_REGEX","formFields","handleSubmit","errors","formState","onSubmit","data","sendPasswordResetEmail","login","email","onError","required","maxLength","pattern","push","SIGN_IN","backButton","verifyButton","confirmButton"],"mappings":"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","sourcesContent":["import { useTranslation } from \"next-i18next\";\nimport { useRouter } from \"next/router\";\n\nimport { ButtonCta } from \"../Buttons\";\nimport { CompositionSection } from \"../Compositions\";\n\nimport FormContainer from \"../FormLogin/FormContainer\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { FormType } from \"../../helpers/FormTypes\";\nimport FormTextInput from \"../Inputs/FormTextInput\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport {\n  StyledText,\n  StyledHeader,\n  ButtonContainer,\n  styles,\n  ModalContainer,\n  StyledModalText,\n} from \"./styles\";\nimport { Routes } from \"../../consts/router\";\nimport Image from \"next/image\";\nimport ModalPicture from \"../../../public/assets/PasswordReset.png\";\nimport CardModal from \"../CardModal\";\nimport React, { useState } from \"react\";\n\nconst FormInitPasswordReset = () => {\n  const { t } = useTranslation();\n  const [resetInitPassword, setResetInitPassword] = useState<boolean>(false);\n  const router = useRouter();\n  // eslint-disable-next-line\n  const EMAIL_REGEX = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  const formFields = useForm<FormType>();\n  const {\n    handleSubmit,\n    formState: { errors },\n  } = formFields;\n\n  const onSubmit = async (data: { login: { email: string } }) => {\n    try {\n      await Authorization.sendPasswordResetEmail(data.login.email);\n      setResetInitPassword(true);\n    } catch (e) {\n      return null;\n    }\n  };\n  const onError = () => null;\n  return (\n    <>\n      <CompositionSection padding={[40, 15, 0, 15]} flexGrow=\"2\">\n        <StyledHeader>{t(\"others:common.links.resetPassword\")}</StyledHeader>\n        <StyledText>{t(\"others:forms.resetPassword.detail\")}</StyledText>\n        <FormContainer>\n          <FormProvider {...formFields}>\n            <FormTextInput\n              name={\"login.email\"}\n              label={\"email\"}\n              rules={{\n                required: true,\n                maxLength: 50,\n                pattern: EMAIL_REGEX,\n              }}\n              error={errors?.login?.email}\n              errorMsg={\"Enter email\"}\n            />\n          </FormProvider>\n          <ButtonContainer>\n            <ButtonCta\n              onPress={() => router.push(Routes.SIGN_IN)}\n              anchor={t(\"others:common.buttons.back\")}\n              style={styles.backButton}\n            />\n            <ButtonCta\n              onPress={handleSubmit(onSubmit, onError)}\n              anchor={t(\"others:common.links.resetPassword\")}\n              style={styles.verifyButton}\n            />\n          </ButtonContainer>\n        </FormContainer>\n        {resetInitPassword ? (\n          <CardModal>\n            <ModalContainer>\n              <Image src={ModalPicture} alt=\"\" />\n              <StyledModalText>\n                {t(\"others:forms.resetPassword.emailSent\")}\n              </StyledModalText>\n              <ButtonCta\n                onPress={() => router.push(Routes.SIGN_IN)}\n                anchor={\"Continue\"}\n                style={styles.confirmButton}\n              />\n            </ModalContainer>\n          </CardModal>\n        ) : (\n          <></>\n        )}\n      </CompositionSection>\n    </>\n  );\n};\n\nexport default FormInitPasswordReset;\n"]},"metadata":{},"sourceType":"module"}