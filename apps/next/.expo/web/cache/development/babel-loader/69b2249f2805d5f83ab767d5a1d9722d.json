{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nimport React from \"react\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport styled from \"styled-components/native\";\nimport { hexToRGB } from \"../../helpers/misc\";\nvar ToastWrapper = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  flex-direction: row;\\n  justify-content: space-between;\\n  width: 100%;\\n  border-radius: 5px;\\n  background-color: \", \";\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: \", \";\\n  padding: 10px 15px 10px 10px;\\n\"])), function (props) {\n  return \"\" + hexToRGB(props.color, 0.1);\n}, function (props) {\n  return \"\" + props.color;\n});\nvar TextAndIconWrapper = styled.View(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  flex-direction: row;\\n  justify-content: start;\\n  display: flex;\\n  flex: 1;\\n\"])));\nvar Label = styled.Text(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  padding-left: 10px;\\n  color: \", \";\\n  display: flex;\\n  align-items: center;\\n  font-weight: 700;\\n\"])), function (props) {\n  return \"\" + props.color;\n});\nvar LinkText = styled.Text(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n  color: \", \";\\n  font-weight: 700;\\n  text-decoration: underline;\\n\"])), function (_ref) {\n  var theme = _ref.theme;\n  return \"\" + theme.colors.blue;\n});\n\nvar Toast = function Toast(_ref2) {\n  var color = _ref2.color,\n      label = _ref2.label,\n      icon = _ref2.icon,\n      cta = _ref2.cta,\n      wrapperStyle = _ref2.contaierStyle;\n  return React.createElement(ToastWrapper, {\n    color: color,\n    style: wrapperStyle\n  }, React.createElement(TextAndIconWrapper, null, icon, React.createElement(Label, {\n    color: color\n  }, label)), cta ? React.createElement(Pressable, {\n    onPress: cta.onPress\n  }, React.createElement(LinkText, null, cta.label)) : React.createElement(React.Fragment, null));\n};\n\nexport default Toast;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Toast/index.tsx"],"names":["React","styled","hexToRGB","ToastWrapper","View","props","color","TextAndIconWrapper","Label","Text","LinkText","theme","colors","blue","Toast","label","icon","cta","wrapperStyle","contaierStyle","onPress"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,QAAT;AAGA,IAAMC,YAAY,GAAGF,MAAM,CAACG,IAAV,gTAKI,UAACC,KAAD;AAAA,cAAcH,QAAQ,CAACG,KAAK,CAACC,KAAP,EAAc,GAAd,CAAtB;AAAA,CALJ,EAQA,UAACD,KAAD;AAAA,cAAcA,KAAK,CAACC,KAApB;AAAA,CARA,CAAlB;AAYA,IAAMC,kBAAkB,GAAGN,MAAM,CAACG,IAAV,+JAAxB;AAOA,IAAMI,KAAK,GAAGP,MAAM,CAACQ,IAAV,qLAEA,UAACJ,KAAD;AAAA,cAAcA,KAAK,CAACC,KAApB;AAAA,CAFA,CAAX;AAQA,IAAMI,QAAQ,GAAGT,MAAM,CAACQ,IAAV,mJACH;AAAA,MAAGE,KAAH,QAAGA,KAAH;AAAA,cAAoCA,KAAK,CAACC,MAAN,CAAaC,IAAjD;AAAA,CADG,CAAd;;AAcA,IAAMC,KAAK,GAAG,SAARA,KAAQ,QAMI;AAAA,MALhBR,KAKgB,SALhBA,KAKgB;AAAA,MAJhBS,KAIgB,SAJhBA,KAIgB;AAAA,MAHhBC,IAGgB,SAHhBA,IAGgB;AAAA,MAFhBC,GAEgB,SAFhBA,GAEgB;AAAA,MADDC,YACC,SADhBC,aACgB;AAChB,SACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEb,KAArB;AAA4B,IAAA,KAAK,EAAEY;AAAnC,KACE,oBAAC,kBAAD,QACGF,IADH,EAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEV;AAAd,KAAsBS,KAAtB,CAFF,CADF,EAKGE,GAAG,GACF,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEA,GAAG,CAACG;AAAxB,KACE,oBAAC,QAAD,QAAWH,GAAG,CAACF,KAAf,CADF,CADE,GAKF,yCAVJ,CADF;AAeD,CAtBD;;AAwBA,eAAeD,KAAf","sourcesContent":["import React from \"react\";\nimport { Pressable, StyleProp, ViewStyle } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport { hexToRGB } from \"../../helpers/misc\";\nimport { Theme } from \"../../style/theme.config\";\n\nconst ToastWrapper = styled.View<{ color: string }>`\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n  border-radius: 5px;\n  background-color: ${(props) => `${hexToRGB(props.color, 0.1)}`};\n  border-width: 1px;\n  border-style: solid;\n  border-color: ${(props) => `${props.color}`};\n  padding: 10px 15px 10px 10px;\n`;\n\nconst TextAndIconWrapper = styled.View`\n  flex-direction: row;\n  justify-content: start;\n  display: flex;\n  flex: 1;\n`;\n\nconst Label = styled.Text<{ color: string }>`\n  padding-left: 10px;\n  color: ${(props) => `${props.color}`};\n  display: flex;\n  align-items: center;\n  font-weight: 700;\n`;\n\nconst LinkText = styled.Text`\n  color: ${({ theme }: { theme: Theme }) => `${theme.colors.blue}`};\n  font-weight: 700;\n  text-decoration: underline;\n`;\n\ntype ToastProps = {\n  color: string;\n  icon?: React.ReactElement;\n  label: string;\n  cta?: { label?: string; onPress?: () => void };\n  contaierStyle?: StyleProp<ViewStyle>;\n};\n\nconst Toast = ({\n  color,\n  label,\n  icon,\n  cta,\n  contaierStyle: wrapperStyle,\n}: ToastProps) => {\n  return (\n    <ToastWrapper color={color} style={wrapperStyle}>\n      <TextAndIconWrapper>\n        {icon}\n        <Label color={color}>{label}</Label>\n      </TextAndIconWrapper>\n      {cta ? (\n        <Pressable onPress={cta.onPress}>\n          <LinkText>{cta.label}</LinkText>\n        </Pressable>\n      ) : (\n        <></>\n      )}\n    </ToastWrapper>\n  );\n};\n\nexport default Toast;\n"]},"metadata":{},"sourceType":"module"}