{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _colors = require(\"../styles/colors\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _theming = require(\"../core/theming\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;\n\nvar Switch = function Switch(_ref) {\n  var value = _ref.value,\n      disabled = _ref.disabled,\n      onValueChange = _ref.onValueChange,\n      color = _ref.color,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var checkedColor = color || theme.colors.accent;\n  var onTintColor = _reactNative.Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? (0, _color.default)(_colors.white).alpha(0.1).rgb().string() : (0, _color.default)(_colors.black).alpha(0.12).rgb().string() : (0, _color.default)(checkedColor).alpha(0.5).rgb().string();\n  var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? _colors.grey800 : _colors.grey400 : value ? checkedColor : theme.dark ? _colors.grey400 : _colors.grey50;\n  var props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor: onTintColor,\n    thumbTintColor: thumbTintColor\n  } : _reactNative.Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: ''\n    }\n  };\n  return React.createElement(_reactNative.Switch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\n\nvar _default = (0, _theming.withTheme)(Switch);\n\nexports.default = _default;","map":{"version":3,"sources":["Switch.tsx"],"names":["version","NativeModules","Switch","rest","checkedColor","color","theme","onTintColor","Platform","disabled","white","black","thumbTintColor","grey800","grey400","value","grey50","props","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false","onValueChange"],"mappings":";;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,oBAAA;;;;AAQA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,mBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,YAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,GACZA,YAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,CADYA,kBAAAA,GAAhB,SAAA;;AAkEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAOF;AAAA,MAPG,KAOH,QAPG,KAOH;AAAA,MAPG,QAOH,QAPG,QAOH;AAAA,MAPG,aAOH,QAPG,aAOH;AAAA,MAPG,KAOH,QAPG,KAOH;AAAA,MAPG,KAOH,QAPG,KAOH;AAAA,MADRC,IACQ;;AACX,MAAMC,YAAY,GAAGC,KAAK,IAAIC,KAAK,CAALA,MAAAA,CAA9B,MAAA;AAEA,MAAMC,WAAW,GACfC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,KAAAA,GAAAA,YAAAA,GAEIC,QAAQ,GACRH,KAAK,CAALA,IAAAA,GACE,CAAA,GAAA,MAAA,CAAA,OAAA,EAASI,OAAAA,CAAT,KAAA,EAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GADFJ,MACE,EADFA,GAEE,CAAA,GAAA,MAAA,CAAA,OAAA,EAASK,OAAAA,CAAT,KAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,GAHM,MAGN,EAHM,GAIR,CAAA,GAAA,MAAA,CAAA,OAAA,EAAA,YAAA,EAAA,KAAA,CAAA,GAAA,EAAA,GAAA,GAPN,MAOM,EAPN;AASA,MAAMC,cAAc,GAClBJ,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAAA,KAAAA,GAAAA,SAAAA,GAEIC,QAAQ,GACRH,KAAK,CAALA,IAAAA,GACEO,OAAAA,CADFP,OAAAA,GAEEQ,OAAAA,CAHM,OAAA,GAIRC,KAAK,GAAA,YAAA,GAELT,KAAK,CAALA,IAAAA,GACAQ,OAAAA,CADAR,OAAAA,GAEAU,OAAAA,CAXN,MAAA;AAaA,MAAMC,KAAK,GACT,OAAO,IAAIjB,OAAO,CAAPA,KAAAA,KAAX,CAAA,IAAkCA,OAAO,CAAPA,KAAAA,IAAlC,EAAA,GACI;AACEO,IAAAA,WADF,EACEA,WADF;AAEEK,IAAAA,cAAAA,EAAAA;AAFF,GADJ,GAKI,YAAA,CAAA,QAAA,CAAA,EAAA,KAAA,KAAA,GACA;AACEM,IAAAA,gBAAgB,EADlB,WAAA;AAEEC,IAAAA,UAAU,EAFZ,cAAA;AAGEC,IAAAA,gBAAgB,EAAEhB;AAHpB,GADA,GAMA;AACEe,IAAAA,UAAU,EADZ,cAAA;AAEEE,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EADM,WAAA;AAEVC,MAAAA,KAAK,EAAE;AAFG;AAFd,GAZN;AAoBA,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,MAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EADP,KAAA;AAEE,IAAA,QAAQ,EAFV,QAAA;AAGE,IAAA,aAAa,EAAEd,QAAQ,GAAA,SAAA,GAAee;AAHxC,GAAA,EAAA,KAAA,EADF,IACE,CAAA,CADF;AApDF,CAAA;;eA+De,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,MAAA,C","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme,\n  ...rest\n}: Props) => {\n  const checkedColor = color || theme.colors.accent;\n\n  const onTintColor =\n    Platform.OS === 'ios'\n      ? checkedColor\n      : disabled\n      ? theme.dark\n        ? setColor(white).alpha(0.1).rgb().string()\n        : setColor(black).alpha(0.12).rgb().string()\n      : setColor(checkedColor).alpha(0.5).rgb().string();\n\n  const thumbTintColor =\n    Platform.OS === 'ios'\n      ? undefined\n      : disabled\n      ? theme.dark\n        ? grey800\n        : grey400\n      : value\n      ? checkedColor\n      : theme.dark\n      ? grey400\n      : grey50;\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: '',\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"script"}