{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getFirebaseToken } from \"../helpers/getFirebaseToken\";\nexport var AccountApi = {\n  getAccount: function getAccount() {\n    var token, res;\n    return _regeneratorRuntime.async(function getAccount$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getFirebaseToken());\n\n          case 2:\n            token = _context.sent;\n\n            if (!token) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch(process.env.NEXT_PUBLIC_DOMAIN + \"api/account/get\", {\n              method: \"POST\",\n              headers: {\n                \"content-type\": \"application/json\",\n                Authorization: \"Bearer \" + token\n              }\n            }));\n\n          case 6:\n            res = _context.sent;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent.account);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  updateAccount: function updateAccount(_ref) {\n    var payload, token;\n    return _regeneratorRuntime.async(function updateAccount$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            payload = _ref.payload;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(getFirebaseToken());\n\n          case 3:\n            token = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(fetch(process.env.NEXT_PUBLIC_DOMAIN + \"api/account/update\", {\n              method: \"POST\",\n              headers: {\n                Authorization: \"Bearer \" + token,\n                \"content-type\": \"application/json\"\n              },\n              body: JSON.stringify(payload)\n            }));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/client-api/account.ts"],"names":["getFirebaseToken","AccountApi","getAccount","token","fetch","process","env","NEXT_PUBLIC_DOMAIN","method","headers","Authorization","res","json","account","updateAccount","payload","body","JSON","stringify"],"mappings":";AAAA,SAASA,gBAAT;AAmBA,OAAO,IAAMC,UAAsB,GAAG;AACpCC,EAAAA,UAAU,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACUF,gBAAgB,EAD1B;;AAAA;AACJG,YAAAA,KADI;;AAAA,iBAENA,KAFM;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAGUC,KAAK,CACrBC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,oBADqB,EAErB;AACEC,cAAAA,MAAM,EAAE,MADV;AAEEC,cAAAA,OAAO,EAAE;AACP,gCAAgB,kBADT;AAEPC,gBAAAA,aAAa,cAAYP;AAFlB;AAFX,aAFqB,CAHf;;AAAA;AAGFQ,YAAAA,GAHE;AAAA;AAAA,6CAaMA,GAAG,CAACC,IAAJ,EAbN;;AAAA;AAAA,2DAakBC,OAblB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADwB;AAiBpCC,EAAAA,aAAa,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBC,YAAAA,OAAlB,QAAkBA,OAAlB;AAAA;AAAA,6CACOf,gBAAgB,EADvB;;AAAA;AACPG,YAAAA,KADO;AAAA;AAAA,6CAEPC,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,GAAiC,oBAAlC,EAAwD;AACjEC,cAAAA,MAAM,EAAE,MADyD;AAEjEC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,cAAYP,KADlB;AAEP,gCAAgB;AAFT,eAFwD;AAMjEa,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,OAAf;AAN2D,aAAxD,CAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBqB,CAA/B","sourcesContent":["import { getFirebaseToken } from \"../helpers/getFirebaseToken\";\n\nexport interface getAccountDTO {\n  uid: string;\n  name: string;\n  preferredLang?: string;\n  confirmedEmail: Boolean;\n  confirmedPhone: Boolean;\n  smsNotification: Boolean;\n  verified?: Boolean;\n}\nexport interface updateAccountReqDTO {\n  name: string;\n  preferredLang: string;\n}\ninterface AccountApi {\n  getAccount: () => Promise<getAccountDTO>;\n  updateAccount: (options: { payload: object }) => Promise<void>;\n}\nexport const AccountApi: AccountApi = {\n  getAccount: async function () {\n    const token = await getFirebaseToken();\n    if (token) {\n      const res = await fetch(\n        process.env.NEXT_PUBLIC_DOMAIN + `api/account/get`,\n        {\n          method: \"POST\",\n          headers: {\n            \"content-type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      return (await res.json()).account;\n    }\n  },\n  updateAccount: async function ({ payload }) {\n    const token = await getFirebaseToken();\n    await fetch(process.env.NEXT_PUBLIC_DOMAIN + \"api/account/update\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}