{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject;\n\nimport { useTranslation } from \"next-i18next\";\nimport styled from \"styled-components/native\";\nimport Image from \"next/image\";\nvar FLAG_TYPE_EMOJI = \"emoji\";\nvar FLAG_TYPE_SVG = \"svg\";\nvar SIZE = {\n  width: 26,\n  height: 17\n};\nvar Wrapper = styled.Text(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  font-size: 24px;\\n  line-height: 0px;\\n\"])));\nvar emojis = {\n  pl: \"ðŸ‡µðŸ‡±\",\n  ua: \"ðŸ‡ºðŸ‡¦\",\n  ro: \"ðŸ‡·ðŸ‡´\",\n  ru: \"ðŸ‡·ðŸ‡º\",\n  en: \"ðŸ‡¬ðŸ‡§\",\n  hu: \"ðŸ‡­ðŸ‡º\",\n  sk: \"ðŸ‡¸ðŸ‡°\",\n  cs: \"ðŸ‡¨ðŸ‡¿\"\n};\nvar svgs = {\n  CS: \"CZ\"\n};\n\nvar EmojiFlag = function EmojiFlag(_ref) {\n  var locale = _ref.locale,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 26 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 17 : _ref$height;\n  return React.createElement(Wrapper, null, emojis[locale.toLowerCase()] || \"\");\n};\n\nvar SvgFlag = function SvgFlag(_ref2) {\n  var locale = _ref2.locale;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  return React.createElement(Wrapper, null, React.createElement(Image, {\n    width: SIZE.width,\n    height: SIZE.height,\n    src: \"/assets/\" + (svgs[locale.toUpperCase()] || locale.toUpperCase()) + \"_flag.svg\",\n    alt: t(\"flags.\" + locale.toLowerCase(), locale.toUpperCase())\n  }));\n};\n\nexport var LanguageFlags = function LanguageFlags(_ref3) {\n  var locale = _ref3.locale,\n      type = _ref3.type;\n  return React.createElement(React.Fragment, null, type === FLAG_TYPE_EMOJI && React.createElement(EmojiFlag, {\n    locale: locale\n  }), (!type || type === FLAG_TYPE_SVG) && React.createElement(SvgFlag, {\n    locale: locale\n  }));\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/LanguageSwitcher/LanguageFlags.tsx"],"names":["useTranslation","styled","Image","FLAG_TYPE_EMOJI","FLAG_TYPE_SVG","SIZE","width","height","Wrapper","Text","emojis","pl","ua","ro","ru","en","hu","sk","cs","svgs","CS","EmojiFlag","locale","toLowerCase","SvgFlag","t","toUpperCase","LanguageFlags","type"],"mappings":";;;;AAAA,SAASA,cAAT,QAA+B,cAA/B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,IAAMC,eAAe,GAAG,OAAxB;AACA,IAAMC,aAAa,GAAG,KAAtB;AASA,IAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE,EADI;AAEXC,EAAAA,MAAM,EAAE;AAFG,CAAb;AAKA,IAAMC,OAAO,GAAGP,MAAM,CAACQ,IAAV,qHAAb;AAOA,IAAMC,MAAiB,GAAG;AACxBC,EAAAA,EAAE,EAAE,MADoB;AAExBC,EAAAA,EAAE,EAAE,MAFoB;AAGxBC,EAAAA,EAAE,EAAE,MAHoB;AAIxBC,EAAAA,EAAE,EAAE,MAJoB;AAKxBC,EAAAA,EAAE,EAAE,MALoB;AAMxBC,EAAAA,EAAE,EAAE,MANoB;AAOxBC,EAAAA,EAAE,EAAE,MAPoB;AAQxBC,EAAAA,EAAE,EAAE;AARoB,CAA1B;AAUA,IAAMC,IAAe,GAAG;AACtBC,EAAAA,EAAE,EAAE;AADkB,CAAxB;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAgD;AAAA,MAA7CC,MAA6C,QAA7CA,MAA6C;AAAA,wBAArChB,KAAqC;AAAA,MAArCA,KAAqC,2BAA7B,EAA6B;AAAA,yBAAzBC,MAAyB;AAAA,MAAzBA,MAAyB,4BAAhB,EAAgB;AAChE,SAAO,oBAAC,OAAD,QAAUG,MAAM,CAACY,MAAM,CAACC,WAAP,EAAD,CAAN,IAAgC,EAA1C,CAAP;AACD,CAFD;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,QAAuB;AAAA,MAApBF,MAAoB,SAApBA,MAAoB;;AACrC,wBAActB,cAAc,EAA5B;AAAA,MAAQyB,CAAR,mBAAQA,CAAR;;AACA,SACE,oBAAC,OAAD,QACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEpB,IAAI,CAACC,KADd;AAEE,IAAA,MAAM,EAAED,IAAI,CAACE,MAFf;AAGE,IAAA,GAAG,gBACDY,IAAI,CAACG,MAAM,CAACI,WAAP,EAAD,CAAJ,IAA8BJ,MAAM,CAACI,WAAP,EAD7B,eAHL;AAME,IAAA,GAAG,EAAED,CAAC,YAAUH,MAAM,CAACC,WAAP,EAAV,EAAkCD,MAAM,CAACI,WAAP,EAAlC;AANR,IADF,CADF;AAYD,CAdD;;AAgBA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,QAA6B;AAAA,MAA1BL,MAA0B,SAA1BA,MAA0B;AAAA,MAAlBM,IAAkB,SAAlBA,IAAkB;AACxD,SACE,0CACGA,IAAI,KAAKzB,eAAT,IAA4B,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAEmB;AAAnB,IAD/B,EAEG,CAAC,CAACM,IAAD,IAASA,IAAI,KAAKxB,aAAnB,KAAqC,oBAAC,OAAD;AAAS,IAAA,MAAM,EAAEkB;AAAjB,IAFxC,CADF;AAMD,CAPM","sourcesContent":["import { useTranslation } from \"next-i18next\";\nimport styled from \"styled-components/native\";\nimport Image from \"next/image\";\n\nconst FLAG_TYPE_EMOJI = \"emoji\";\nconst FLAG_TYPE_SVG = \"svg\";\n\ninterface Props {\n  locale: string;\n  width?: number;\n  height?: number;\n  type?: string;\n}\n\nconst SIZE = {\n  width: 26,\n  height: 17,\n};\n\nconst Wrapper = styled.Text`\n  font-size: 24px;\n  line-height: 0px;\n`;\ninterface LocaleMap {\n  [key: string]: string;\n}\nconst emojis: LocaleMap = {\n  pl: \"ðŸ‡µðŸ‡±\",\n  ua: \"ðŸ‡ºðŸ‡¦\",\n  ro: \"ðŸ‡·ðŸ‡´\",\n  ru: \"ðŸ‡·ðŸ‡º\",\n  en: \"ðŸ‡¬ðŸ‡§\",\n  hu: \"ðŸ‡­ðŸ‡º\",\n  sk: \"ðŸ‡¸ðŸ‡°\",\n  cs: \"ðŸ‡¨ðŸ‡¿\",\n};\nconst svgs: LocaleMap = {\n  CS: \"CZ\",\n};\n\nconst EmojiFlag = ({ locale, width = 26, height = 17 }: Props) => {\n  return <Wrapper>{emojis[locale.toLowerCase()] || \"\"}</Wrapper>;\n};\n\nconst SvgFlag = ({ locale }: Props) => {\n  const { t } = useTranslation();\n  return (\n    <Wrapper>\n      <Image\n        width={SIZE.width}\n        height={SIZE.height}\n        src={`/assets/${\n          svgs[locale.toUpperCase()] || locale.toUpperCase()\n        }_flag.svg`}\n        alt={t(`flags.${locale.toLowerCase()}`, locale.toUpperCase())}\n      />\n    </Wrapper>\n  );\n};\n\nexport const LanguageFlags = ({ locale, type }: Props) => {\n  return (\n    <>\n      {type === FLAG_TYPE_EMOJI && <EmojiFlag locale={locale} />}\n      {(!type || type === FLAG_TYPE_SVG) && <SvgFlag locale={locale} />}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}