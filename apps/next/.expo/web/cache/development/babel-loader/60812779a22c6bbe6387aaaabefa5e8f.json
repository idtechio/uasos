{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useTranslation } from \"next-i18next\";\nimport { EditOfferContext } from \"../EditOfferButton/index\";\nimport React, { useContext, useCallback, useState } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ButtonCta from \"../ButtonCta\";\nimport { CloseButton, FormDescription, FormFooter, FormHeader, FormWrapper } from \"../style\";\nimport SelectProblemDropdown from \"./SelectProblemDropdown\";\nimport { ProblemIllustraion } from \"./style\";\nimport { useReportItem } from \"../../../queries/useListing\";\nimport { useQueryClient } from \"react-query\";\nimport { QueryKeys } from \"../../../queries/queryKeys\";\nimport { MODAL_TEXT, MODAL_STATUS } from \"./constans\";\nexport default function ReportOffer(_ref) {\n  var close = _ref.close;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useReportItem = useReportItem(),\n      mutate = _useReportItem.mutate,\n      error = _useReportItem.error,\n      isLoading = _useReportItem.isLoading;\n\n  var queryClient = useQueryClient();\n\n  var _useContext = useContext(EditOfferContext),\n      targetType = _useContext.targetType,\n      matchID = _useContext.matchID,\n      targetID = _useContext.targetID;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      problem = _useState2[0],\n      setProblem = _useState2[1];\n\n  var _useState3 = useState(MODAL_STATUS.REQUEST),\n      _useState4 = _slicedToArray(_useState3, 2),\n      reportStatus = _useState4[0],\n      setReportStatus = _useState4[1];\n\n  var handleReport = function handleReport() {\n    return matchID && problem ? mutate({\n      matchID: matchID,\n      targetID: targetID,\n      targetType: targetType,\n      reportType: problem\n    }, {\n      onSuccess: function onSuccess() {\n        return setReportStatus(MODAL_STATUS.SUCCESS);\n      },\n      onError: function onError() {\n        return setReportStatus(MODAL_STATUS.ERROR);\n      }\n    }) : \"\";\n  };\n\n  var closeAfterSuccess = useCallback(function () {\n    if (targetType === \"guests\") {\n      queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n    }\n\n    if (targetType === \"hosts\") {\n      queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n    }\n\n    close();\n  }, [queryClient, targetType, close]);\n  return React.createElement(FormWrapper, null, React.createElement(CloseButton, {\n    onPress: close\n  }), React.createElement(ProblemIllustraion, null), isLoading && React.createElement(ActivityIndicator, {\n    size: \"large\"\n  }), React.createElement(FormHeader, {\n    style: {\n      marginTop: 7\n    }\n  }, t(MODAL_TEXT[reportStatus].title)), React.createElement(FormDescription, {\n    style: {\n      marginTop: 8,\n      marginBottom: 38\n    }\n  }, reportStatus !== MODAL_STATUS.ERROR ? t(MODAL_TEXT[reportStatus].content) : (error == null ? void 0 : error.message) || \"Couldn't report entry\"), reportStatus === MODAL_STATUS.REQUEST ? React.createElement(SelectProblemDropdown, {\n    onSelect: setProblem,\n    problemType: problem\n  }) : \"\", React.createElement(FormFooter, {\n    style: {\n      justifyContent: reportStatus !== MODAL_STATUS.REQUEST ? \"center\" : \"space-between\",\n      flexDirection: \"row\"\n    }\n  }, reportStatus !== MODAL_STATUS.REQUEST ? React.createElement(ButtonCta, {\n    anchor: t(\"others:common.buttons.backToDesktop\"),\n    onPress: reportStatus === MODAL_STATUS.SUCCESS ? closeAfterSuccess : close\n  }) : React.createElement(React.Fragment, null, React.createElement(ButtonCta, {\n    variant: \"outlined\",\n    anchor: t(\"others:common.buttons.cancel\"),\n    onPress: close\n  }), React.createElement(ButtonCta, {\n    anchor: t(\"others:common.buttons.report\"),\n    onPress: handleReport,\n    disabled: !problem || isLoading\n  }))));\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/EditOfferOptions/ReportOffer/index.tsx"],"names":["useTranslation","EditOfferContext","React","useContext","useCallback","useState","ButtonCta","CloseButton","FormDescription","FormFooter","FormHeader","FormWrapper","SelectProblemDropdown","ProblemIllustraion","useReportItem","useQueryClient","QueryKeys","MODAL_TEXT","MODAL_STATUS","ReportOffer","close","t","mutate","error","isLoading","queryClient","targetType","matchID","targetID","problem","setProblem","REQUEST","reportStatus","setReportStatus","handleReport","reportType","onSuccess","SUCCESS","onError","ERROR","closeAfterSuccess","invalidateQueries","GET_REQUESTS_LIST","GET_OFFERS_LIST","marginTop","title","marginBottom","content","message","justifyContent","flexDirection"],"mappings":"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","sourcesContent":["import { useTranslation } from \"next-i18next\";\nimport { EditOfferContext } from \"../EditOfferButton/index\";\nimport React, { useContext, useCallback, useState } from \"react\";\nimport { ActivityIndicator } from \"react-native\";\nimport ButtonCta from \"../ButtonCta\";\nimport {\n  CloseButton,\n  FormDescription,\n  FormFooter,\n  FormHeader,\n  FormWrapper,\n} from \"../style\";\nimport SelectProblemDropdown from \"./SelectProblemDropdown\";\nimport { ProblemIllustraion } from \"./style\";\nimport { useReportItem } from \"../../../queries/useListing\";\nimport { useQueryClient } from \"react-query\";\nimport { QueryKeys } from \"../../../queries/queryKeys\";\nimport { MODAL_TEXT, MODAL_STATUS } from \"./constans\";\nimport { Status } from \"./types\";\n\ninterface Props {\n  close: () => void;\n}\n\nexport default function ReportOffer({ close }: Props) {\n  const { t } = useTranslation();\n  const { mutate, error, isLoading } = useReportItem();\n  const queryClient = useQueryClient();\n\n  const { targetType, matchID, targetID } = useContext(EditOfferContext);\n\n  const [problem, setProblem] = useState<string | null>(null);\n  const [reportStatus, setReportStatus] = useState<Status>(\n    MODAL_STATUS.REQUEST\n  );\n\n  const handleReport = () =>\n    matchID && problem\n      ? mutate(\n          {\n            matchID: matchID,\n            targetID,\n            targetType,\n            reportType: problem,\n          },\n          {\n            onSuccess: () => setReportStatus(MODAL_STATUS.SUCCESS),\n            onError: () => setReportStatus(MODAL_STATUS.ERROR),\n          }\n        )\n      : \"\";\n\n  const closeAfterSuccess = useCallback(() => {\n    if (targetType === \"guests\") {\n      queryClient.invalidateQueries([QueryKeys.GET_REQUESTS_LIST]);\n    }\n\n    if (targetType === \"hosts\") {\n      queryClient.invalidateQueries([QueryKeys.GET_OFFERS_LIST]);\n    }\n\n    close();\n  }, [queryClient, targetType, close]);\n\n  return (\n    <FormWrapper>\n      <CloseButton onPress={close} />\n      <ProblemIllustraion />\n      {isLoading && <ActivityIndicator size=\"large\" />}\n      <FormHeader style={{ marginTop: 7 }}>\n        {t(MODAL_TEXT[reportStatus].title)}\n      </FormHeader>\n      <FormDescription style={{ marginTop: 8, marginBottom: 38 }}>\n        {reportStatus !== MODAL_STATUS.ERROR\n          ? t(MODAL_TEXT[reportStatus].content)\n          : (error as Error)?.message || \"Couldn't report entry\"}\n      </FormDescription>\n      {reportStatus === MODAL_STATUS.REQUEST ? (\n        <SelectProblemDropdown onSelect={setProblem} problemType={problem} />\n      ) : (\n        \"\"\n      )}\n      <FormFooter\n        style={{\n          justifyContent:\n            reportStatus !== MODAL_STATUS.REQUEST ? \"center\" : \"space-between\",\n          flexDirection: \"row\",\n        }}\n      >\n        {reportStatus !== MODAL_STATUS.REQUEST ? (\n          <ButtonCta\n            anchor={t(\"others:common.buttons.backToDesktop\")}\n            onPress={\n              reportStatus === MODAL_STATUS.SUCCESS ? closeAfterSuccess : close\n            }\n          />\n        ) : (\n          <>\n            <ButtonCta\n              variant=\"outlined\"\n              anchor={t(\"others:common.buttons.cancel\")}\n              onPress={close}\n            />\n            <ButtonCta\n              anchor={t(\"others:common.buttons.report\")}\n              onPress={handleReport}\n              disabled={!problem || isLoading}\n            />\n          </>\n        )}\n      </FormFooter>\n    </FormWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}