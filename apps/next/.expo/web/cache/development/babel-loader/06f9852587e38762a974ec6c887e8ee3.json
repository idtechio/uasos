{"ast":null,"code":"import { useEffect } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var useWebHandleClickOutside = function useWebHandleClickOutside(ref, opened, onOutsideClick) {\n  useEffect(function () {\n    var isWeb = Platform.OS === \"web\";\n\n    var handleClickOutside = function handleClickOutside(ev) {\n      var _ref$current;\n\n      if (ref.current && !((_ref$current = ref.current) != null && _ref$current.contains(ev.target))) {\n        onOutsideClick();\n      }\n    };\n\n    if (ref.current && isWeb && opened) {\n      document.body.addEventListener(\"click\", handleClickOutside);\n    }\n\n    return function () {\n      if (isWeb) {\n        document.body.removeEventListener(\"click\", handleClickOutside);\n      }\n    };\n  }, [opened, onOutsideClick, ref]);\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/EditOfferOptions/EditOfferButton/index.hooks.tsx"],"names":["useEffect","useWebHandleClickOutside","ref","opened","onOutsideClick","isWeb","Platform","OS","handleClickOutside","ev","current","contains","target","document","body","addEventListener","removeEventListener"],"mappings":"AAAA,SAA2BA,SAA3B,QAA4C,OAA5C;;AAGA,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CACtCC,GADsC,EAEtCC,MAFsC,EAGtCC,cAHsC,EAInC;AACHJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMK,KAAK,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAA9B;;AACA,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,EAAD,EAAoB;AAAA;;AAC7C,UACEP,GAAG,CAACQ,OAAJ,IACA,kBAAER,GAAG,CAACQ,OAAN,aAAC,aAAyCC,QAAzC,CAAkDF,EAAE,CAACG,MAArD,CAAD,CAFF,EAGE;AACAR,QAAAA,cAAc;AACf;AACF,KAPD;;AASA,QAAIF,GAAG,CAACQ,OAAJ,IAAeL,KAAf,IAAwBF,MAA5B,EAAoC;AAClCU,MAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAwCP,kBAAxC;AACD;;AAED,WAAO,YAAM;AACX,UAAIH,KAAJ,EAAW;AACTQ,QAAAA,QAAQ,CAACC,IAAT,CAAcE,mBAAd,CAAkC,OAAlC,EAA2CR,kBAA3C;AACD;AACF,KAJD;AAKD,GApBQ,EAoBN,CAACL,MAAD,EAASC,cAAT,EAAyBF,GAAzB,CApBM,CAAT;AAqBD,CA1BM","sourcesContent":["import React, { RefObject, useEffect } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nexport const useWebHandleClickOutside = (\n  ref: RefObject<View>,\n  opened: boolean,\n  onOutsideClick: () => void\n) => {\n  useEffect(() => {\n    const isWeb = Platform.OS === \"web\";\n    const handleClickOutside = (ev: MouseEvent) => {\n      if (\n        ref.current &&\n        !(ref.current as unknown as HTMLElement)?.contains(ev.target as Node)\n      ) {\n        onOutsideClick();\n      }\n    };\n\n    if (ref.current && isWeb && opened) {\n      document.body.addEventListener(\"click\", handleClickOutside);\n    }\n\n    return () => {\n      if (isWeb) {\n        document.body.removeEventListener(\"click\", handleClickOutside);\n      }\n    };\n  }, [opened, onOutsideClick, ref]);\n};\n"]},"metadata":{},"sourceType":"module"}