{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Dropdown } from \"../Dropdown\";\nimport { ShelterCard } from \"./ShelterCard\";\nimport { Layout, BackgroundColor, YellowTopSplash, BlueMiddleSplash, YellowBottomSplash, DesktopSectionTitle, MobileSectionTitle, Description, Wrapper, DropdownsWrapper, Content, Label, SheltersContainer, DropdownWrapper } from \"./styles\";\nimport { getFilteredArray } from \"./utils\";\nvar SPLASH = {\n  blue: \"/assets/splash_blue.png\",\n  yellow: \"/assets/splash_yellow.png\"\n};\nvar commonSelectStyle = {\n  height: 40\n};\nexport var PublicSheltersLayout = function PublicSheltersLayout() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var _ref = i18n.getDataByLanguage(i18n.language),\n      publicShelters = _ref.publicShelters;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedCountry = _useState2[0],\n      setSelectedCountry = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedCity = _useState4[0],\n      setSelectedCity = _useState4[1];\n\n  var allShelters = useMemo(function () {\n    return Object.values(publicShelters);\n  }, [publicShelters]);\n  var countries = useMemo(function () {\n    return allShelters.map(function (shelter) {\n      return {\n        value: shelter.country,\n        label: shelter.country\n      };\n    });\n  }, [allShelters]);\n  var cities = useMemo(function () {\n    return allShelters.reduce(function (array, shelter) {\n      if (shelter.country === selectedCountry) {\n        array.push({\n          value: shelter.city,\n          label: shelter.city\n        });\n      }\n\n      return array;\n    }, []);\n  }, [allShelters, selectedCountry]);\n\n  var handleChooseCountry = function handleChooseCountry(value) {\n    setSelectedCountry(value);\n    setSelectedCity(\"\");\n  };\n\n  var handleChooseCity = function handleChooseCity(value) {\n    return setSelectedCity(value);\n  };\n\n  var shelters = useMemo(function () {\n    return getFilteredArray(allShelters, {\n      country: selectedCountry,\n      city: selectedCity\n    });\n  }, [allShelters, selectedCountry, selectedCity]);\n  return React.createElement(BackgroundColor, null, React.createElement(YellowTopSplash, {\n    source: SPLASH.yellow\n  }), React.createElement(BlueMiddleSplash, {\n    source: SPLASH.blue\n  }), React.createElement(YellowBottomSplash, {\n    source: SPLASH.yellow\n  }), React.createElement(Layout, null, React.createElement(Content, null, React.createElement(DesktopSectionTitle, {\n    title: t(\"others:common.words.publicShelters\")\n  }), React.createElement(MobileSectionTitle, null, t(\"others:common.words.publicShelters\")), React.createElement(Wrapper, null, React.createElement(Description, null, t(\"others:publicShelters.description\")), React.createElement(Description, null, React.createElement(\"b\", null, t(\"others:publicShelters.addShelterMail\")))), React.createElement(DropdownsWrapper, {\n    style: {\n      zIndex: 12\n    }\n  }, React.createElement(DropdownWrapper, null, React.createElement(Label, null, t(\"common:refugeeAddForm.countryOfRefugePlaceholder\")), React.createElement(Dropdown, {\n    styles: {\n      select: commonSelectStyle\n    },\n    data: countries,\n    selected: selectedCountry,\n    placeholder: t(\"hostAdd.country\"),\n    itemPressFunction: handleChooseCountry\n  })), selectedCountry ? React.createElement(DropdownWrapper, null, React.createElement(Label, null, t(\"common:refugeeAddForm.cityOfRefugeLabel\")), React.createElement(Dropdown, {\n    styles: {\n      select: commonSelectStyle\n    },\n    data: cities,\n    selected: selectedCity,\n    itemPressFunction: handleChooseCity,\n    placeholder: t(\"refugeeAddForm.cityPlaceholder\")\n  })) : null), React.createElement(SheltersContainer, null, shelters.map(function (shelter) {\n    return React.createElement(ShelterCard, {\n      name: shelter.name,\n      fullAddress: shelter.address + \", \" + shelter.city,\n      country: shelter.country,\n      key: shelter.howToGetThere,\n      occupancy: shelter.occupancy,\n      phoneNumber: shelter.phoneNumber,\n      howToGetThere: shelter.howToGetThere\n    });\n  })))));\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/PublicShelters/index.tsx"],"names":["React","useMemo","useState","useTranslation","Dropdown","ShelterCard","Layout","BackgroundColor","YellowTopSplash","BlueMiddleSplash","YellowBottomSplash","DesktopSectionTitle","MobileSectionTitle","Description","Wrapper","DropdownsWrapper","Content","Label","SheltersContainer","DropdownWrapper","getFilteredArray","SPLASH","blue","yellow","commonSelectStyle","height","PublicSheltersLayout","t","i18n","getDataByLanguage","language","publicShelters","selectedCountry","setSelectedCountry","selectedCity","setSelectedCity","allShelters","Object","values","countries","map","shelter","value","country","label","cities","reduce","array","push","city","handleChooseCountry","handleChooseCity","shelters","zIndex","select","name","address","howToGetThere","occupancy","phoneNumber"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useMemo, useState } from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { Dropdown } from \"../Dropdown\";\nimport { ShelterCard } from \"./ShelterCard\";\n\nimport {\n  Layout,\n  BackgroundColor,\n  YellowTopSplash,\n  BlueMiddleSplash,\n  YellowBottomSplash,\n  DesktopSectionTitle,\n  MobileSectionTitle,\n  Description,\n  Wrapper,\n  DropdownsWrapper,\n  Content,\n  Label,\n  SheltersContainer,\n  DropdownWrapper,\n} from \"./styles\";\n\nimport { getFilteredArray, ShelterInfo } from \"./utils\";\n\nconst SPLASH = {\n  blue: \"/assets/splash_blue.png\",\n  yellow: \"/assets/splash_yellow.png\",\n};\n\nconst commonSelectStyle = {\n  height: 40,\n};\n\nexport const PublicSheltersLayout = () => {\n  const { t, i18n } = useTranslation();\n\n  const { publicShelters } = i18n.getDataByLanguage(i18n.language) as any;\n\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"\");\n  const [selectedCity, setSelectedCity] = useState<string>(\"\");\n\n  const allShelters: Array<ShelterInfo> = useMemo(\n    () => Object.values(publicShelters),\n    [publicShelters]\n  );\n\n  const countries = useMemo(\n    () =>\n      allShelters.map((shelter) => ({\n        value: shelter.country,\n        label: shelter.country,\n      })),\n    [allShelters]\n  );\n\n  const cities = useMemo(\n    () =>\n      allShelters.reduce(\n        (array: Array<{ label: string; value: string }>, shelter) => {\n          if (shelter.country === selectedCountry) {\n            array.push({\n              value: shelter.city,\n              label: shelter.city,\n            });\n          }\n\n          return array;\n        },\n        []\n      ),\n    [allShelters, selectedCountry]\n  );\n\n  const handleChooseCountry = (value: string) => {\n    setSelectedCountry(value);\n    setSelectedCity(\"\");\n  };\n  const handleChooseCity = (value: string) => setSelectedCity(value);\n\n  const shelters = useMemo(\n    () =>\n      getFilteredArray(allShelters, {\n        country: selectedCountry,\n        city: selectedCity,\n      }),\n    [allShelters, selectedCountry, selectedCity]\n  );\n\n  return (\n    <BackgroundColor>\n      <YellowTopSplash\n        // @ts-expect-error TODO: fix prop types\n        source={SPLASH.yellow}\n      />\n      <BlueMiddleSplash\n        // @ts-expect-error TODO: fix prop types\n        source={SPLASH.blue}\n      />\n      <YellowBottomSplash\n        // @ts-expect-error TODO: fix prop types\n        source={SPLASH.yellow}\n      />\n\n      <Layout>\n        <Content>\n          <DesktopSectionTitle\n            title={t(\"others:common.words.publicShelters\")}\n          />\n          <MobileSectionTitle>\n            {t(\"others:common.words.publicShelters\")}\n          </MobileSectionTitle>\n\n          <Wrapper>\n            <Description>{t(\"others:publicShelters.description\")}</Description>\n\n            <Description>\n              <b>{t(\"others:publicShelters.addShelterMail\")}</b>\n            </Description>\n          </Wrapper>\n\n          <DropdownsWrapper\n            style={{\n              zIndex: 12,\n            }}\n          >\n            <DropdownWrapper>\n              <Label>\n                {t(\"common:refugeeAddForm.countryOfRefugePlaceholder\")}\n              </Label>\n              <Dropdown\n                styles={{\n                  select: commonSelectStyle,\n                }}\n                data={countries}\n                selected={selectedCountry}\n                placeholder={t(\"hostAdd.country\")}\n                itemPressFunction={handleChooseCountry}\n              />\n            </DropdownWrapper>\n            {selectedCountry ? (\n              <DropdownWrapper>\n                <Label>{t(\"common:refugeeAddForm.cityOfRefugeLabel\")}</Label>\n                <Dropdown\n                  styles={{\n                    select: commonSelectStyle,\n                  }}\n                  data={cities}\n                  selected={selectedCity}\n                  itemPressFunction={handleChooseCity}\n                  placeholder={t(\"refugeeAddForm.cityPlaceholder\")}\n                />\n              </DropdownWrapper>\n            ) : null}\n          </DropdownsWrapper>\n\n          <SheltersContainer>\n            {shelters.map((shelter) => (\n              <ShelterCard\n                name={shelter.name}\n                fullAddress={`${shelter.address}, ${shelter.city}`}\n                country={shelter.country}\n                key={shelter.howToGetThere}\n                occupancy={shelter.occupancy}\n                phoneNumber={shelter.phoneNumber}\n                howToGetThere={shelter.howToGetThere}\n              />\n            ))}\n          </SheltersContainer>\n        </Content>\n      </Layout>\n    </BackgroundColor>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}