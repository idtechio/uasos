{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport styled from \"styled-components/native\";\nimport InfoIcon from \"../../style/svgs/info.svg\";\nexport var TooltipContainer = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  position: absolute;\\n  bottom: -15px;\\n  background-color: #fff;\\n  border-radius: 10px;\\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\\n  padding: 20px;\\n  min-width: 200px;\\n  max-width: 200px;\\n  border-color: rgba(0, 0, 0, 0.05);\\n  border-width: 1px;\\n  z-index: 100 !important;\\n\"])));\nexport var Tooltip = function Tooltip(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      tooltipVisible = _useState2[0],\n      setTooltipVisible = _useState2[1];\n\n  var containerRef = useRef();\n\n  var _useState3 = useState(15),\n      _useState4 = _slicedToArray(_useState3, 2),\n      leftOffset = _useState4[0],\n      setLeftOffset = _useState4[1];\n\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width;\n\n  useEffect(function () {\n    if (tooltipVisible && Platform.OS === \"web\" && containerRef.current) {\n      var boundingBox = containerRef.current.getBoundingClientRect();\n      var rightEdge = boundingBox.x + boundingBox.width;\n\n      if (rightEdge > width) {\n        var diff = rightEdge - width;\n        setLeftOffset(-diff);\n      }\n    }\n  }, [tooltipVisible, width]);\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    onMouseEnter: function onMouseEnter() {\n      return setTooltipVisible(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setTooltipVisible(false);\n    }\n  }, React.createElement(InfoIcon, null), tooltipVisible && React.createElement(TooltipContainer, {\n    style: {\n      left: leftOffset\n    },\n    ref: containerRef\n  }, children)));\n};","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Tooltip/index.tsx"],"names":["React","useEffect","useRef","useState","styled","InfoIcon","TooltipContainer","View","Tooltip","children","tooltipVisible","setTooltipVisible","containerRef","leftOffset","setLeftOffset","useWindowDimensions","width","Platform","OS","current","boundingBox","getBoundingClientRect","rightEdge","x","diff","left"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;;;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP;AAMA,OAAO,IAAMC,gBAAgB,GAAGF,MAAM,CAACG,IAAV,4WAAtB;AAcP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAyB;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;;AAC9C,kBAA4CN,QAAQ,CAAC,KAAD,CAApD;AAAA;AAAA,MAAOO,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,MAAMC,YAAY,GAAGV,MAAM,EAA3B;;AACA,mBAAoCC,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOU,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,6BAAkBC,mBAAmB,EAArC;AAAA,MAAQC,KAAR,wBAAQA,KAAR;;AAEAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,cAAc,IAAIO,QAAQ,CAACC,EAAT,KAAgB,KAAlC,IAA2CN,YAAY,CAACO,OAA5D,EAAqE;AACnE,UAAMC,WAAW,GAAGR,YAAY,CAACO,OAAb,CAAqBE,qBAArB,EAApB;AAEA,UAAMC,SAAS,GAAGF,WAAW,CAACG,CAAZ,GAAgBH,WAAW,CAACJ,KAA9C;;AAEA,UAAIM,SAAS,GAAGN,KAAhB,EAAuB;AACrB,YAAMQ,IAAI,GAAGF,SAAS,GAAGN,KAAzB;AACAF,QAAAA,aAAa,CAAC,CAACU,IAAF,CAAb;AACD;AACF;AACF,GAXQ,EAWN,CAACd,cAAD,EAAiBM,KAAjB,CAXM,CAAT;AAaA,SACE,0CACE,oBAAC,IAAD;AAGE,IAAA,YAAY,EAAE;AAAA,aAAML,iBAAiB,CAAC,IAAD,CAAvB;AAAA,KAHhB;AAIE,IAAA,YAAY,EAAE;AAAA,aAAMA,iBAAiB,CAAC,KAAD,CAAvB;AAAA;AAJhB,KAME,oBAAC,QAAD,OANF,EAOGD,cAAc,IAEb,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE;AAAEe,MAAAA,IAAI,EAAEZ;AAAR,KAAzB;AAA+C,IAAA,GAAG,EAAED;AAApD,KACGH,QADH,CATJ,CADF,CADF;AAkBD,CAtCM","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { Platform, useWindowDimensions, View } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport InfoIcon from \"../../style/svgs/info.svg\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const TooltipContainer = styled.View`\n  position: absolute;\n  bottom: -15px;\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  padding: 20px;\n  min-width: 200px;\n  max-width: 200px;\n  border-color: rgba(0, 0, 0, 0.05);\n  border-width: 1px;\n  z-index: 100 !important;\n`;\n\nexport const Tooltip = ({ children }: Props) => {\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n  const containerRef = useRef<HTMLElement>();\n  const [leftOffset, setLeftOffset] = useState(15);\n\n  const { width } = useWindowDimensions();\n\n  useEffect(() => {\n    if (tooltipVisible && Platform.OS === \"web\" && containerRef.current) {\n      const boundingBox = containerRef.current.getBoundingClientRect();\n\n      const rightEdge = boundingBox.x + boundingBox.width;\n\n      if (rightEdge > width) {\n        const diff = rightEdge - width;\n        setLeftOffset(-diff);\n      }\n    }\n  }, [tooltipVisible, width]);\n\n  return (\n    <>\n      <View\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        onMouseEnter={() => setTooltipVisible(true)}\n        onMouseLeave={() => setTooltipVisible(false)}\n      >\n        <InfoIcon />\n        {tooltipVisible && (\n          // @ts-expect-error TODO: fix ref type\n          <TooltipContainer style={{ left: leftOffset }} ref={containerRef}>\n            {children}\n          </TooltipContainer>\n        )}\n      </View>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}