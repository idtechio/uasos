{"ast":null,"code":"import React from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport InputControl from \"../Forms/InputControl\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Error } from \"./style\";\nimport { PlacesAutocomplete } from \"../PlacesAutocomplete\";\nexport var CountryCode;\n\n(function (CountryCode) {\n  CountryCode[\"poland\"] = \"pl\";\n  CountryCode[\"hungary\"] = \"hu\";\n  CountryCode[\"czechia\"] = \"cz\";\n  CountryCode[\"slovakia\"] = \"sk\";\n  CountryCode[\"romania\"] = \"ro\";\n})(CountryCode || (CountryCode = {}));\n\nfunction FormGeoAutocomplete(_ref) {\n  var name = _ref.name,\n      errorMsg = _ref.errorMsg,\n      rules = _ref.rules,\n      error = _ref.error,\n      placeholder = _ref.placeholder,\n      zIndex = _ref.zIndex;\n\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control,\n      watch = _useFormContext.watch;\n\n  var country = watch(\"advancedHost.country\");\n  return React.createElement(Controller, {\n    control: control,\n    rules: rules,\n    render: function render(_ref2) {\n      var _ref2$field = _ref2.field,\n          onChange = _ref2$field.onChange,\n          value = _ref2$field.value;\n      return React.createElement(View, {\n        style: {\n          zIndex: zIndex\n        }\n      }, React.createElement(InputControl, {\n        zIndex: zIndex\n      }, React.createElement(PlacesAutocomplete, {\n        value: value,\n        error: error,\n        onChange: onChange,\n        selectedCountry: country,\n        placeholder: placeholder\n      }), error && React.createElement(Error, null, errorMsg)));\n    },\n    name: name\n  });\n}\n\nexport default FormGeoAutocomplete;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Inputs/FormGeoAutocomplete.tsx"],"names":["React","Controller","useFormContext","InputControl","Error","PlacesAutocomplete","CountryCode","FormGeoAutocomplete","name","errorMsg","rules","error","placeholder","zIndex","control","watch","country","field","onChange","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAiCC,cAAjC,QAAuD,iBAAvD;AACA,OAAOC,YAAP;;AAGA,SAASC,KAAT;AACA,SAASC,kBAAT;AAUA,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAUZ,SAASC,mBAAT,OAOmE;AAAA,MANjEC,IAMiE,QANjEA,IAMiE;AAAA,MALjEC,QAKiE,QALjEA,QAKiE;AAAA,MAJjEC,KAIiE,QAJjEA,KAIiE;AAAA,MAHjEC,KAGiE,QAHjEA,KAGiE;AAAA,MAFjEC,WAEiE,QAFjEA,WAEiE;AAAA,MADjEC,MACiE,QADjEA,MACiE;;AACjE,wBAA2BX,cAAc,EAAzC;AAAA,MAAQY,OAAR,mBAAQA,OAAR;AAAA,MAAiBC,KAAjB,mBAAiBA,KAAjB;;AAEA,MAAMC,OAAO,GAAGD,KAAK,CAAC,sBAAD,CAArB;AAEA,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAED,OADX;AAEE,IAAA,KAAK,EAAEJ,KAFT;AAGE,IAAA,MAAM,EAAE,uBAAoC;AAAA,8BAAjCO,KAAiC;AAAA,UAAxBC,QAAwB,eAAxBA,QAAwB;AAAA,UAAdC,KAAc,eAAdA,KAAc;AAC1C,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEN,UAAAA,MAAM,EAANA;AAAF;AAAb,SACE,oBAAC,YAAD;AAAc,QAAA,MAAM,EAAEA;AAAtB,SACE,oBAAC,kBAAD;AACE,QAAA,KAAK,EAAEM,KADT;AAEE,QAAA,KAAK,EAAER,KAFT;AAGE,QAAA,QAAQ,EAAEO,QAHZ;AAIE,QAAA,eAAe,EAAEF,OAJnB;AAKE,QAAA,WAAW,EAAEJ;AALf,QADF,EAQGD,KAAK,IAAI,oBAAC,KAAD,QAAQF,QAAR,CARZ,CADF,CADF;AAcD,KAlBH;AAmBE,IAAA,IAAI,EAAED;AAnBR,IADF;AAuBD;;AAED,eAAeD,mBAAf","sourcesContent":["import React from \"react\";\nimport { Controller, FieldError, useFormContext } from \"react-hook-form\";\nimport InputControl from \"../Forms/InputControl\";\nimport { View } from \"react-native\";\nimport { FormKey } from \"../../helpers/FormTypes\";\nimport { Error } from \"./style\";\nimport { PlacesAutocomplete } from \"../PlacesAutocomplete\";\n\ntype Props = {\n  name: FormKey;\n  placeholder: string;\n  error?: FieldError | FieldError[] | undefined;\n  errorMsg?: string;\n  zIndex?: number;\n};\n\nexport enum CountryCode {\n  poland = \"pl\",\n  hungary = \"hu\",\n  czechia = \"cz\",\n  slovakia = \"sk\",\n  romania = \"ro\",\n}\n\nexport type SelectedCountry = keyof typeof CountryCode;\n\nfunction FormGeoAutocomplete({\n  name,\n  errorMsg,\n  rules,\n  error,\n  placeholder,\n  zIndex,\n}: Props & Pick<React.ComponentProps<typeof Controller>, \"rules\">) {\n  const { control, watch } = useFormContext();\n\n  const country = watch(\"advancedHost.country\") as unknown as SelectedCountry;\n\n  return (\n    <Controller\n      control={control}\n      rules={rules}\n      render={({ field: { onChange, value } }) => {\n        return (\n          <View style={{ zIndex }}>\n            <InputControl zIndex={zIndex}>\n              <PlacesAutocomplete\n                value={value}\n                error={error}\n                onChange={onChange}\n                selectedCountry={country}\n                placeholder={placeholder}\n              />\n              {error && <Error>{errorMsg}</Error>}\n            </InputControl>\n          </View>\n        );\n      }}\n      name={name}\n    />\n  );\n}\n\nexport default FormGeoAutocomplete;\n"]},"metadata":{},"sourceType":"module"}