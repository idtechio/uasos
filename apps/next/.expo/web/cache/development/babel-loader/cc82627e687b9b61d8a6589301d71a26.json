{"ast":null,"code":"import { defineAnimation } from \"./util\";\nexport function withRepeat(_nextAnimation) {\n  'worklet';\n\n  var numberOfReps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var callback = arguments.length > 3 ? arguments[3] : undefined;\n  return defineAnimation(_nextAnimation, function () {\n    'worklet';\n\n    var nextAnimation = typeof _nextAnimation === 'function' ? _nextAnimation() : _nextAnimation;\n\n    function repeat(animation, now) {\n      var finished = nextAnimation.onFrame(nextAnimation, now);\n      animation.current = nextAnimation.current;\n\n      if (finished) {\n        animation.reps += 1;\n\n        if (nextAnimation.callback) {\n          nextAnimation.callback(true, animation.current);\n        }\n\n        if (numberOfReps > 0 && animation.reps >= numberOfReps) {\n          return true;\n        }\n\n        var startValue = reverse ? nextAnimation.current : animation.startValue;\n\n        if (reverse) {\n          nextAnimation.toValue = animation.startValue;\n          animation.startValue = startValue;\n        }\n\n        nextAnimation.onStart(nextAnimation, startValue, now, nextAnimation.previousAnimation);\n        return false;\n      }\n\n      return false;\n    }\n\n    var repCallback = function repCallback(finished) {\n      if (callback) {\n        callback(finished);\n      }\n\n      if (!finished && nextAnimation.callback) {\n        nextAnimation.callback(false);\n      }\n    };\n\n    function onStart(animation, value, now, previousAnimation) {\n      animation.startValue = value;\n      animation.reps = 0;\n      nextAnimation.onStart(nextAnimation, value, now, previousAnimation);\n    }\n\n    return {\n      isHigherOrder: true,\n      onFrame: repeat,\n      onStart: onStart,\n      reps: 0,\n      current: nextAnimation.current,\n      callback: repCallback,\n      startValue: 0\n    };\n  });\n}\nexport function repeat(_nextAnimation) {\n  'worklet';\n\n  var numberOfReps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var callback = arguments.length > 3 ? arguments[3] : undefined;\n  console.warn('Method `repeat` is deprecated. Please use `withRepeat` instead');\n  return withRepeat(_nextAnimation, numberOfReps, reverse, callback);\n}\nexport function loop(nextAnimation) {\n  'worklet';\n\n  var numberOfLoops = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  console.warn('Method `loop` is deprecated. Please use `withRepeat` instead');\n  return repeat(nextAnimation, Math.round(numberOfLoops * 2), true);\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/node_modules/react-native-reanimated/lib/reanimated2/animation/repeat.js"],"names":["defineAnimation","withRepeat","_nextAnimation","numberOfReps","reverse","callback","nextAnimation","repeat","animation","now","finished","onFrame","current","reps","startValue","toValue","onStart","previousAnimation","repCallback","value","isHigherOrder","console","warn","loop","numberOfLoops","Math","round"],"mappings":"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","sourcesContent":["import { defineAnimation } from './util';\nexport function withRepeat(_nextAnimation, numberOfReps = 2, reverse = false, callback) {\n    'worklet';\n    return defineAnimation(_nextAnimation, () => {\n        'worklet';\n        const nextAnimation = typeof _nextAnimation === 'function' ? _nextAnimation() : _nextAnimation;\n        function repeat(animation, now) {\n            const finished = nextAnimation.onFrame(nextAnimation, now);\n            animation.current = nextAnimation.current;\n            if (finished) {\n                animation.reps += 1;\n                // call inner animation's callback on every repetition\n                // as the second argument the animation's current value is passed\n                if (nextAnimation.callback) {\n                    nextAnimation.callback(true /* finished */, animation.current);\n                }\n                if (numberOfReps > 0 && animation.reps >= numberOfReps) {\n                    return true;\n                }\n                const startValue = reverse\n                    ? nextAnimation.current\n                    : animation.startValue;\n                if (reverse) {\n                    nextAnimation.toValue = animation.startValue;\n                    animation.startValue = startValue;\n                }\n                nextAnimation.onStart(nextAnimation, startValue, now, nextAnimation.previousAnimation);\n                return false;\n            }\n            return false;\n        }\n        const repCallback = (finished) => {\n            if (callback) {\n                callback(finished);\n            }\n            // when cancelled call inner animation's callback\n            if (!finished && nextAnimation.callback) {\n                nextAnimation.callback(false /* finished */);\n            }\n        };\n        function onStart(animation, value, now, previousAnimation) {\n            animation.startValue = value;\n            animation.reps = 0;\n            nextAnimation.onStart(nextAnimation, value, now, previousAnimation);\n        }\n        return {\n            isHigherOrder: true,\n            onFrame: repeat,\n            onStart,\n            reps: 0,\n            current: nextAnimation.current,\n            callback: repCallback,\n            startValue: 0,\n        };\n    });\n}\n/**\n * @deprecated Kept for backward compatibility. Will be removed soon.\n */\nexport function repeat(_nextAnimation, numberOfReps = 2, reverse = false, callback) {\n    'worklet';\n    console.warn('Method `repeat` is deprecated. Please use `withRepeat` instead');\n    return withRepeat(_nextAnimation, numberOfReps, reverse, callback);\n}\nexport function loop(nextAnimation, numberOfLoops = 1) {\n    'worklet';\n    console.warn('Method `loop` is deprecated. Please use `withRepeat` instead');\n    return repeat(nextAnimation, Math.round(numberOfLoops * 2), true);\n}\n"]},"metadata":{},"sourceType":"module"}