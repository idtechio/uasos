{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { FirebaseError } from \"@firebase/util\";\nimport { useTranslation } from \"next-i18next\";\nimport { useRouter } from \"next/router\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useCallback, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport { useEditAccount } from \"../../queries/useAccount\";\nimport ButtonCta from \"../EditOfferOptions/ButtonCta\";\nimport { StyledErrorMessage } from \"../FormRegisterUser/styles\";\nimport SmsVerificationModal from \"../SmsVerificationModal\";\nimport { getFormDefaultValues, parseError } from \"./helpers\";\nimport Inputs from \"./Inputs\";\nimport { ContentContainer, ErrorText, FormHeader, ScreenHeader, SuccessMessage, FormFooter } from \"./style\";\nexport default function EditUserProfileForm(_ref) {\n  var account = _ref.account,\n      identity = _ref.identity;\n  var router = useRouter();\n\n  var _useTranslation = useTranslation(\"others\"),\n      t = _useTranslation.t;\n\n  var _useEditAccount = useEditAccount(),\n      mutate = _useEditAccount.mutate,\n      isLoading = _useEditAccount.isLoading,\n      isSuccess = _useEditAccount.isSuccess,\n      isError = _useEditAccount.isError;\n\n  var form = useForm({\n    defaultValues: getFormDefaultValues(account, identity)\n  });\n  var handleSubmit = form.handleSubmit;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      formPayload = _useState2[0],\n      setFormPayload = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmation = _useState4[0],\n      setConfirmation = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      verificationId = _useState6[0],\n      setVerificationId = _useState6[1];\n\n  var _useState7 = useState(\"LINK\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      smsVerificationModalMode = _useState8[0],\n      setSmsVerificationModalMode = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      apiError = _useState10[0],\n      setApiError = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isVerifyPhoneModalLoading = _useState12[0],\n      setIsVerifyPhoneModalLoading = _useState12[1];\n\n  var closeSmsVerificationModal = useCallback(function () {\n    confirmation ? setConfirmation(undefined) : setVerificationId(undefined);\n    setFormPayload(null);\n  }, [confirmation]);\n  var verifyPhone = useCallback(function _callee(phone) {\n    var captcha, confirm;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsVerifyPhoneModalLoading(true);\n            _context.prev = 1;\n            captcha = Authorization.recaptcha ? Authorization.recaptcha : Authorization.initCaptcha(\"recaptcha__container\");\n\n            if (!(phone && captcha)) {\n              _context.next = 19;\n              break;\n            }\n\n            if (identity != null && identity.phoneNumber) {\n              _context.next = 12;\n              break;\n            }\n\n            setSmsVerificationModalMode(\"LINK\");\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(Authorization.linkWithPhone(phone, captcha));\n\n          case 8:\n            confirm = _context.sent;\n            setConfirmation(confirm);\n            _context.next = 19;\n            break;\n\n          case 12:\n            if (!((identity == null ? void 0 : identity.phoneNumber) !== phone)) {\n              _context.next = 19;\n              break;\n            }\n\n            setSmsVerificationModalMode(\"UPDATE\");\n            _context.t0 = setVerificationId;\n            _context.next = 17;\n            return _regeneratorRuntime.awrap(Authorization.initUpdatePhone(phone, captcha));\n\n          case 17:\n            _context.t1 = _context.sent;\n            (0, _context.t0)(_context.t1);\n\n          case 19:\n            _context.next = 25;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t2 = _context[\"catch\"](1);\n\n            if (_context.t2 instanceof Error || _context.t2 instanceof FirebaseError) {\n              setApiError(parseError(_context.t2.message));\n            }\n\n            closeSmsVerificationModal();\n\n          case 25:\n            setIsVerifyPhoneModalLoading(false);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 21]], Promise);\n  }, [closeSmsVerificationModal, identity == null ? void 0 : identity.phoneNumber]);\n  var updateUserProfile = useCallback(function _callee2(payload) {\n    return _regeneratorRuntime.async(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            mutate({\n              payload: payload\n            }, {\n              onError: function onError() {},\n              onSuccess: function onSuccess() {\n                return _regeneratorRuntime.async(function onSuccess$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        router.push(\"/dashboard\");\n\n                      case 1:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }\n            });\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(Authorization.updateMail(payload.email));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [mutate, router]);\n  var onSubmit = useCallback(function _callee3(data) {\n    var payload;\n    return _regeneratorRuntime.async(function _callee3$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            setApiError(null);\n            payload = {\n              name: data.name,\n              email: data.email,\n              phone: data.phonePrefix && data.phone ? \"\" + data.phonePrefix + data.phone : undefined,\n              preferredLang: data.preferredLanguage,\n              smsNotification: data.smsNotification\n            };\n            setFormPayload(payload);\n            (identity == null ? void 0 : identity.phoneNumber) === null && (payload == null ? void 0 : payload.phone) === undefined || (identity == null ? void 0 : identity.phoneNumber) === (payload == null ? void 0 : payload.phone) ? updateUserProfile(payload) : verifyPhone(payload == null ? void 0 : payload.phone);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [identity == null ? void 0 : identity.phoneNumber, updateUserProfile, verifyPhone]);\n  return React.createElement(React.Fragment, null, React.createElement(FormProvider, form, React.createElement(ContentContainer, null, React.createElement(ScreenHeader, null, t(\"forms.userProfile.header\")), React.createElement(FormHeader, null, t(\"forms.userRegistration.enterDetails\")), React.createElement(Inputs, null), apiError && React.createElement(StyledErrorMessage, null, t(apiError)), React.createElement(FormFooter, {\n    style: {\n      flexWrap: \"wrap\"\n    }\n  }, isSuccess && React.createElement(SuccessMessage, null, \"Success\"), isError && React.createElement(ErrorText, null, \"Error\"), React.createElement(ButtonCta, {\n    color: \"primary\",\n    variant: \"outlined\",\n    anchor: t(\"common.buttons.cancel\"),\n    disabled: isLoading,\n    onPress: function onPress() {\n      return router.push(\"/dashboard\");\n    }\n  }), React.createElement(ButtonCta, {\n    disabled: isLoading,\n    isLoading: isLoading || isVerifyPhoneModalLoading,\n    anchor: t(\"common.buttons.update\"),\n    onPress: handleSubmit(onSubmit)\n  })))), (confirmation || verificationId) && (formPayload == null ? void 0 : formPayload.phone) && React.createElement(SmsVerificationModal, {\n    confirmation: confirmation,\n    verificationId: verificationId,\n    phoneNumber: formPayload.phone,\n    setVerificationSuccess: function setVerificationSuccess() {\n      return null;\n    },\n    callback: function callback() {\n      return updateUserProfile(formPayload);\n    },\n    close: closeSmsVerificationModal,\n    mode: smsVerificationModalMode\n  }), React.createElement(View, {\n    nativeID: \"recaptcha__container\"\n  }));\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/EditUserProfileForm/index.tsx"],"names":["FirebaseError","useTranslation","useRouter","React","useCallback","useState","FormProvider","useForm","Authorization","useEditAccount","ButtonCta","StyledErrorMessage","SmsVerificationModal","getFormDefaultValues","parseError","Inputs","ContentContainer","ErrorText","FormHeader","ScreenHeader","SuccessMessage","FormFooter","EditUserProfileForm","account","identity","router","t","mutate","isLoading","isSuccess","isError","form","defaultValues","handleSubmit","formPayload","setFormPayload","undefined","confirmation","setConfirmation","verificationId","setVerificationId","smsVerificationModalMode","setSmsVerificationModalMode","apiError","setApiError","isVerifyPhoneModalLoading","setIsVerifyPhoneModalLoading","closeSmsVerificationModal","verifyPhone","phone","captcha","recaptcha","initCaptcha","phoneNumber","linkWithPhone","confirm","initUpdatePhone","Error","message","updateUserProfile","payload","onError","onSuccess","push","updateMail","email","onSubmit","data","name","phonePrefix","preferredLang","preferredLanguage","smsNotification","flexWrap"],"mappings":"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","sourcesContent":["import { FirebaseError } from \"@firebase/util\";\nimport { ConfirmationResult, User } from \"firebase/auth\";\nimport { useTranslation } from \"next-i18next\";\nimport { useRouter } from \"next/router\";\nimport { View } from \"react-native\";\nimport React, { useCallback, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { getAccountDTO } from \"../../client-api/account\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport { useEditAccount } from \"../../queries/useAccount\";\nimport ButtonCta from \"../EditOfferOptions/ButtonCta\";\nimport { StyledErrorMessage } from \"../FormRegisterUser/styles\";\nimport SmsVerificationModal from \"../SmsVerificationModal\";\nimport { getFormDefaultValues, parseError } from \"./helpers\";\nimport Inputs from \"./Inputs\";\nimport {\n  ContentContainer,\n  ErrorText,\n  FormHeader,\n  ScreenHeader,\n  SuccessMessage,\n  FormFooter,\n} from \"./style\";\n\nimport { EditProfileForm } from \"./types\";\n\ntype Props = {\n  account: getAccountDTO | null;\n  identity?: User | null;\n};\n\nexport default function EditUserProfileForm({ account, identity }: Props) {\n  const router = useRouter();\n  const { t } = useTranslation(\"others\");\n  const { mutate, isLoading, isSuccess, isError } = useEditAccount();\n\n  const form = useForm<EditProfileForm>({\n    defaultValues: getFormDefaultValues(account, identity),\n  });\n  const { handleSubmit } = form;\n  const [formPayload, setFormPayload] = useState<EditProfileForm | null>(null);\n\n  const [confirmation, setConfirmation] = useState<\n    ConfirmationResult | undefined\n  >(undefined);\n  const [verificationId, setVerificationId] = useState<string | undefined>(\n    undefined\n  );\n  const [smsVerificationModalMode, setSmsVerificationModalMode] = useState<\n    \"LINK\" | \"UPDATE\"\n  >(\"LINK\");\n  const [apiError, setApiError] = useState<string | null>(null);\n  const [isVerifyPhoneModalLoading, setIsVerifyPhoneModalLoading] =\n    useState<boolean>(false);\n\n  const closeSmsVerificationModal = useCallback(() => {\n    confirmation ? setConfirmation(undefined) : setVerificationId(undefined);\n    setFormPayload(null);\n  }, [confirmation]);\n\n  const verifyPhone = useCallback(\n    async (phone) => {\n      setIsVerifyPhoneModalLoading(true);\n\n      try {\n        const captcha = Authorization.recaptcha\n          ? Authorization.recaptcha\n          : Authorization.initCaptcha(\"recaptcha__container\");\n        if (phone && captcha) {\n          if (!identity?.phoneNumber) {\n            setSmsVerificationModalMode(\"LINK\");\n            const confirm = await Authorization.linkWithPhone(phone, captcha);\n            setConfirmation(confirm);\n          } else if (identity?.phoneNumber !== phone) {\n            setSmsVerificationModalMode(\"UPDATE\");\n            setVerificationId(\n              await Authorization.initUpdatePhone(phone, captcha)\n            );\n          }\n        }\n      } catch (error: unknown) {\n        if (error instanceof Error || error instanceof FirebaseError) {\n          setApiError(parseError(error.message));\n        }\n        closeSmsVerificationModal();\n      }\n      setIsVerifyPhoneModalLoading(false);\n    },\n    [closeSmsVerificationModal, identity?.phoneNumber]\n  );\n\n  const updateUserProfile = useCallback(\n    async (payload) => {\n      mutate(\n        { payload },\n        {\n          onError: () => {\n            // Set error message\n          },\n          onSuccess: async () => {\n            router.push(\"/dashboard\");\n          },\n        }\n      );\n      await Authorization.updateMail(payload.email);\n    },\n    [mutate, router]\n  );\n\n  const onSubmit = useCallback(\n    async (data: EditProfileForm) => {\n      setApiError(null);\n      const payload = {\n        name: data.name,\n        email: data.email,\n        phone:\n          data.phonePrefix && data.phone\n            ? `${data.phonePrefix}${data.phone}`\n            : undefined,\n        preferredLang: data.preferredLanguage,\n        smsNotification: data.smsNotification,\n      };\n      setFormPayload(payload);\n      (identity?.phoneNumber === null && payload?.phone === undefined) ||\n      identity?.phoneNumber === payload?.phone\n        ? updateUserProfile(payload)\n        : verifyPhone(payload?.phone);\n    },\n    [identity?.phoneNumber, updateUserProfile, verifyPhone]\n  );\n\n  return (\n    <>\n      <FormProvider {...form}>\n        <ContentContainer>\n          <ScreenHeader>{t(\"forms.userProfile.header\")}</ScreenHeader>\n          <FormHeader>{t(\"forms.userRegistration.enterDetails\")}</FormHeader>\n          <Inputs />\n          {apiError && <StyledErrorMessage>{t(apiError)}</StyledErrorMessage>}\n          <FormFooter style={{ flexWrap: \"wrap\" }}>\n            {isSuccess && <SuccessMessage>Success</SuccessMessage>}\n            {isError && <ErrorText>Error</ErrorText>}\n\n            <ButtonCta\n              color=\"primary\"\n              variant=\"outlined\"\n              anchor={t(\"common.buttons.cancel\")}\n              disabled={isLoading}\n              onPress={() => router.push(\"/dashboard\")}\n            />\n            <ButtonCta\n              disabled={isLoading}\n              isLoading={isLoading || isVerifyPhoneModalLoading}\n              anchor={t(\"common.buttons.update\")}\n              onPress={handleSubmit(onSubmit)}\n            />\n          </FormFooter>\n        </ContentContainer>\n      </FormProvider>\n      {(confirmation || verificationId) && formPayload?.phone && (\n        <SmsVerificationModal\n          confirmation={confirmation}\n          verificationId={verificationId}\n          phoneNumber={formPayload.phone}\n          setVerificationSuccess={() => null}\n          callback={() => updateUserProfile(formPayload)}\n          close={closeSmsVerificationModal}\n          mode={smsVerificationModalMode}\n        />\n      )}\n      <View nativeID=\"recaptcha__container\" />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}