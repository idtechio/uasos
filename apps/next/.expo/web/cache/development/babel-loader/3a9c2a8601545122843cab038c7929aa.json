{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport InputControl from \"../Forms/InputControl\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Dropdown } from \"../Dropdown\";\nimport { Error } from \"./style\";\n\nfunction FormDropdown(_ref) {\n  var name = _ref.name,\n      label = _ref.label,\n      errorMsg = _ref.errorMsg,\n      rules = _ref.rules,\n      error = _ref.error,\n      data = _ref.data,\n      placeholder = _ref.placeholder,\n      zIndex = _ref.zIndex,\n      _ref$multiSelect = _ref.multiSelect,\n      multiSelect = _ref$multiSelect === void 0 ? false : _ref$multiSelect;\n\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control;\n\n  return React.createElement(Controller, {\n    control: control,\n    rules: rules,\n    render: function render(_ref2) {\n      var _ref2$field = _ref2.field,\n          onChange = _ref2$field.onChange,\n          onBlur = _ref2$field.onBlur,\n          value = _ref2$field.value;\n\n      var handleChange = function handleChange(selected) {\n        if (multiSelect) {\n          var items = value != null ? value : [];\n\n          if (items.includes(selected)) {\n            onChange(items.filter(function (v) {\n              return v !== selected;\n            }));\n          } else {\n            onChange([].concat(_toConsumableArray(items), [selected]));\n          }\n        } else {\n          onChange(selected);\n        }\n      };\n\n      return React.createElement(View, {\n        style: {\n          zIndex: zIndex\n        }\n      }, React.createElement(InputControl, null, React.createElement(Dropdown, {\n        multiselect: multiSelect,\n        data: data,\n        placeholder: placeholder,\n        label: label,\n        itemPressFunction: handleChange,\n        onBlur: onBlur,\n        selected: value,\n        error: !!error\n      }), error && React.createElement(Error, null, errorMsg)));\n    },\n    name: name\n  });\n}\n\nexport default FormDropdown;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Inputs/FormDropdown.tsx"],"names":["React","Controller","useFormContext","InputControl","Dropdown","Error","FormDropdown","name","label","errorMsg","rules","error","data","placeholder","zIndex","multiSelect","control","field","onChange","onBlur","value","handleChange","selected","items","includes","filter","v"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAiCC,cAAjC,QAAuD,iBAAvD;AACA,OAAOC,YAAP;;AAIA,SAASC,QAAT;AACA,SAASC,KAAT;;AAWA,SAASC,YAAT,OAUa;AAAA,MATXC,IASW,QATXA,IASW;AAAA,MARXC,KAQW,QARXA,KAQW;AAAA,MAPXC,QAOW,QAPXA,QAOW;AAAA,MANXC,KAMW,QANXA,KAMW;AAAA,MALXC,KAKW,QALXA,KAKW;AAAA,MAJXC,IAIW,QAJXA,IAIW;AAAA,MAHXC,WAGW,QAHXA,WAGW;AAAA,MAFXC,MAEW,QAFXA,MAEW;AAAA,8BADXC,WACW;AAAA,MADXA,WACW,iCADG,KACH;;AACX,wBAAoBb,cAAc,EAAlC;AAAA,MAAQc,OAAR,mBAAQA,OAAR;;AAEA,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,KAAK,EAAEN,KAFT;AAGE,IAAA,MAAM,EAAE,uBAA4C;AAAA,8BAAzCO,KAAyC;AAAA,UAAhCC,QAAgC,eAAhCA,QAAgC;AAAA,UAAtBC,MAAsB,eAAtBA,MAAsB;AAAA,UAAdC,KAAc,eAAdA,KAAc;;AAClD,UAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAiB;AACpC,YAAIP,WAAJ,EAAiB;AACf,cAAMQ,KAAU,GAAGH,KAAH,WAAGA,KAAH,GAAY,EAA5B;;AAEA,cAAIG,KAAK,CAACC,QAAN,CAAeF,QAAf,CAAJ,EAA8B;AAC5BJ,YAAAA,QAAQ,CAACK,KAAK,CAACE,MAAN,CAAa,UAACC,CAAD;AAAA,qBAAOA,CAAC,KAAKJ,QAAb;AAAA,aAAb,CAAD,CAAR;AACD,WAFD,MAEO;AACLJ,YAAAA,QAAQ,8BAAKK,KAAL,IAAYD,QAAZ,GAAR;AACD;AACF,SARD,MAQO;AACLJ,UAAAA,QAAQ,CAACI,QAAD,CAAR;AACD;AACF,OAZD;;AAcA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAER,UAAAA,MAAM,EAANA;AAAF;AAAb,SACE,oBAAC,YAAD,QACE,oBAAC,QAAD;AACE,QAAA,WAAW,EAAEC,WADf;AAEE,QAAA,IAAI,EAAEH,IAFR;AAGE,QAAA,WAAW,EAAEC,WAHf;AAIE,QAAA,KAAK,EAAEL,KAJT;AAKE,QAAA,iBAAiB,EAAEa,YALrB;AAME,QAAA,MAAM,EAAEF,MANV;AAOE,QAAA,QAAQ,EAAEC,KAPZ;AAQE,QAAA,KAAK,EAAE,CAAC,CAACT;AARX,QADF,EAWGA,KAAK,IAAI,oBAAC,KAAD,QAAQF,QAAR,CAXZ,CADF,CADF;AAiBD,KAnCH;AAoCE,IAAA,IAAI,EAAEF;AApCR,IADF;AAwCD;;AAED,eAAeD,YAAf","sourcesContent":["import React from \"react\";\nimport { Controller, FieldError, useFormContext } from \"react-hook-form\";\nimport InputControl from \"../Forms/InputControl\";\nimport { View } from \"react-native\";\nimport { FormKey } from \"../../helpers/FormTypes\";\nimport { DropdownProps } from \"../Dropdown/types\";\nimport { Dropdown } from \"../Dropdown\";\nimport { Error } from \"./style\";\n\ntype Props<T> = {\n  name: FormKey;\n  error?: FieldError | FieldError[];\n  errorMsg?: string;\n  multiSelect?: boolean;\n  zIndex?: number;\n} & Pick<DropdownProps<T>, \"label\" | \"placeholder\" | \"data\"> &\n  Pick<React.ComponentProps<typeof Controller>, \"rules\">;\n\nfunction FormDropdown<T>({\n  name,\n  label,\n  errorMsg,\n  rules,\n  error,\n  data,\n  placeholder,\n  zIndex,\n  multiSelect = false,\n}: Props<T>) {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      rules={rules}\n      render={({ field: { onChange, onBlur, value } }) => {\n        const handleChange = (selected: T) => {\n          if (multiSelect) {\n            const items: T[] = value ?? [];\n\n            if (items.includes(selected)) {\n              onChange(items.filter((v) => v !== selected));\n            } else {\n              onChange([...items, selected]);\n            }\n          } else {\n            onChange(selected);\n          }\n        };\n\n        return (\n          <View style={{ zIndex }}>\n            <InputControl>\n              <Dropdown<T>\n                multiselect={multiSelect}\n                data={data}\n                placeholder={placeholder}\n                label={label}\n                itemPressFunction={handleChange}\n                onBlur={onBlur}\n                selected={value}\n                error={!!error}\n              />\n              {error && <Error>{errorMsg}</Error>}\n            </InputControl>\n          </View>\n        );\n      }}\n      name={name}\n    />\n  );\n}\n\nexport default FormDropdown;\n"]},"metadata":{},"sourceType":"module"}