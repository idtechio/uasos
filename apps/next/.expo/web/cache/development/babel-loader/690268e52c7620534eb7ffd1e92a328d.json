{"ast":null,"code":"import { Controller, useFormContext } from \"react-hook-form\";\nimport { Error } from \"./style\";\nimport Input from \"../Forms/Input\";\nimport InputControl from \"../Forms/InputControl\";\n\nvar FormTextInput = function FormTextInput(_ref) {\n  var name = _ref.name,\n      label = _ref.label,\n      errorMsg = _ref.errorMsg,\n      rules = _ref.rules,\n      error = _ref.error,\n      extra = _ref.extra,\n      secureTextEntry = _ref.secureTextEntry,\n      readonly = _ref.readonly,\n      styles = _ref.styles,\n      zIndex = _ref.zIndex;\n\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control;\n\n  return React.createElement(Controller, {\n    control: control,\n    rules: rules,\n    render: function render(_ref2) {\n      var _ref2$field = _ref2.field,\n          onChange = _ref2$field.onChange,\n          onBlur = _ref2$field.onBlur,\n          value = _ref2$field.value;\n      return React.createElement(InputControl, {\n        zIndex: zIndex\n      }, React.createElement(Input, {\n        placeholder: label,\n        onChange: onChange,\n        value: value,\n        onBlur: onBlur,\n        error: error,\n        extra: extra,\n        secureTextEntry: secureTextEntry,\n        readonly: readonly,\n        styles: styles\n      }), error && React.createElement(Error, null, errorMsg));\n    },\n    name: name\n  });\n};\n\nexport default FormTextInput;","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/Inputs/FormTextInput.tsx"],"names":["Controller","useFormContext","Error","Input","InputControl","FormTextInput","name","label","errorMsg","rules","error","extra","secureTextEntry","readonly","styles","zIndex","control","field","onChange","onBlur","value"],"mappings":"AAAA,SAASA,UAAT,EAAiCC,cAAjC,QAAuD,iBAAvD;AAEA,SAASC,KAAT;AACA,OAAOC,KAAP;AACA,OAAOC,YAAP;;AAgBA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAWT;AAAA,MAVXC,IAUW,QAVXA,IAUW;AAAA,MATXC,KASW,QATXA,KASW;AAAA,MARXC,QAQW,QARXA,QAQW;AAAA,MAPXC,KAOW,QAPXA,KAOW;AAAA,MANXC,KAMW,QANXA,KAMW;AAAA,MALXC,KAKW,QALXA,KAKW;AAAA,MAJXC,eAIW,QAJXA,eAIW;AAAA,MAHXC,QAGW,QAHXA,QAGW;AAAA,MAFXC,MAEW,QAFXA,MAEW;AAAA,MADXC,MACW,QADXA,MACW;;AACX,wBAAoBd,cAAc,EAAlC;AAAA,MAAQe,OAAR,mBAAQA,OAAR;;AACA,SACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,KAAK,EAAEP,KAFT;AAGE,IAAA,MAAM,EAAE;AAAA,8BAAGQ,KAAH;AAAA,UAAYC,QAAZ,eAAYA,QAAZ;AAAA,UAAsBC,MAAtB,eAAsBA,MAAtB;AAAA,UAA8BC,KAA9B,eAA8BA,KAA9B;AAAA,aACN,oBAAC,YAAD;AAAc,QAAA,MAAM,EAAEL;AAAtB,SACE,oBAAC,KAAD;AACE,QAAA,WAAW,EAAER,KADf;AAEE,QAAA,QAAQ,EAAEW,QAFZ;AAGE,QAAA,KAAK,EAAEE,KAHT;AAIE,QAAA,MAAM,EAAED,MAJV;AAKE,QAAA,KAAK,EAAET,KALT;AAME,QAAA,KAAK,EAAEC,KANT;AAOE,QAAA,eAAe,EAAEC,eAPnB;AAQE,QAAA,QAAQ,EAAEC,QARZ;AASE,QAAA,MAAM,EAAEC;AATV,QADF,EAYGJ,KAAK,IAAI,oBAAC,KAAD,QAAQF,QAAR,CAZZ,CADM;AAAA,KAHV;AAmBE,IAAA,IAAI,EAAEF;AAnBR,IADF;AAuBD,CApCD;;AAqCA,eAAeD,aAAf","sourcesContent":["import { Controller, FieldError, useFormContext } from \"react-hook-form\";\n\nimport { Error } from \"./style\";\nimport Input from \"../Forms/Input\";\nimport InputControl from \"../Forms/InputControl\";\nimport { FormKey } from \"../../helpers/FormTypes\";\nimport { InputStylesProps } from \"../Forms/Input/types\";\n\ntype Props = {\n  name: FormKey;\n  label: string;\n  error?: FieldError;\n  errorMsg?: string;\n  extra?: React.ReactNode;\n  secureTextEntry?: boolean;\n  readonly?: boolean;\n  styles?: InputStylesProps;\n  zIndex?: number;\n} & Pick<React.ComponentProps<typeof Controller>, \"rules\">;\n\nconst FormTextInput = ({\n  name,\n  label,\n  errorMsg,\n  rules,\n  error,\n  extra,\n  secureTextEntry,\n  readonly,\n  styles,\n  zIndex,\n}: Props) => {\n  const { control } = useFormContext();\n  return (\n    <Controller\n      control={control}\n      rules={rules}\n      render={({ field: { onChange, onBlur, value } }) => (\n        <InputControl zIndex={zIndex}>\n          <Input\n            placeholder={label}\n            onChange={onChange}\n            value={value}\n            onBlur={onBlur}\n            error={error}\n            extra={extra}\n            secureTextEntry={secureTextEntry}\n            readonly={readonly}\n            styles={styles}\n          />\n          {error && <Error>{errorMsg}</Error>}\n        </InputControl>\n      )}\n      name={name}\n    />\n  );\n};\nexport default FormTextInput;\n"]},"metadata":{},"sourceType":"module"}