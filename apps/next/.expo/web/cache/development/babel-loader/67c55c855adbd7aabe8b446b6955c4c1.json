{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"status\", \"disabled\", \"onPress\", \"theme\", \"testID\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckboxIOS = exports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar CheckboxIOS = function CheckboxIOS(_ref) {\n  var status = _ref.status,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n  var checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  var rippleColor;\n\n  if (disabled) {\n    rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();\n  }\n\n  var icon = indeterminate ? 'minus' : 'check';\n  return React.createElement(_TouchableRipple.default, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), React.createElement(_reactNative.View, {\n    style: {\n      opacity: indeterminate || checked ? 1 : 0\n    }\n  }, React.createElement(_MaterialCommunityIcon.default, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\n\nvar _default = (0, _theming.withTheme)(CheckboxIOS);\n\nexports.default = _default;\nvar CheckboxIOSWithTheme = (0, _theming.withTheme)(CheckboxIOS);\nexports.CheckboxIOS = CheckboxIOSWithTheme;","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","rest","checked","status","indeterminate","checkedColor","disabled","theme","rippleColor","icon","styles","testID","opacity","container","borderRadius","padding","CheckboxIOSWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"script"}