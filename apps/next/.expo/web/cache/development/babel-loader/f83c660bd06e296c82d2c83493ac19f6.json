{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useMemo, useCallback, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CardModal from \"../../CardModal\";\nimport DeleteOfferForm from \"../DeleteOffer\";\nimport RenewOffer from \"../RenewOffer\";\nimport ReportOffer from \"../ReportOffer\";\nimport { useWebHandleClickOutside } from \"./index.hooks\";\nimport { ButtonContainer, CardModalStyle, Icons, ListButton, Options, TriggerButton } from \"./style\";\nimport { Routes } from \"../../../consts/router\";\nimport { useRouter } from \"next/router\";\nimport { TargetTypes } from \"./types\";\nimport { GuestHostType } from \"../../SupportSection/mapper\";\nvar AlertIcon = Icons.AlertIcon,\n    BinIcon = Icons.BinIcon,\n    ClockIcon = Icons.ClockIcon,\n    EditIcon = Icons.EditIcon;\nexport var EditOfferContext = createContext({\n  targetType: \"hosts\",\n  targetID: \"\",\n  matchID: \"\"\n});\nexport default function EditOfferButton(_ref) {\n  var targetID = _ref.targetID,\n      targetType = _ref.targetType,\n      matchID = _ref.matchID,\n      targetStatusType = _ref.targetStatusType;\n  var containerRef = useRef(null);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var router = useRouter();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      popoverOpened = _useState2[0],\n      setPopoverOpened = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalOpened = _useState4[0],\n      setModalOpened = _useState4[1];\n\n  var getButtonList = useMemo(function () {\n    return [{\n      icon: React.createElement(ClockIcon, null),\n      type: \"renew\",\n      hide: targetStatusType !== GuestHostType.INACTIVE,\n      label: \"others:common.words.renew\"\n    }, {\n      icon: React.createElement(EditIcon, null),\n      type: \"edit\",\n      hide: !!matchID || targetStatusType === GuestHostType.INACTIVE,\n      label: \"others:desktop.contextMenu.edit\"\n    }, {\n      icon: React.createElement(AlertIcon, null),\n      type: \"report\",\n      hide: targetStatusType !== GuestHostType.CONFIRMED,\n      label: \"others:desktop.contextMenu.reportProblem\"\n    }, {\n      icon: React.createElement(BinIcon, null),\n      type: \"delete\",\n      hide: targetStatusType === GuestHostType.CONFIRMED,\n      label: \"hostAdd.accomodationPhotoReset\"\n    }];\n  }, [matchID, targetStatusType]);\n  var getEditButtonLink = useMemo(function () {\n    return (targetType === TargetTypes.HOSTS ? Routes.HOST : Routes.GUEST) + \"?id=\" + targetID;\n  }, [targetID, targetType]);\n  var onTriggerPress = useCallback(function () {\n    return setPopoverOpened(function (currentValue) {\n      return !currentValue;\n    });\n  }, []);\n  var closeModal = useCallback(function () {\n    return setModalOpened(null);\n  }, []);\n\n  var triggerModal = function triggerModal(modalType) {\n    return function () {\n      return setModalOpened(modalType);\n    };\n  };\n\n  var Modal = useCallback(function () {\n    var modalComponent = null;\n\n    switch (modalOpened) {\n      case \"delete\":\n        modalComponent = React.createElement(DeleteOfferForm, {\n          close: closeModal,\n          targetID: targetID,\n          targetType: targetType\n        });\n        break;\n\n      case \"renew\":\n        modalComponent = React.createElement(RenewOffer, {\n          close: closeModal,\n          targetID: targetID,\n          targetType: targetType\n        });\n        break;\n\n      case \"report\":\n        modalComponent = React.createElement(ReportOffer, {\n          close: closeModal\n        });\n        break;\n\n      case \"edit\":\n        modalComponent = null;\n        router.push(getEditButtonLink);\n        break;\n\n      default:\n        modalComponent = null;\n    }\n\n    return modalComponent && React.createElement(CardModal, {\n      closeable: false,\n      cardStyle: CardModalStyle\n    }, modalComponent);\n  }, [modalOpened, closeModal, targetID, targetType, router, getEditButtonLink]);\n  var PopoverOptions = useCallback(function () {\n    return React.createElement(Options, null, getButtonList.map(function (button, i, array) {\n      if (button.hide) {\n        return React.createElement(React.Fragment, null);\n      }\n\n      return React.createElement(ListButton, {\n        key: button.type,\n        icon: button.icon,\n        withBottomBorder: i !== array.length - 1,\n        onPress: triggerModal(button.type)\n      }, t(button.label));\n    }));\n  }, [getButtonList, t]);\n  useWebHandleClickOutside(containerRef, popoverOpened, function () {\n    return setPopoverOpened(false);\n  });\n\n  if (!getButtonList.filter(function (b) {\n    return !b.hide;\n  }).length) {\n    return null;\n  }\n\n  return React.createElement(ButtonContainer, {\n    ref: function ref(_ref2) {\n      return containerRef.current = _ref2;\n    }\n  }, React.createElement(TriggerButton, {\n    onPress: onTriggerPress\n  }), React.createElement(EditOfferContext.Provider, {\n    value: {\n      targetType: targetType,\n      targetID: targetID,\n      matchID: matchID\n    }\n  }, React.createElement(Modal, null)), popoverOpened && React.createElement(PopoverOptions, null));\n}","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/EditOfferOptions/EditOfferButton/index.tsx"],"names":["React","createContext","useMemo","useCallback","useRef","useState","useTranslation","CardModal","DeleteOfferForm","RenewOffer","ReportOffer","useWebHandleClickOutside","ButtonContainer","CardModalStyle","Icons","ListButton","Options","TriggerButton","Routes","useRouter","TargetTypes","GuestHostType","AlertIcon","BinIcon","ClockIcon","EditIcon","EditOfferContext","targetType","targetID","matchID","EditOfferButton","targetStatusType","containerRef","t","router","popoverOpened","setPopoverOpened","modalOpened","setModalOpened","getButtonList","icon","type","hide","INACTIVE","label","CONFIRMED","getEditButtonLink","HOSTS","HOST","GUEST","onTriggerPress","currentValue","closeModal","triggerModal","modalType","Modal","modalComponent","push","PopoverOptions","map","button","i","array","length","filter","b","ref","current"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useMemo,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { View } from \"react-native\";\nimport CardModal from \"../../CardModal\";\nimport DeleteOfferForm from \"../DeleteOffer\";\nimport RenewOffer from \"../RenewOffer\";\nimport ReportOffer from \"../ReportOffer\";\nimport { useWebHandleClickOutside } from \"./index.hooks\";\nimport {\n  ButtonContainer,\n  CardModalStyle,\n  Icons,\n  ListButton,\n  Options,\n  TriggerButton,\n} from \"./style\";\nimport { Routes } from \"../../../consts/router\";\nimport { useRouter } from \"next/router\";\nimport { ModalTypes, TargetTypes } from \"./types\";\nimport { GuestHostType } from \"../../SupportSection/mapper\";\n\nconst { AlertIcon, BinIcon, ClockIcon, EditIcon } = Icons;\n\nexport const EditOfferContext = createContext<{\n  targetID: string;\n  targetType: \"hosts\" | \"guests\";\n  matchID?: string | null;\n}>({ targetType: \"hosts\", targetID: \"\", matchID: \"\" });\n\nexport default function EditOfferButton({\n  targetID,\n  targetType,\n  matchID,\n  targetStatusType,\n}: {\n  targetID: string;\n  matchID?: string | null;\n  targetType: TargetTypes;\n  targetStatusType: string;\n}) {\n  const containerRef = useRef<View | null>(null);\n\n  const { t } = useTranslation();\n  const router = useRouter();\n\n  const [popoverOpened, setPopoverOpened] = useState(false);\n  const [modalOpened, setModalOpened] = useState<ModalTypes>(null);\n\n  const getButtonList = useMemo(\n    () => [\n      {\n        icon: <ClockIcon />,\n        type: \"renew\",\n        hide: targetStatusType !== GuestHostType.INACTIVE,\n        label: \"others:common.words.renew\",\n      },\n      {\n        icon: <EditIcon />,\n        type: \"edit\",\n        hide: !!matchID || targetStatusType === GuestHostType.INACTIVE,\n        label: \"others:desktop.contextMenu.edit\",\n      },\n      {\n        icon: <AlertIcon />,\n        type: \"report\",\n        hide: targetStatusType !== GuestHostType.CONFIRMED,\n        label: \"others:desktop.contextMenu.reportProblem\",\n      },\n      {\n        icon: <BinIcon />,\n        type: \"delete\",\n        hide: targetStatusType === GuestHostType.CONFIRMED,\n        label: \"hostAdd.accomodationPhotoReset\",\n      },\n    ],\n    [matchID, targetStatusType]\n  );\n\n  const getEditButtonLink = useMemo(\n    () =>\n      `${\n        targetType === TargetTypes.HOSTS ? Routes.HOST : Routes.GUEST\n      }?id=${targetID}`,\n    [targetID, targetType]\n  );\n\n  const onTriggerPress = useCallback(\n    () => setPopoverOpened((currentValue) => !currentValue),\n    []\n  );\n\n  const closeModal = useCallback(() => setModalOpened(null), []);\n\n  const triggerModal = (modalType: ModalTypes) => () =>\n    setModalOpened(modalType);\n\n  const Modal = useCallback(() => {\n    let modalComponent = null;\n\n    switch (modalOpened) {\n      case \"delete\":\n        modalComponent = (\n          <DeleteOfferForm\n            close={closeModal}\n            targetID={targetID}\n            targetType={targetType}\n          />\n        );\n        break;\n\n      case \"renew\":\n        modalComponent = (\n          <RenewOffer\n            close={closeModal}\n            targetID={targetID}\n            targetType={targetType}\n          />\n        );\n        break;\n\n      case \"report\":\n        modalComponent = <ReportOffer close={closeModal} />;\n        break;\n\n      case \"edit\":\n        modalComponent = null;\n        router.push(getEditButtonLink);\n        break;\n\n      default:\n        modalComponent = null;\n    }\n\n    return (\n      modalComponent && (\n        <CardModal closeable={false} cardStyle={CardModalStyle}>\n          {modalComponent}\n        </CardModal>\n      )\n    );\n  }, [\n    modalOpened,\n    closeModal,\n    targetID,\n    targetType,\n    router,\n    getEditButtonLink,\n  ]);\n\n  const PopoverOptions = useCallback(\n    () => (\n      <Options>\n        {getButtonList.map((button, i, array) => {\n          if (button.hide) {\n            return <></>;\n          }\n\n          return (\n            <ListButton\n              key={button.type}\n              icon={button.icon}\n              withBottomBorder={i !== array.length - 1}\n              onPress={triggerModal(button.type as ModalTypes)}\n            >\n              {t(button.label)}\n            </ListButton>\n          );\n        })}\n      </Options>\n    ),\n    [getButtonList, t]\n  );\n\n  useWebHandleClickOutside(containerRef, popoverOpened, () =>\n    setPopoverOpened(false)\n  );\n\n  if (!getButtonList.filter((b) => !b.hide).length) {\n    return null;\n  }\n\n  return (\n    <ButtonContainer ref={(ref) => (containerRef.current = ref)}>\n      <TriggerButton onPress={onTriggerPress} />\n      <EditOfferContext.Provider value={{ targetType, targetID, matchID }}>\n        <Modal />\n      </EditOfferContext.Provider>\n      {popoverOpened && <PopoverOptions />}\n    </ButtonContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}