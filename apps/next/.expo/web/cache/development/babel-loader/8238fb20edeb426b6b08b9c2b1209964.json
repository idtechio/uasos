{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLazyRef;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction useLazyRef(callback) {\n  var lazyRef = React.useRef();\n\n  if (lazyRef.current === undefined) {\n    lazyRef.current = callback();\n  }\n\n  return lazyRef;\n}","map":{"version":3,"sources":["useLazyRef.tsx"],"names":["lazyRef","React","callback"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEe,SAAA,UAAA,CAAA,QAAA,EAA0C;AACvD,MAAMA,OAAO,GAAGC,KAAK,CAArB,MAAgBA,EAAhB;;AAEA,MAAID,OAAO,CAAPA,OAAAA,KAAJ,SAAA,EAAmC;AACjCA,IAAAA,OAAO,CAAPA,OAAAA,GAAkBE,QAAlBF,EAAAA;AACD;;AAED,SAAA,OAAA;AACD","sourcesContent":["import * as React from 'react';\n\nexport default function useLazyRef<T>(callback: () => T) {\n  const lazyRef = React.useRef<T | undefined>();\n\n  if (lazyRef.current === undefined) {\n    lazyRef.current = callback();\n  }\n\n  return lazyRef as React.MutableRefObject<T>;\n}\n"]},"metadata":{},"sourceType":"script"}