{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from \"../handlers/PanGestureHandler\";\nimport { TapGestureHandler } from \"../handlers/TapGestureHandler\";\nimport { State } from \"../State\";\nvar DRAG_TOSS = 0.05;\n\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n\n  var _super = _createSuper(Swipeable);\n\n  function Swipeable(_props) {\n    var _this;\n\n    _classCallCheck(this, Swipeable);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"transX\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"showLeftAction\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"leftActionTranslate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"showRightAction\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"rightActionTranslate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateAnimatedEvent\", function (props, state) {\n      var friction = props.friction,\n          overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n          rowTranslation = state.rowTranslation,\n          _state$leftWidth = state.leftWidth,\n          leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n          _state$rowWidth = state.rowWidth,\n          rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n          rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n          overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n          _props$overshootRight = props.overshootRight,\n          overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n        outputRange: [-rightWidth - (overshootRight ? 1 / overshootFriction : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 / overshootFriction : 0)]\n      });\n      _this.transX = transX;\n      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this.leftActionTranslate = _this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this.rightActionTranslate = _this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTapHandlerStateChange\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandlerStateChange\", function (ev) {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease(ev);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRelease\", function (ev) {\n      var _ev$nativeEvent = ev.nativeEvent,\n          velocityX = _ev$nativeEvent.velocityX,\n          dragX = _ev$nativeEvent.translationX;\n      var _this$state = _this.state,\n          _this$state$leftWidth = _this$state.leftWidth,\n          leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n          _this$state$rowWidth = _this$state.rowWidth,\n          rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n          rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props5 = _this.props,\n          friction = _this$props5.friction,\n          _this$props5$leftThre = _this$props5.leftThreshold,\n          leftThreshold = _this$props5$leftThre === void 0 ? leftWidth / 2 : _this$props5$leftThre,\n          _this$props5$rightThr = _this$props5.rightThreshold,\n          rightThreshold = _this$props5$rightThr === void 0 ? rightWidth / 2 : _this$props5$rightThr;\n      var startOffsetX = _this.currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      _this.animateRow(startOffsetX, toValue, velocityX / friction);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animateRow\", function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n          dragX = _this$state2.dragX,\n          rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          if (toValue > 0 && _this.props.onSwipeableLeftOpen) {\n            _this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {\n            _this.props.onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            var _this$props$onSwipeab, _this$props;\n\n            (_this$props$onSwipeab = (_this$props = _this.props).onSwipeableClose) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props);\n          } else {\n            var _this$props$onSwipeab2, _this$props2;\n\n            (_this$props$onSwipeab2 = (_this$props2 = _this.props).onSwipeableOpen) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2);\n          }\n        }\n      });\n\n      if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {\n        _this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {\n        _this.props.onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        var _this$props$onSwipeab3, _this$props3;\n\n        (_this$props$onSwipeab3 = (_this$props3 = _this.props).onSwipeableWillClose) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);\n      } else {\n        var _this$props$onSwipeab4, _this$props4;\n\n        (_this$props$onSwipeab4 = (_this$props4 = _this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRowLayout\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"currentOffset\", function () {\n      var _this$state3 = _this.state,\n          _this$state3$leftWidt = _this$state3.leftWidth,\n          leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n          _this$state3$rowWidth = _this$state3.rowWidth,\n          rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n          rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"close\", function () {\n      _this.animateRow(_this.currentOffset(), 0);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openLeft\", function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n\n      _this.animateRow(_this.currentOffset(), leftWidth);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openRight\", function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n\n      _this.animateRow(_this.currentOffset(), -rightWidth);\n    });\n\n    var _dragX = new Animated.Value(0);\n\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n\n    _this.updateAnimatedEvent(_props, _this.state);\n\n    _this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n\n  _createClass(Swipeable, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rowState = this.state.rowState;\n      var _this$props6 = this.props,\n          children = _this$props6.children,\n          renderLeftActions = _this$props6.renderLeftActions,\n          renderRightActions = _this$props6.renderRightActions;\n      var left = renderLeftActions && React.createElement(Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this.leftActionTranslate\n          }]\n        }]\n      }, renderLeftActions(this.showLeftAction, this.transX), React.createElement(View, {\n        onLayout: function onLayout(_ref4) {\n          var nativeEvent = _ref4.nativeEvent;\n          return _this2.setState({\n            leftWidth: nativeEvent.layout.x\n          });\n        }\n      }));\n      var right = renderRightActions && React.createElement(Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this.rightActionTranslate\n          }]\n        }]\n      }, renderRightActions(this.showRightAction, this.transX), React.createElement(View, {\n        onLayout: function onLayout(_ref5) {\n          var nativeEvent = _ref5.nativeEvent;\n          return _this2.setState({\n            rightOffset: nativeEvent.layout.x\n          });\n        }\n      }));\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-10, 10]\n      }, this.props, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange\n      }), React.createElement(Animated.View, {\n        onLayout: this.onRowLayout,\n        style: [styles.container, this.props.containerStyle]\n      }, left, right, React.createElement(TapGestureHandler, {\n        enabled: rowState !== 0,\n        onHandlerStateChange: this.onTapHandlerStateChange\n      }, React.createElement(Animated.View, {\n        pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n        style: [{\n          transform: [{\n            translateX: this.transX\n          }]\n        }, this.props.childrenContainerStyle]\n      }, children))));\n    }\n  }]);\n\n  return Swipeable;\n}(Component);\n\nexport { Swipeable as default };\n\n_defineProperty(Swipeable, \"defaultProps\", {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"sources":["Swipeable.tsx"],"names":["DRAG_TOSS","Swipeable","friction","overshootFriction","useNativeAnimations","constructor","dragX","Animated","rowTranslation","rowState","leftWidth","rightOffset","rowWidth","undefined","nativeEvent","translationX","useNativeDriver","props","UNSAFE_componentWillUpdate","state","rightWidth","Math","overshootLeft","overshootRight","transX","inputRange","outputRange","Number","extrapolate","State","ev","leftThreshold","rightThreshold","startOffsetX","toValue","velocityX","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","animationOptions","finished","width","render","renderRightActions","left","renderLeftActions","styles","transform","translateX","leftActionTranslate","x","right","rightActionTranslate","onHandlerStateChange","onTapHandlerStateChange","container","overflow","leftActions","StyleSheet","flexDirection","I18nManager","rightActions"],"mappings":"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","sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: () => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: () => void;\n\n  /**\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: () => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  UNSAFE_componentWillUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: Animated.AnimatedInterpolation;\n  private showLeftAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: Animated.AnimatedInterpolation;\n  private showRightAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: Animated.AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0,\n    } = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n          this.props.onSwipeableLeftOpen();\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n          this.props.onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          this.props.onSwipeableClose?.();\n        } else {\n          this.props.onSwipeableOpen?.();\n        }\n      }\n    });\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n      this.props.onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n      this.props.onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      this.props.onSwipeableWillClose?.();\n    } else {\n      this.props.onSwipeableWillOpen?.();\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}