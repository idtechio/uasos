{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"session\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useMemo, createContext, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Head from \"next/head\";\nimport { appWithTranslation, useTranslation } from \"next-i18next\";\nimport { ThemeProvider as ThemeProviderWeb } from \"styled-components\";\nimport { ThemeProvider as ThemeProviderNative } from \"styled-components/native\";\nimport { primary } from \"../src/style/theme.config\";\nimport { SessionProvider } from \"next-auth/react\";\nimport GlobalStyles from \"../src/style/globalStyle\";\nimport { ProgressToastProvider } from \"../src/providers/ProgressToastProvider\";\nimport { useBreakPointGetter } from \"../src/hooks/useBreakPointGetter\";\nimport useAuth from \"../src/hooks/useAuth\";\nimport { Hydrate, QueryClient, QueryClientProvider } from \"react-query\";\nimport * as gtag from \"../lib/gtag\";\nimport Gtag from \"./gtag\";\nimport GAtag from \"./gatag\";\nimport * as fbq from \"../lib/fpixel\";\nimport FPixel from \"./fpixel\";\nexport var AuthContext = createContext({\n  identity: null,\n  getTokenForAPI: null,\n  account: null,\n  refetchAccount: null,\n  loaded: false\n});\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      _ref$pageProps = _ref.pageProps,\n      session = _ref$pageProps.session,\n      pageProps = _objectWithoutProperties(_ref$pageProps, _excluded);\n\n  var getBreakPoint = useBreakPointGetter();\n  var theme = useMemo(function () {\n    return _objectSpread(_objectSpread({}, primary), {}, {\n      getBreakPoint: getBreakPoint\n    });\n  }, [getBreakPoint]);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useAuth = useAuth(),\n      identity = _useAuth.identity,\n      account = _useAuth.account,\n      getTokenForAPI = _useAuth.getTokenForAPI,\n      loaded = _useAuth.loaded,\n      refetchAccount = _useAuth.refetchAccount;\n\n  var router = useRouter();\n\n  var _useState = useState(function () {\n    return new QueryClient({\n      defaultOptions: {\n        queries: {\n          staleTime: 2 * 60 * 1000,\n          retry: false\n        }\n      }\n    });\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      queryClient = _useState2[0];\n\n  useEffect(function () {\n    if (!gtag.GA_TRACKING_ID) {\n      return;\n    }\n\n    var handleRouteChange = function handleRouteChange(url) {\n      gtag.pageview(url);\n    };\n\n    router.events.on(\"routeChangeComplete\", handleRouteChange);\n    return function () {\n      router.events.off(\"routeChangeComplete\", handleRouteChange);\n    };\n  }, [router.events]);\n  useEffect(function () {\n    var handleRouteChange = function handleRouteChange() {};\n\n    router.events.on(\"routeChangeComplete\", handleRouteChange);\n    return function () {\n      router.events.off(\"routeChangeComplete\", handleRouteChange);\n    };\n  }, [router.events]);\n  return React.createElement(React.Fragment, null, fbq.FB_PIXEL_ID && React.createElement(FPixel, {\n    id: fbq.FB_PIXEL_ID\n  }), gtag.GOOGLE_TAG_ID && React.createElement(Gtag, {\n    id: gtag.GOOGLE_TAG_ID\n  }), React.createElement(QueryClientProvider, {\n    client: queryClient\n  }, React.createElement(Hydrate, {\n    state: pageProps == null ? void 0 : pageProps.dehydratedState\n  }, React.createElement(GlobalStyles, null), React.createElement(SessionProvider, {\n    session: session\n  }, React.createElement(Head, null, React.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1\"\n  }), React.createElement(\"meta\", {\n    property: \"og:title\",\n    content: t(\"ogMeta.title\")\n  }), React.createElement(\"meta\", {\n    property: \"og:description\",\n    content: t(\"ogMeta.description\")\n  }), React.createElement(\"meta\", {\n    property: \"og:image\",\n    content: \"https://uasos.org/assets/fb_banner.png\"\n  }), React.createElement(\"meta\", {\n    property: \"og:image:type\",\n    content: \"image/png\"\n  })), gtag.GA_TRACKING_ID && React.createElement(GAtag, {\n    id: gtag.GA_TRACKING_ID\n  }), React.createElement(ThemeProviderWeb, {\n    theme: theme\n  }, React.createElement(ThemeProviderNative, {\n    theme: theme\n  }, React.createElement(AuthContext.Provider, {\n    value: {\n      identity: identity,\n      account: account,\n      getTokenForAPI: getTokenForAPI,\n      loaded: loaded,\n      refetchAccount: refetchAccount\n    }\n  }, React.createElement(ProgressToastProvider, null, React.createElement(Component, pageProps)))))))));\n}\n\nexport default appWithTranslation(MyApp);","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/pages/_app.tsx"],"names":["useMemo","createContext","useEffect","useState","useRouter","Head","appWithTranslation","useTranslation","ThemeProvider","ThemeProviderWeb","ThemeProviderNative","primary","SessionProvider","GlobalStyles","ProgressToastProvider","useBreakPointGetter","useAuth","Hydrate","QueryClient","QueryClientProvider","gtag","Gtag","GAtag","fbq","FPixel","AuthContext","identity","getTokenForAPI","account","refetchAccount","loaded","MyApp","Component","pageProps","session","getBreakPoint","theme","t","router","defaultOptions","queries","staleTime","retry","queryClient","GA_TRACKING_ID","handleRouteChange","url","pageview","events","on","off","FB_PIXEL_ID","GOOGLE_TAG_ID","dehydratedState"],"mappings":"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","sourcesContent":["import { useMemo, createContext, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Head from \"next/head\";\n\nimport { appWithTranslation, useTranslation } from \"next-i18next\";\nimport { ThemeProvider as ThemeProviderWeb } from \"styled-components\";\nimport { ThemeProvider as ThemeProviderNative } from \"styled-components/native\";\nimport { primary } from \"../src/style/theme.config\";\nimport { SessionProvider } from \"next-auth/react\";\nimport GlobalStyles from \"../src/style/globalStyle\";\nimport { ProgressToastProvider } from \"../src/providers/ProgressToastProvider\";\nimport { useBreakPointGetter } from \"../src/hooks/useBreakPointGetter\";\nimport { AppProps } from \"next/app\";\nimport useAuth from \"../src/hooks/useAuth\";\nimport { User } from \"firebase/auth\";\nimport { getAccountDTO } from \"../src/client-api/account\";\nimport { Hydrate, QueryClient, QueryClientProvider } from \"react-query\";\nimport * as gtag from \"../lib/gtag\";\nimport Gtag from \"./gtag\";\nimport GAtag from \"./gatag\";\nimport * as fbq from \"../lib/fpixel\";\nimport FPixel from \"./fpixel\";\n\nexport const AuthContext = createContext<{\n  identity: null | User | undefined;\n  account: null | getAccountDTO;\n  getTokenForAPI: null | (() => Promise<string>);\n  refetchAccount: null | (() => Promise<void>);\n  loaded: boolean;\n}>({\n  identity: null,\n  getTokenForAPI: null,\n  account: null,\n  refetchAccount: null,\n  loaded: false,\n});\n\nfunction MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {\n  const getBreakPoint = useBreakPointGetter();\n  const theme = useMemo(() => ({ ...primary, getBreakPoint }), [getBreakPoint]);\n  const { t } = useTranslation();\n  const { identity, account, getTokenForAPI, loaded, refetchAccount } =\n    useAuth();\n  const router = useRouter();\n\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            staleTime: 2 * 60 * 1000,\n            retry: false,\n          },\n        },\n      })\n  );\n\n  useEffect(() => {\n    if (!gtag.GA_TRACKING_ID) {\n      return;\n    }\n\n    const handleRouteChange = (url: string) => {\n      gtag.pageview(url);\n    };\n    router.events.on(\"routeChangeComplete\", handleRouteChange);\n    return () => {\n      router.events.off(\"routeChangeComplete\", handleRouteChange);\n    };\n  }, [router.events]);\n\n  useEffect(() => {\n    // fbq.pageview();\n\n    const handleRouteChange = () => {\n      // fbq.pageview();\n    };\n\n    router.events.on(\"routeChangeComplete\", handleRouteChange);\n    return () => {\n      router.events.off(\"routeChangeComplete\", handleRouteChange);\n    };\n  }, [router.events]);\n\n  return (\n    <>\n      {fbq.FB_PIXEL_ID && <FPixel id={fbq.FB_PIXEL_ID} />}\n      {gtag.GOOGLE_TAG_ID && <Gtag id={gtag.GOOGLE_TAG_ID} />}\n      <QueryClientProvider client={queryClient}>\n        <Hydrate state={pageProps?.dehydratedState}>\n          <GlobalStyles />\n          <SessionProvider session={session}>\n            <Head>\n              <meta\n                name=\"viewport\"\n                content=\"width=device-width, initial-scale=1\"\n              />\n              <meta property=\"og:title\" content={t(\"ogMeta.title\")} />\n              <meta\n                property=\"og:description\"\n                content={t(\"ogMeta.description\")}\n              />\n              <meta\n                property=\"og:image\"\n                content=\"https://uasos.org/assets/fb_banner.png\"\n              />\n              <meta property=\"og:image:type\" content=\"image/png\" />\n            </Head>\n            {gtag.GA_TRACKING_ID && <GAtag id={gtag.GA_TRACKING_ID} />}\n            <ThemeProviderWeb theme={theme}>\n              <ThemeProviderNative theme={theme}>\n                <AuthContext.Provider\n                  value={{\n                    identity,\n                    account,\n                    getTokenForAPI,\n                    loaded,\n                    refetchAccount,\n                  }}\n                >\n                  <ProgressToastProvider>\n                    <Component {...pageProps} />\n                  </ProgressToastProvider>\n                </AuthContext.Provider>\n              </ThemeProviderNative>\n            </ThemeProviderWeb>\n          </SessionProvider>\n        </Hydrate>\n      </QueryClientProvider>\n    </>\n  );\n}\n\nexport default appWithTranslation(MyApp);\n"]},"metadata":{},"sourceType":"module"}