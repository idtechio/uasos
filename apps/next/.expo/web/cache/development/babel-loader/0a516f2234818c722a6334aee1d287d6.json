{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useContext, useRef, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport styled, { css } from \"styled-components/native\";\nimport { ButtonCta } from \"../Buttons\";\nimport { CompositionSection } from \"../Compositions\";\nimport { InputControl, InputCotrolLabel as InputControlLabel } from \"../Forms\";\nimport FormTextInput from \"../Inputs/FormTextInput\";\nimport CardModal from \"../CardModal\";\nimport FormPhoneInput from \"../Inputs/FormPhoneInput\";\nimport { generatePhonePrefixDropdownList } from \"../Inputs/FormPhoneInput/helpers\";\nimport { StyledHeader, StyledSubheader, StyledErrorMessage, FormPhoneInputWrapper, FormTextInputWrapper } from \"./styles\";\nimport { phonePrefixDropdownList } from \"../../consts/phonePrefixDropdown\";\nimport { AccountApi } from \"../../client-api/account\";\nimport { AuthContext } from \"../../../pages/_app\";\nimport FormCheckbox from \"../Inputs/FormCheckbox\";\nimport { CompositionRow } from \"../Compositions/CompositionRow\";\nimport { useRouter } from \"next/router\";\nimport { Routes } from \"../../consts/router\";\nimport FormLanguageDropdown from \"../Inputs/FormLanguageDropdown\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport SmsVerificationModal from \"../SmsVerificationModal\";\nimport SmsVerificationSuccessModal from \"../SmsVerificationSuccessModal\";\nimport { useMutation } from \"react-query\";\nimport { FirebaseError } from \"@firebase/util\";\nimport SmsNotificationInput from \"../EditUserProfileForm/Inputs/SmsNotificationInput\";\nexport var SectionContent = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  max-width: 400px;\\n  width: 100%;\\n  margin-right: auto;\\n  margin-left: auto;\\n\"])));\nvar submitRequestDefualtState = {\n  loading: false,\n  error: null,\n  succeeded: false\n};\nexport default function FormRegisterUser() {\n  var _errors$registrationU, _errors$registrationU2, _errors$registrationU3, _errors$registrationU4, _errors$registrationU5, _errors$registrationU6;\n\n  var mutation = useMutation(function (data) {\n    return Authorization.linkWithPhone(data.phonePrefix + data.phoneNumber, Authorization.initCaptcha(\"recaptcha__container\"));\n  }, {\n    retry: 10,\n    retryDelay: 2000\n  });\n\n  var _useContext = useContext(AuthContext),\n      identity = _useContext.identity;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useContext2 = useContext(AuthContext),\n      getTokenForAPI = _useContext2.getTokenForAPI;\n\n  var passwordInputRef = useRef(null);\n  var router = useRouter();\n  var form = useForm({\n    defaultValues: {\n      registrationUserForm: {\n        smsNotification: true,\n        showPassword: false,\n        preferredLanguage: \"pl\"\n      }\n    }\n  });\n\n  var _useState = useState(submitRequestDefualtState),\n      _useState2 = _slicedToArray(_useState, 2),\n      submitRequstState = _useState2[0],\n      setSubmitRequstState = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      phoneConfirmation = _useState4[0],\n      setPhoneConfirmation = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      phoneNumber = _useState6[0],\n      setPhoneNumber = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      updateData = _useState8[0],\n      setUpdateData = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      smsVerificationSuccess = _useState10[0],\n      setSmsVerificationSuccess = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      apiError = _useState12[0],\n      setApiError = _useState12[1];\n\n  var handleSubmit = form.handleSubmit,\n      errors = form.formState.errors,\n      watch = form.watch;\n  passwordInputRef.current = watch(\"registrationUserForm.password\", \"\");\n  var isShowPasswordChecked = watch(\"registrationUserForm.showPassword\");\n\n  var parseError = function parseError(error) {\n    if (error.includes(\"email-already-exists\") || error.includes(\"email-already-in-use\")) {\n      setApiError(t(\"others:userRegistration.errors.emailExist\"));\n    } else if (error.includes(\"phone-number-already-exists\") || error.includes(\"account-exists\")) {\n      setApiError(t(\"others:userRegistration.errors.phoneLinkingFailed\"));\n    } else if (error.includes(\"too-many-requests\")) {\n      setApiError(t(\"others:userRegistration.errors.tooManyRequest\"));\n    } else if (error.includes(\"invalid-verification\")) {\n      setApiError(t(\"others:userRegistration.errors.invalidCode\"));\n    } else {\n      setApiError(\"Oops something went wrong\");\n    }\n  };\n\n  var onSubmit = function onSubmit(_ref) {\n    var registrationUserForm, name, email, phonePrefix, phoneNumber, smsNotification, password, preferredLanguage, res;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            registrationUserForm = _ref.registrationUserForm;\n            name = registrationUserForm.name, email = registrationUserForm.email, phonePrefix = registrationUserForm.phonePrefix, phoneNumber = registrationUserForm.phoneNumber, smsNotification = registrationUserForm.smsNotification, password = registrationUserForm.password, preferredLanguage = registrationUserForm.preferredLanguage;\n            setUpdateData({\n              name: name,\n              preferredLang: preferredLanguage,\n              smsNotification: smsNotification\n            });\n            _context.prev = 3;\n            setSubmitRequstState(function (state) {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                loading: true\n              });\n            });\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(Authorization.createUser(email, password));\n\n          case 7:\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(AccountApi.updateAccount({\n              payload: {\n                name: name,\n                preferredLang: preferredLanguage,\n                smsNotification: smsNotification\n              }\n            }));\n\n          case 9:\n            setSubmitRequstState(function (state) {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                loading: false\n              });\n            });\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(mutation.mutateAsync({\n              identity: identity,\n              phonePrefix: phonePrefix,\n              phoneNumber: phoneNumber\n            }));\n\n          case 12:\n            res = _context.sent;\n            setSubmitRequstState(function (state) {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                loading: false\n              });\n            });\n            setPhoneConfirmation(res);\n            setPhoneNumber(phonePrefix + phoneNumber);\n            _context.next = 21;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](3);\n\n            if (_context.t0 instanceof Error || _context.t0 instanceof FirebaseError) {\n              parseError(_context.t0 == null ? void 0 : _context.t0.message);\n              setSubmitRequstState(function (state) {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                  error: _context.t0\n                });\n              });\n              parseError(_context.t0.message);\n            }\n\n          case 21:\n            _context.prev = 21;\n            setSubmitRequstState(function (state) {\n              return _objectSpread(_objectSpread({}, state), {}, {\n                loading: false\n              });\n            });\n            return _context.finish(21);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 18, 21, 24]], Promise);\n  };\n\n  var updateAccount = function updateAccount() {\n    return _regeneratorRuntime.async(function updateAccount$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setPhoneConfirmation(null);\n\n            if (!(getTokenForAPI && updateData)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.prev = 2;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(AccountApi.updateAccount({\n              payload: updateData\n            }));\n\n          case 5:\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](2);\n\n            if (_context2.t0 instanceof Error || _context2.t0 instanceof FirebaseError) {\n              parseError(_context2.t0 == null ? void 0 : _context2.t0.message);\n            }\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 7]], Promise);\n  };\n\n  return React.createElement(FormProvider, form, submitRequstState.loading && React.createElement(CardModal, {\n    closeable: false\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\"\n  })), React.createElement(CompositionSection, {\n    padding: [35, 30, 8, 30],\n    zIndex: 2\n  }, React.createElement(StyledHeader, null, t(\"others:forms.userRegistration.userRegistration\")), React.createElement(StyledSubheader, null, t(\"others:forms.userRegistration.enterDetails\")), React.createElement(SectionContent, null, React.createElement(InputControlLabel, {\n    marginBottom: \"0\"\n  }, t(\"others:forms.generic.name\")), React.createElement(FormTextInput, {\n    name: \"registrationUserForm.name\",\n    label: t(\"others:forms.generic.name\"),\n    styles: {\n      wrapper: {\n        marginTop: 6,\n        marginBottom: 10\n      }\n    },\n    rules: {\n      required: true\n    },\n    error: errors == null ? void 0 : (_errors$registrationU = errors.registrationUserForm) == null ? void 0 : _errors$registrationU.name\n  }), React.createElement(InputControlLabel, {\n    marginBottom: \"14px\"\n  }, t(\"others:forms.userRegistration.preferredLanguage\")), React.createElement(FormLanguageDropdown, {\n    name: \"registrationUserForm.preferredLanguage\",\n    rules: {\n      required: true\n    },\n    error: errors == null ? void 0 : (_errors$registrationU2 = errors.registrationUserForm) == null ? void 0 : _errors$registrationU2.preferredLanguage\n  }))), React.createElement(CompositionSection, {\n    padding: [0, 30, 0, 30],\n    zIndex: 1\n  }, React.createElement(SectionContent, null, React.createElement(InputControlLabel, {\n    marginBottom: \"14px\"\n  }, t(\"refugeeAddForm.phoneLabel\")), React.createElement(FormPhoneInputWrapper, null, React.createElement(FormPhoneInput, {\n    prefixName: \"registrationUserForm.phonePrefix\",\n    numberName: \"registrationUserForm.phoneNumber\",\n    phonePrefixLabel: t(\"hostAdd.country\"),\n    phoneLabel: t(\"_ _ _  _ _ _  _ _ _ \"),\n    error: errors == null ? void 0 : (_errors$registrationU3 = errors.registrationUserForm) == null ? void 0 : _errors$registrationU3.phoneNumber,\n    errorMsg: \"\",\n    data: generatePhonePrefixDropdownList(phonePrefixDropdownList)\n  })))), React.createElement(CompositionSection, {\n    padding: [0, 30, 10, 26]\n  }, React.createElement(SectionContent, null, React.createElement(SmsNotificationInput, {\n    wrapperStyleProp: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n              align-items: flex-start;\\n            \"]))),\n    name: \"registrationUserForm.smsNotification\",\n    rules: {\n      required: false\n    }\n  }))), React.createElement(CompositionSection, {\n    padding: [0, 30, 8, 30]\n  }, React.createElement(SectionContent, null, React.createElement(InputControlLabel, {\n    marginBottom: \"0\"\n  }, t(\"others:forms.generic.emailAddress\")), React.createElement(FormTextInputWrapper, null, React.createElement(FormTextInput, {\n    name: \"registrationUserForm.email\",\n    label: t(\"others:forms.generic.email\"),\n    rules: {\n      required: true,\n      pattern: {\n        value: /\\S+@\\S+\\.\\S+/,\n        message: t(\"validations.invalidEmail\")\n      }\n    },\n    error: errors == null ? void 0 : (_errors$registrationU4 = errors.registrationUserForm) == null ? void 0 : _errors$registrationU4.email\n  })))), React.createElement(CompositionSection, {\n    padding: [0, 30, 0, 30]\n  }, React.createElement(SectionContent, null, React.createElement(InputControlLabel, {\n    marginBottom: \"0\"\n  }, t(\"others:forms.generic.password\")), React.createElement(FormTextInput, {\n    name: \"registrationUserForm.password\",\n    label: t(\"others:forms.userRegistration.password\"),\n    secureTextEntry: !isShowPasswordChecked,\n    styles: {\n      wrapper: {\n        marginTop: 6,\n        marginBottom: 10\n      }\n    },\n    rules: {\n      required: true,\n      maxLength: 50,\n      minLength: 8\n    },\n    error: errors == null ? void 0 : (_errors$registrationU5 = errors.registrationUserForm) == null ? void 0 : _errors$registrationU5.password\n  }), React.createElement(InputControlLabel, {\n    marginBottom: \"0\"\n  }, t(\"others:forms.userRegistration.confirmPassword\")), React.createElement(FormTextInput, {\n    styles: {\n      wrapper: {\n        marginTop: 6,\n        marginBottom: 10\n      }\n    },\n    name: \"registrationUserForm.passwordConfirm\",\n    label: t(\"others:forms.userRegistration.confirmPassword\"),\n    secureTextEntry: !isShowPasswordChecked,\n    rules: {\n      required: true,\n      maxLength: 50,\n      minLength: 8,\n      validate: function validate(value) {\n        return value === passwordInputRef.current;\n      }\n    },\n    error: errors == null ? void 0 : (_errors$registrationU6 = errors.registrationUserForm) == null ? void 0 : _errors$registrationU6.passwordConfirm,\n    errorMsg: t(\"others:forms.userRegistration.validations.passwordMismatch\")\n  }), React.createElement(FormCheckbox, {\n    isCentered: false,\n    rules: {\n      required: false\n    },\n    name: \"registrationUserForm.showPassword\",\n    label: \" \" + t(\"others:common.actions.showPassword\")\n  }), (submitRequstState.error || mutation.error) && React.createElement(StyledErrorMessage, null, apiError))), React.createElement(CompositionSection, {\n    padding: [35, 30, 24, 30]\n  }, React.createElement(SectionContent, null, React.createElement(CompositionRow, null, React.createElement(InputControl, {\n    styles: buttonStyles\n  }, React.createElement(ButtonCta, {\n    style: buttonStyles.backButton,\n    disabled: submitRequstState.loading,\n    anchor: t(\"others:common.buttons.back\"),\n    onPress: function onPress() {\n      return router.push(Routes.HOMEPAGE);\n    }\n  })), React.createElement(InputControl, {\n    styles: buttonStyles\n  }, React.createElement(ButtonCta, {\n    onPress: handleSubmit(onSubmit),\n    anchor: t(\"others:common.buttons.next\"),\n    style: buttonStyles.nextButton\n  }))), React.createElement(View, {\n    style: {\n      display: \"none\"\n    },\n    nativeID: \"recaptcha__container\"\n  }), phoneConfirmation ? React.createElement(SmsVerificationModal, {\n    mode: \"LINK\",\n    callback: updateAccount,\n    phoneNumber: phoneNumber,\n    confirmation: phoneConfirmation,\n    close: function close() {\n      return setPhoneConfirmation(null);\n    },\n    setVerificationSuccess: setSmsVerificationSuccess\n  }) : React.createElement(React.Fragment, null), smsVerificationSuccess ? React.createElement(SmsVerificationSuccessModal, null) : React.createElement(React.Fragment, null))));\n}\nvar buttonStyles = StyleSheet.create({\n  wrapper: {\n    width: \"50%\"\n  },\n  backButton: {\n    alignSelf: \"flex-start\",\n    cursor: \"pointer\",\n    border: \"1.5px solid #003566\",\n    borderRadius: 50,\n    backgroundColor: \"none\"\n  },\n  nextButton: {\n    alignSelf: \"flex-end\",\n    cursor: \"pointer\"\n  }\n});","map":{"version":3,"sources":["/Users/stanislav.kovalov/Desktop/uasos/apps/next/src/components/FormRegisterUser/index.tsx"],"names":["React","useContext","useRef","useState","FormProvider","useForm","useTranslation","styled","css","ButtonCta","CompositionSection","InputControl","InputCotrolLabel","InputControlLabel","FormTextInput","CardModal","FormPhoneInput","generatePhonePrefixDropdownList","StyledHeader","StyledSubheader","StyledErrorMessage","FormPhoneInputWrapper","FormTextInputWrapper","phonePrefixDropdownList","AccountApi","AuthContext","FormCheckbox","CompositionRow","useRouter","Routes","FormLanguageDropdown","Authorization","SmsVerificationModal","SmsVerificationSuccessModal","useMutation","FirebaseError","SmsNotificationInput","SectionContent","View","submitRequestDefualtState","loading","error","succeeded","FormRegisterUser","mutation","data","linkWithPhone","phonePrefix","phoneNumber","initCaptcha","retry","retryDelay","identity","t","getTokenForAPI","passwordInputRef","router","form","defaultValues","registrationUserForm","smsNotification","showPassword","preferredLanguage","submitRequstState","setSubmitRequstState","phoneConfirmation","setPhoneConfirmation","setPhoneNumber","updateData","setUpdateData","smsVerificationSuccess","setSmsVerificationSuccess","apiError","setApiError","handleSubmit","errors","formState","watch","current","isShowPasswordChecked","parseError","includes","onSubmit","name","email","password","preferredLang","state","createUser","updateAccount","payload","mutateAsync","res","Error","message","wrapper","marginTop","marginBottom","required","pattern","value","maxLength","minLength","validate","passwordConfirm","buttonStyles","backButton","push","HOMEPAGE","nextButton","display","StyleSheet","create","width","alignSelf","cursor","border","borderRadius","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useContext, useRef, useState } from \"react\";\nimport { FormProvider, SubmitHandler, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ActivityIndicator, View, StyleSheet } from \"react-native\";\nimport styled, { css } from \"styled-components/native\";\nimport { FormType } from \"../../helpers/FormTypes\";\nimport { ButtonCta } from \"../Buttons\";\nimport { CompositionSection } from \"../Compositions\";\nimport { InputControl, InputCotrolLabel as InputControlLabel } from \"../Forms\";\nimport FormTextInput from \"../Inputs/FormTextInput\";\nimport CardModal from \"../CardModal\";\n// import { Error } from \"../Inputs/style\";\nimport FormPhoneInput from \"../Inputs/FormPhoneInput\";\nimport { generatePhonePrefixDropdownList } from \"../Inputs/FormPhoneInput/helpers\";\nimport {\n  StyledHeader,\n  StyledSubheader,\n  StyledErrorMessage,\n  FormPhoneInputWrapper,\n  FormTextInputWrapper,\n} from \"./styles\";\nimport { phonePrefixDropdownList } from \"../../consts/phonePrefixDropdown\";\nimport { AccountApi } from \"../../client-api/account\";\nimport { AuthContext } from \"../../../pages/_app\";\nimport FormCheckbox from \"../Inputs/FormCheckbox\";\nimport { CompositionRow } from \"../Compositions/CompositionRow\";\nimport { useRouter } from \"next/router\";\nimport { Routes } from \"../../consts/router\";\nimport FormLanguageDropdown from \"../Inputs/FormLanguageDropdown\";\nimport { Authorization } from \"../../hooks/useAuth\";\nimport { ConfirmationResult, User } from \"firebase/auth\";\nimport SmsVerificationModal from \"../SmsVerificationModal\";\nimport SmsVerificationSuccessModal from \"../SmsVerificationSuccessModal\";\nimport { useMutation } from \"react-query\";\nimport { FirebaseError } from \"@firebase/util\";\nimport SmsNotificationInput from \"../EditUserProfileForm/Inputs/SmsNotificationInput\";\n\nexport const SectionContent = styled.View`\n  max-width: 400px;\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n`;\n\ntype SubmitRequestState = {\n  loading: boolean;\n  error: Error | null | unknown;\n  succeeded: boolean;\n};\n\nconst submitRequestDefualtState = {\n  loading: false,\n  error: null,\n  succeeded: false,\n};\n\nexport type AccountUpdateData = {\n  name: string;\n  preferredLang: string;\n  smsNotification: boolean;\n};\n\nexport default function FormRegisterUser() {\n  const mutation = useMutation(\n    (data: { identity: User; phonePrefix: string; phoneNumber: string }) =>\n      Authorization.linkWithPhone(\n        data.phonePrefix + data.phoneNumber,\n        Authorization.initCaptcha(\"recaptcha__container\")\n      ),\n    { retry: 10, retryDelay: 2000 }\n  );\n  const { identity } = useContext(AuthContext);\n  const { t } = useTranslation();\n  const { getTokenForAPI } = useContext(AuthContext);\n  const passwordInputRef = useRef<string | null>(null);\n  const router = useRouter();\n\n  const form = useForm<FormType>({\n    defaultValues: {\n      registrationUserForm: {\n        smsNotification: true,\n        showPassword: false,\n        preferredLanguage: \"pl\",\n      },\n    },\n  });\n\n  const [submitRequstState, setSubmitRequstState] =\n    useState<SubmitRequestState>(submitRequestDefualtState);\n  const [phoneConfirmation, setPhoneConfirmation] =\n    useState<null | ConfirmationResult>(null);\n  const [phoneNumber, setPhoneNumber] = useState<string>(\"\");\n  const [updateData, setUpdateData] = useState<AccountUpdateData>();\n  const [smsVerificationSuccess, setSmsVerificationSuccess] =\n    useState<boolean>(false);\n\n  const [apiError, setApiError] = useState(\"\");\n\n  const {\n    handleSubmit,\n    formState: { errors },\n    watch,\n  } = form;\n\n  passwordInputRef.current = watch(\"registrationUserForm.password\", \"\");\n  const isShowPasswordChecked = watch(\"registrationUserForm.showPassword\");\n\n  const parseError = (error: string) => {\n    if (\n      error.includes(\"email-already-exists\") ||\n      error.includes(\"email-already-in-use\")\n    ) {\n      setApiError(t(\"others:userRegistration.errors.emailExist\"));\n    } else if (\n      error.includes(\"phone-number-already-exists\") ||\n      error.includes(\"account-exists\")\n    ) {\n      setApiError(t(\"others:userRegistration.errors.phoneLinkingFailed\"));\n    } else if (error.includes(\"too-many-requests\")) {\n      setApiError(t(\"others:userRegistration.errors.tooManyRequest\"));\n    } else if (error.includes(\"invalid-verification\")) {\n      setApiError(t(\"others:userRegistration.errors.invalidCode\"));\n    } else {\n      setApiError(\"Oops something went wrong\");\n    }\n  };\n  const onSubmit: SubmitHandler<FormType> = async ({\n    registrationUserForm,\n  }) => {\n    const {\n      name,\n      email,\n      phonePrefix,\n      phoneNumber,\n      smsNotification,\n      password,\n      preferredLanguage,\n    } = registrationUserForm;\n    setUpdateData({ name, preferredLang: preferredLanguage, smsNotification });\n    try {\n      setSubmitRequstState((state) => ({ ...state, loading: true }));\n      await Authorization.createUser(email, password);\n      await AccountApi.updateAccount({\n        payload: {\n          name,\n          preferredLang: preferredLanguage,\n          smsNotification,\n        },\n      });\n      setSubmitRequstState((state) => ({ ...state, loading: false }));\n\n      const res = await mutation.mutateAsync({\n        identity: identity as User,\n        phonePrefix,\n        phoneNumber,\n      });\n\n      setSubmitRequstState((state) => ({ ...state, loading: false }));\n      setPhoneConfirmation(res);\n      setPhoneNumber(phonePrefix + phoneNumber);\n    } catch (error: unknown) {\n      if (error instanceof Error || error instanceof FirebaseError) {\n        parseError(error?.message);\n        setSubmitRequstState((state) => ({ ...state, error }));\n        parseError(error.message);\n      }\n    } finally {\n      setSubmitRequstState((state) => ({ ...state, loading: false }));\n    }\n    // setSubmitRequstState((state) => ({ ...state, loading: true }));\n    // try {\n    //   if (getTokenForAPI) {\n    //     await AccountApi.updateAccount({\n    //       token: await getTokenForAPI(),\n    //       payload: {\n    //         name: name,\n    //         phone_num: `${phonePrefix}${phoneNumber}`,\n    //         email: email,\n    //       },\n    //     });\n    //   }\n    //\n    //   setSubmitRequstState((state) => ({ ...state, succeeded: true }));\n    // } catch (error) {\n    //   setSubmitRequstState((state) => ({ ...state, error }));\n    // } finally {\n    //   setSubmitRequstState((state) => ({ ...state, loading: false }));\n    // }\n  };\n\n  const updateAccount = async () => {\n    setPhoneConfirmation(null);\n    if (getTokenForAPI && updateData) {\n      try {\n        await AccountApi.updateAccount({\n          payload: updateData,\n        });\n      } catch (error: unknown) {\n        if (error instanceof Error || error instanceof FirebaseError) {\n          parseError(error?.message);\n        }\n      }\n    }\n  };\n\n  return (\n    <FormProvider {...form}>\n      {submitRequstState.loading && (\n        <CardModal closeable={false}>\n          <ActivityIndicator size=\"large\" />\n        </CardModal>\n      )}\n      <CompositionSection padding={[35, 30, 8, 30]} zIndex={2}>\n        <StyledHeader>\n          {t(\"others:forms.userRegistration.userRegistration\")}\n        </StyledHeader>\n        <StyledSubheader>\n          {t(\"others:forms.userRegistration.enterDetails\")}\n        </StyledSubheader>\n        <SectionContent>\n          <InputControlLabel marginBottom={\"0\"}>\n            {t(\"others:forms.generic.name\")}\n          </InputControlLabel>\n          <FormTextInput\n            name=\"registrationUserForm.name\"\n            label={t(\"others:forms.generic.name\")}\n            styles={{ wrapper: { marginTop: 6, marginBottom: 10 } }}\n            rules={{\n              required: true,\n            }}\n            error={errors?.registrationUserForm?.name}\n          />\n          <InputControlLabel marginBottom={\"14px\"}>\n            {t(\"others:forms.userRegistration.preferredLanguage\")}\n          </InputControlLabel>\n          <FormLanguageDropdown\n            name=\"registrationUserForm.preferredLanguage\"\n            rules={{\n              required: true,\n            }}\n            error={errors?.registrationUserForm?.preferredLanguage}\n          />\n        </SectionContent>\n      </CompositionSection>\n      <CompositionSection padding={[0, 30, 0, 30]} zIndex={1}>\n        <SectionContent>\n          <InputControlLabel marginBottom={\"14px\"}>\n            {t(\"refugeeAddForm.phoneLabel\")}\n          </InputControlLabel>\n          <FormPhoneInputWrapper>\n            <FormPhoneInput\n              prefixName=\"registrationUserForm.phonePrefix\"\n              numberName=\"registrationUserForm.phoneNumber\"\n              phonePrefixLabel={t(\"hostAdd.country\")}\n              phoneLabel={t(\"_ _ _  _ _ _  _ _ _ \")}\n              error={errors?.registrationUserForm?.phoneNumber}\n              errorMsg=\"\"\n              data={generatePhonePrefixDropdownList(phonePrefixDropdownList)}\n            />\n          </FormPhoneInputWrapper>\n        </SectionContent>\n      </CompositionSection>\n      <CompositionSection padding={[0, 30, 10, 26]}>\n        <SectionContent>\n          <SmsNotificationInput\n            wrapperStyleProp={css`\n              align-items: flex-start;\n            `}\n            name=\"registrationUserForm.smsNotification\"\n            rules={{\n              required: false,\n            }}\n          />\n        </SectionContent>\n      </CompositionSection>\n      <CompositionSection padding={[0, 30, 8, 30]}>\n        <SectionContent>\n          <InputControlLabel marginBottom={\"0\"}>\n            {t(\"others:forms.generic.emailAddress\")}\n          </InputControlLabel>\n          <FormTextInputWrapper>\n            <FormTextInput\n              name=\"registrationUserForm.email\"\n              label={t(\"others:forms.generic.email\")}\n              rules={{\n                required: true,\n                pattern: {\n                  value: /\\S+@\\S+\\.\\S+/,\n                  message: t(\"validations.invalidEmail\"),\n                },\n              }}\n              error={errors?.registrationUserForm?.email}\n            />\n          </FormTextInputWrapper>\n        </SectionContent>\n      </CompositionSection>\n      <CompositionSection padding={[0, 30, 0, 30]}>\n        <SectionContent>\n          <InputControlLabel marginBottom={\"0\"}>\n            {t(\"others:forms.generic.password\")}\n          </InputControlLabel>\n          <FormTextInput\n            name={\"registrationUserForm.password\"}\n            label={t(\"others:forms.userRegistration.password\")}\n            secureTextEntry={!isShowPasswordChecked}\n            styles={{ wrapper: { marginTop: 6, marginBottom: 10 } }}\n            rules={{\n              required: true,\n              maxLength: 50,\n              minLength: 8,\n            }}\n            error={errors?.registrationUserForm?.password}\n          />\n          <InputControlLabel marginBottom={\"0\"}>\n            {t(\"others:forms.userRegistration.confirmPassword\")}\n          </InputControlLabel>\n          <FormTextInput\n            styles={{ wrapper: { marginTop: 6, marginBottom: 10 } }}\n            name={\"registrationUserForm.passwordConfirm\"}\n            label={t(\"others:forms.userRegistration.confirmPassword\")}\n            secureTextEntry={!isShowPasswordChecked}\n            rules={{\n              required: true,\n              maxLength: 50,\n              minLength: 8,\n              validate: (value) => value === passwordInputRef.current,\n            }}\n            error={errors?.registrationUserForm?.passwordConfirm}\n            errorMsg={t(\n              \"others:forms.userRegistration.validations.passwordMismatch\"\n            )}\n          />\n          <FormCheckbox\n            isCentered={false}\n            rules={{\n              required: false,\n            }}\n            name=\"registrationUserForm.showPassword\"\n            label={` ${t(\"others:common.actions.showPassword\")}`}\n          />\n          {(submitRequstState.error || mutation.error) && (\n            <StyledErrorMessage>{apiError}</StyledErrorMessage>\n          )}\n        </SectionContent>\n      </CompositionSection>\n      <CompositionSection padding={[35, 30, 24, 30]}>\n        <SectionContent>\n          <CompositionRow>\n            <InputControl styles={buttonStyles}>\n              <ButtonCta\n                style={buttonStyles.backButton}\n                disabled={submitRequstState.loading}\n                anchor={t(\"others:common.buttons.back\")}\n                onPress={() => router.push(Routes.HOMEPAGE)}\n              />\n            </InputControl>\n            <InputControl styles={buttonStyles}>\n              <ButtonCta\n                onPress={handleSubmit(onSubmit)}\n                anchor={t(\"others:common.buttons.next\")}\n                style={buttonStyles.nextButton}\n              />\n            </InputControl>\n          </CompositionRow>\n          <View style={{ display: \"none\" }} nativeID=\"recaptcha__container\" />\n          {phoneConfirmation ? (\n            <SmsVerificationModal\n              mode=\"LINK\"\n              callback={updateAccount}\n              phoneNumber={phoneNumber}\n              confirmation={phoneConfirmation}\n              close={() => setPhoneConfirmation(null)}\n              setVerificationSuccess={setSmsVerificationSuccess}\n            />\n          ) : (\n            <></>\n          )}\n          {smsVerificationSuccess ? <SmsVerificationSuccessModal /> : <></>}\n        </SectionContent>\n      </CompositionSection>\n    </FormProvider>\n  );\n}\n\nconst buttonStyles = StyleSheet.create({\n  wrapper: {\n    width: \"50%\",\n  },\n  backButton: {\n    alignSelf: \"flex-start\",\n    cursor: \"pointer\",\n    border: \"1.5px solid #003566\",\n    borderRadius: 50,\n    backgroundColor: \"none\",\n  },\n  nextButton: {\n    alignSelf: \"flex-end\",\n    cursor: \"pointer\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}