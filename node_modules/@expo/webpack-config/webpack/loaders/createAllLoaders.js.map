{"version":3,"file":"createAllLoaders.js","sourceRoot":"","sources":["../../src/loaders/createAllLoaders.ts"],"names":[],"mappings":"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","sourcesContent":["import { getPossibleProjectRoot } from '@expo/config/paths';\nimport { Rule } from 'webpack';\n\nimport { getConfig, getPaths } from '../env';\nimport { Environment } from '../types';\nimport createBabelLoader from './createBabelLoader';\nimport createFontLoader from './createFontLoader';\n\n// Inline resources as Base64 when there is less reason to parallelize their download. The\n// heuristic we use is whether the resource would fit within a TCP/IP packet that we would\n// send to request the resource.\n//\n// An Ethernet MTU is usually 1500. IP headers are 20 (v4) or 40 (v6) bytes and TCP\n// headers are 40 bytes. HTTP response headers vary and are around 400 bytes. This leaves\n// about 1000 bytes for content to fit in a packet.\nconst imageInlineSizeLimit = parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT || '1000', 10);\n\n/**\n * This is needed for webpack to import static images in JavaScript files.\n * \"url\" loader works like \"file\" loader except that it embeds assets\n * smaller than specified limit in bytes as data URLs to avoid requests.\n * A missing `test` is equivalent to a match.\n *\n * @category loaders\n */\n// TODO: Bacon: Move SVG\nexport const imageLoaderRule: Rule = {\n  test: /\\.(gif|jpe?g|png|svg)$/,\n  use: {\n    loader: require.resolve('url-loader'),\n    options: {\n      limit: imageInlineSizeLimit,\n      // Interop assets like Metro bundler\n      esModule: false,\n      name: 'static/media/[name].[hash:8].[ext]',\n    },\n  },\n};\n\n/**\n * \"file\" loader makes sure those assets get served by WebpackDevServer.\n * When you `import` an asset, you get its (virtual) filename.\n * In production, they would get copied to the `build` folder.\n * This loader doesn't use a \"test\" so it will catch all modules\n * that fall through the other loaders.\n *\n * @category loaders\n */\nexport const fallbackLoaderRule: Rule = {\n  loader: require.resolve('file-loader'),\n  // Exclude `js` files to keep \"css\" loader working as it injects\n  // its runtime that would otherwise be processed through \"file\" loader.\n  // Also exclude `html` and `json` extensions so they get processed\n  // by webpacks internal loaders.\n\n  // Excludes: js, jsx, ts, tsx, html, json\n  exclude: [/\\.(mjs|[jt]sx?)$/, /\\.html$/, /\\.json$/],\n  options: {\n    // Interop assets like Metro bundler\n    esModule: false,\n    name: 'static/media/[name].[hash:8].[ext]',\n  },\n};\n\n/**\n * Default CSS loader.\n *\n * @category loaders\n */\nexport const styleLoaderRule: Rule = {\n  test: /\\.(css)$/,\n  use: [require.resolve('style-loader'), require.resolve('css-loader')],\n};\n\n/**\n * Create the fallback loader for parsing any unhandled file type.\n *\n * @param env\n * @category loaders\n */\nexport default function createAllLoaders(\n  env: Pick<Environment, 'projectRoot' | 'locations' | 'mode' | 'config' | 'platform' | 'babel'>\n): Rule[] {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n  // @ts-ignore\n  env.config = env.config || getConfig(env);\n  // @ts-ignore\n  env.locations = env.locations || getPaths(env.projectRoot, env);\n\n  const { root, includeModule, template } = env.locations;\n  const isNative = ['ios', 'android'].includes(env.platform);\n\n  if (isNative) {\n    // TODO: Support fallback loader + assets\n    return [getHtmlLoaderRule(template.folder), getBabelLoaderRule(env)];\n  }\n\n  return [\n    getHtmlLoaderRule(template.folder),\n    imageLoaderRule,\n    getBabelLoaderRule(env),\n    createFontLoader(root, includeModule),\n    styleLoaderRule,\n    // This needs to be the last loader\n    fallbackLoaderRule,\n  ].filter(Boolean) as Rule[];\n}\n\n/**\n * Creates a Rule for loading application code and packages that work with the Expo ecosystem.\n * This method attempts to emulate how Metro loads ES modules in the `node_modules` folder.\n *\n * @param env partial Environment object.\n * @category loaders\n */\nexport function getBabelLoaderRule(\n  env: Pick<Environment, 'projectRoot' | 'config' | 'locations' | 'mode' | 'platform' | 'babel'>\n): Rule {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n  // @ts-ignore\n  env.config = env.config || getConfig(env);\n\n  env.locations = env.locations || getPaths(env.projectRoot, env);\n\n  const { web: { build: { babel = {} } = {} } = {} } = env.config;\n\n  // TODO: deprecate app.json method in favor of env.babel\n  const { root, verbose, include = [], use } = babel;\n\n  const babelProjectRoot = root || env.projectRoot;\n\n  return createBabelLoader({\n    projectRoot: env.locations.root,\n    mode: env.mode,\n    platform: env.platform,\n    babelProjectRoot,\n    verbose,\n    include: [...include, ...(env.babel?.dangerouslyAddModulePathsToTranspile || [])],\n    use,\n  });\n}\n\n/**\n *\n * @param exclude\n * @category loaders\n */\nexport function getHtmlLoaderRule(exclude: string): Rule {\n  return {\n    test: /\\.html$/,\n    use: [require.resolve('html-loader')],\n    exclude,\n  };\n}\n"]}