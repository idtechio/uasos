{"version":3,"file":"NativeAssetResolver.js","sourceRoot":"","sources":["../../../src/plugins/NativeAssetsPlugin/NativeAssetResolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2021 Callstack, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on https://github.com/callstack/repack/blob/3c1e059/packages/repack/src/webpack/plugins/AssetsPlugin/AssetResolver.ts\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\nimport webpack from 'webpack';\n\nimport { escapeStringRegexp } from '../../utils/escapeStringRegexp';\n\nexport interface NativeAssetResolverConfig {\n  /**\n   * Override default test RegExp. If the asset matches the `test` RegExp, it will be process\n   * by the custom React Native asset resolver. Otherwise, the resolution will process normally and\n   * the asset will be handled by Webpack.\n   */\n  test?: RegExp;\n  /** Target application platform. */\n  platforms: string[];\n\n  /** Extensions to collect */\n  assetExtensions: string[];\n}\n\nexport interface CollectedScales {\n  [key: string]: {\n    platform: string;\n    name: string;\n  };\n}\n\ninterface CollectOptions {\n  name: string;\n  /**\n   * `['ios', 'native']`\n   */\n  platforms: string[];\n  type: string;\n  assetExtensions: string[];\n}\n\ntype Resolver = {\n  fileSystem: typeof fs;\n  getHook: (\n    type: string\n  ) => {\n    tapAsync: (type: string, callback: (request: any, context: any, callback: any) => void) => void;\n  };\n};\n\nexport class NativeAssetResolver {\n  static collectScales(\n    files: string[],\n    { name, type, platforms, assetExtensions }: CollectOptions\n  ): CollectedScales {\n    const platformRegexp = platforms.join('|');\n    const regex = new RegExp(`^(${assetExtensions.join('|')})$`).test(type)\n      ? new RegExp(\n          `^${escapeStringRegexp(name)}(@\\\\d+(\\\\.\\\\d+)?x)?(\\\\.(${platformRegexp}))?\\\\.${type}$`\n        )\n      : new RegExp(`^${escapeStringRegexp(name)}(\\\\.(${platformRegexp}))?\\\\.${type}$`);\n\n    const priority = (queryPlatform: string) => platforms.reverse().indexOf(queryPlatform);\n\n    // Build a map of files according to the scale\n    const output: CollectedScales = {};\n    for (const file of files) {\n      const match = regex.exec(file);\n      if (match) {\n        let [, scale, , , platform] = match;\n        scale = scale || '@1x';\n        if (!output[scale] || priority(platform) > priority(output[scale].platform)) {\n          output[scale] = { platform, name: file };\n        }\n      }\n    }\n\n    return output;\n  }\n\n  constructor(\n    public readonly config: NativeAssetResolverConfig,\n    private compiler: webpack.Compiler\n  ) {\n    if (!this.config.test) {\n      // Like: `/.(ios|native)$/`\n      this.config.test = new RegExp(`.(${this.config.assetExtensions.join('|')})$`);\n    }\n  }\n\n  private isValidPath(requestPath: string): requestPath is string {\n    return typeof requestPath === 'string' && this.config.test!.test(requestPath);\n  }\n\n  apply(resolver: Resolver) {\n    const { platforms, assetExtensions } = this.config;\n    const logger = this.compiler.getInfrastructureLogger('NativeAssetResolver');\n    const readdirAsync = promisify(resolver.fileSystem.readdir.bind(resolver.fileSystem));\n\n    resolver\n      .getHook('file')\n      .tapAsync('NativeAssetResolver', async (request, _context, callback) => {\n        const requestPath = request.path;\n        if (!this.isValidPath(requestPath)) {\n          return callback();\n        }\n\n        logger.debug('Processing asset:', requestPath);\n\n        let files: string[];\n        const dir = path.dirname(requestPath);\n        try {\n          files = (await readdirAsync(dir)).filter(result => typeof result === 'string');\n        } catch (error) {\n          logger.error(`Failed to read Webpack fs directory: ${dir}`, error);\n          return callback();\n        }\n\n        const basename = path.basename(requestPath);\n        const name = basename.replace(/\\.[^.]+$/, '');\n        const type = path.extname(requestPath).substring(1);\n        let resolved = files.includes(basename) ? requestPath : undefined;\n\n        if (!resolved) {\n          const map = NativeAssetResolver.collectScales(files, {\n            name,\n            type,\n            platforms,\n            assetExtensions,\n          });\n          const key = map['@1x']\n            ? '@1x'\n            : Object.keys(map).sort(\n                (a, b) => Number(a.replace(/[^\\d.]/g, '')) - Number(b.replace(/[^\\d.]/g, ''))\n              )[0];\n\n          resolved = map[key]?.name\n            ? path.resolve(path.dirname(requestPath), map[key].name)\n            : undefined;\n\n          if (!resolved) {\n            logger.error('Cannot resolve:', requestPath, {\n              files,\n              scales: map,\n            });\n            callback();\n            return;\n          }\n        }\n\n        const resolvedFile = {\n          ...request,\n          path: resolved,\n          // @ts-ignore\n          relativePath: request.relativePath && resolver.join(request.relativePath, resolved),\n          file: true,\n        };\n\n        logger.debug('Asset resolved:', requestPath, '->', resolved);\n\n        callback(null, resolvedFile);\n      });\n  }\n}\n"]}