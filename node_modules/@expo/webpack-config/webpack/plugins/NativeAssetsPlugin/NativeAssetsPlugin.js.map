{"version":3,"file":"NativeAssetsPlugin.js","sourceRoot":"","sources":["../../../src/plugins/NativeAssetsPlugin/NativeAssetsPlugin.ts"],"names":[],"mappings":";;;AAEA,+DAAuF;AAEvF;;GAEG;AACH,MAAa,kBAAkB;IAC7B,YAAoB,MAAyD;QAAzD,WAAM,GAAN,MAAM,CAAmD;IAAG,CAAC;IAEjF,KAAK,CAAC,QAAkB;QACtB,MAAM,QAAQ,GAAG,IAAI,yCAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEhE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE;YAC5B,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG;gBACxB,KAAK,EAAE,EAAE;aACV,CAAC;SACH;QAED,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;YACjC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,IAAI;YAC1B,GAAG,EAAE;gBACH;oBACE,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC;oBACvC,OAAO,EAAE;wBACP,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS;wBAChC,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe;wBAC5C,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;qBAC7B;iBACF;aACF;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE;YAC7B,QAAQ,CAAC,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC;SAC/B;QAED,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC/F,CAAC;CACF;AAhCD,gDAgCC","sourcesContent":["import { Compiler, Plugin } from 'webpack';\n\nimport { NativeAssetResolver, NativeAssetResolverConfig } from './NativeAssetResolver';\n\n/**\n * Convert any asset type to a JS code block that uses React Native's AssetRegistry module.\n */\nexport class NativeAssetsPlugin implements Plugin {\n  constructor(private config: NativeAssetResolverConfig & { persist?: boolean }) {}\n\n  apply(compiler: Compiler) {\n    const resolver = new NativeAssetResolver(this.config, compiler);\n\n    if (!compiler.options.module) {\n      compiler.options.module = {\n        rules: [],\n      };\n    }\n\n    compiler.options.module.rules.push({\n      test: resolver.config.test,\n      use: [\n        {\n          loader: require.resolve('./loader.cjs'),\n          options: {\n            platforms: this.config.platforms,\n            assetExtensions: this.config.assetExtensions,\n            persist: this.config.persist,\n          },\n        },\n      ],\n    });\n\n    if (!compiler.options.resolve) {\n      compiler.options.resolve = {};\n    }\n\n    compiler.options.resolve.plugins = (compiler.options.resolve.plugins || []).concat(resolver);\n  }\n}\n"]}