{"version":3,"file":"JsonWebpackPlugin.js","sourceRoot":"","sources":["../../src/plugins/JsonWebpackPlugin.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAWnD,MAAM,QAAQ,GAAG,IAAI,OAAO,EAAqE,CAAC;AAElG,SAAS,wBAAwB;IAC/B,OAAO;QACL,UAAU,EAAE,IAAI,kCAAwB,CAAC,CAAC,YAAY,CAAC,CAAC;QACxD,SAAS,EAAE,IAAI,kCAAwB,CAAC,CAAC,YAAY,CAAC,CAAC;KACxD,CAAC;AACJ,CAAC;AAED,MAAqB,iBAAiB;IAWpC,YAAmB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;QAU3B,gBAAW,GAAG,KAAK,EACzB,WAAoC,EACpC,QAAoB,EACL,EAAE;YACjB,IAAI,MAAM,GAAsB;gBAC9B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;gBACvB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;gBACvB,MAAM,EAAE,IAAI;aACb,CAAC;YACF,IAAI;gBACF,MAAM,GAAG,MAAM,iBAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aACnF;YAAC,OAAO,KAAK,EAAE;gBACd,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAChC;YAED,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAEzF,sDAAsD;YACtD,oCAAoC;YACpC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG;gBAChC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI;gBAClB,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM;aACxB,CAAC;YAEF,MAAM,iBAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC;gBAC9D,IAAI;gBACJ,UAAU,EAAE,MAAM,CAAC,IAAI;gBACvB,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;YAEH,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC;QAxCA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;SAC3F;IACH,CAAC;IAdD,MAAM,CAAC,QAAQ,CAAC,WAAoC;QAClD,IAAI,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACtC,4BAA4B;QAC5B,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,KAAK,GAAG,wBAAwB,EAAE,CAAC;YACnC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;SAClC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAQD,KAAK,CAAC,QAAkB;QACtB,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACxE,CAAC;CAkCF;AArDD,oCAqDC","sourcesContent":["import { AsyncSeriesWaterfallHook } from 'tapable';\nimport { compilation, Compiler } from 'webpack';\n\nexport type Options = {\n  path: string;\n  json: any;\n  pretty?: boolean;\n};\n\nexport type BeforeEmitOptions = Options & { plugin: JsonWebpackPlugin };\n\nconst hooksMap = new WeakMap<compilation.Compilation, Record<string, AsyncSeriesWaterfallHook>>();\n\nfunction createWebpackPluginHooks(): Record<string, AsyncSeriesWaterfallHook> {\n  return {\n    beforeEmit: new AsyncSeriesWaterfallHook(['pluginArgs']),\n    afterEmit: new AsyncSeriesWaterfallHook(['pluginArgs']),\n  };\n}\n\nexport default class JsonWebpackPlugin {\n  static getHooks(compilation: compilation.Compilation): Record<string, AsyncSeriesWaterfallHook> {\n    let hooks = hooksMap.get(compilation);\n    // Setup the hooks only once\n    if (hooks === undefined) {\n      hooks = createWebpackPluginHooks();\n      hooksMap.set(compilation, hooks);\n    }\n    return hooks;\n  }\n\n  constructor(public options: Options) {\n    if (!this.options.path || !this.options.json) {\n      throw new Error('Failed to write json because either `path` or `json` were not defined.');\n    }\n  }\n\n  apply(compiler: Compiler) {\n    compiler.hooks.emit.tapAsync(this.constructor.name, this.writeObject);\n  }\n\n  private writeObject = async (\n    compilation: compilation.Compilation,\n    callback: () => void\n  ): Promise<void> => {\n    let result: BeforeEmitOptions = {\n      json: this.options.json,\n      path: this.options.path,\n      plugin: this,\n    };\n    try {\n      result = await JsonWebpackPlugin.getHooks(compilation).beforeEmit.promise(result);\n    } catch (error) {\n      compilation.errors.push(error);\n    }\n\n    const json = JSON.stringify(result.json, undefined, this.options.pretty ? 2 : undefined);\n\n    // Once all files are added to the webpack compilation\n    // let the webpack compiler continue\n    compilation.assets[result.path] = {\n      source: () => json,\n      size: () => json.length,\n    };\n\n    await JsonWebpackPlugin.getHooks(compilation).afterEmit.promise({\n      json,\n      outputName: result.path,\n      plugin: this,\n    });\n\n    callback();\n  };\n}\n"]}