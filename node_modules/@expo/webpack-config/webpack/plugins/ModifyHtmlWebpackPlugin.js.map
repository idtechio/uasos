{"version":3,"file":"ModifyHtmlWebpackPlugin.js","sourceRoot":"","sources":["../../src/plugins/ModifyHtmlWebpackPlugin.ts"],"names":[],"mappings":";;AAEA,SAAS,gBAAgB,CAAC,QAAkB,EAAE,IAAY;;IACxD,OAAO,MAAA,MAAA,QAAQ,CAAC,OAAO,0CAAE,OAAO,0CAC5B,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,WAAW,EACrC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;AACnE,CAAC;AAkBD,MAAqB,uBAAuB;IAC1C,YAAoB,gBAAiD,EAAE;QAAnD,kBAAa,GAAb,aAAa,CAAsC;IAAG,CAAC;IAE3E,KAAK,CAAC,WAAW,CACf,QAAkB,EAClB,WAAsC,EACtC,IAAoB;QAEpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,QAAkB;QACtB,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,EACrB,KAAK,EAAE,WAAsC,EAAE,EAAE;YAC/C,gEAAgE;YAChE,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAQ,CAAC;YACjF,IAAI,iBAAiB,EAAE;gBACrB,IAAI,OAAO,iBAAiB,CAAC,QAAQ,KAAK,WAAW,EAAE;oBACrD,WAAW,CAAC,MAAM,CAAC,IAAI,CACrB,IAAI,KAAK,CACP,iIAAiI,CAClI,CACF,CAAC;oBACF,OAAO;iBACR;gBAED,iBAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,QAAQ,CAC7D,IAAI,CAAC,WAAW,CAAC,IAAI,EACrB,KAAK,EACH,IAAoB,EACpB,YAAiE,EACjE,EAAE;oBACF,sDAAsD;oBACtD,kEAAkE;oBAClE,MAAM,kBAAkB,GACtB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,UAAU;wBAC7C,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;wBACxC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,KAAK,KAAK,CAAC;oBAEhD,IAAI,kBAAkB,KAAK,KAAK,EAAE;wBAChC,OAAO,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;qBACjC;oBAED,IAAI;wBACF,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;qBAC5D;oBAAC,OAAO,KAAK,EAAE;wBACd,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBAChC;oBAED,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC3B,CAAC,CACF,CAAC;aACH;QACH,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AAzDD,0CAyDC","sourcesContent":["import { compilation as compilationNS, Compiler, Plugin } from 'webpack';\n\nfunction maybeFetchPlugin(compiler: Compiler, name: string): Plugin | undefined {\n  return compiler.options?.plugins\n    ?.map(({ constructor }) => constructor)\n    .find(constructor => constructor && constructor.name === name);\n}\n\nexport type HTMLPluginData = {\n  assetTags: any;\n  outputName: string;\n  plugin: any;\n};\n\nexport type HTMLLinkNode = {\n  rel?: string;\n  name?: string;\n  content?: string;\n  media?: string;\n  href?: string;\n  sizes?: string;\n  node: any;\n};\n\nexport default class ModifyHtmlWebpackPlugin {\n  constructor(private modifyOptions: { inject?: boolean | Function } = {}) {}\n\n  async modifyAsync(\n    compiler: Compiler,\n    compilation: compilationNS.Compilation,\n    data: HTMLPluginData\n  ): Promise<HTMLPluginData> {\n    return data;\n  }\n\n  apply(compiler: Compiler) {\n    compiler.hooks.make.tapPromise(\n      this.constructor.name,\n      async (compilation: compilationNS.Compilation) => {\n        // Hook into the html-webpack-plugin processing and add the html\n        const HtmlWebpackPlugin = maybeFetchPlugin(compiler, 'HtmlWebpackPlugin') as any;\n        if (HtmlWebpackPlugin) {\n          if (typeof HtmlWebpackPlugin.getHooks === 'undefined') {\n            compilation.errors.push(\n              new Error(\n                'ModifyHtmlWebpackPlugin - This ModifyHtmlWebpackPlugin version is not compatible with your current HtmlWebpackPlugin version.\\n'\n              )\n            );\n            return;\n          }\n\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync(\n            this.constructor.name,\n            async (\n              data: HTMLPluginData,\n              htmlCallback: (error: Error | null, data: HTMLPluginData) => void\n            ) => {\n              // Skip if a custom injectFunction returns false or if\n              // the htmlWebpackPlugin optuons includes a `favicons: false` flag\n              const isInjectionAllowed =\n                typeof this.modifyOptions.inject === 'function'\n                  ? this.modifyOptions.inject(data.plugin)\n                  : data.plugin.options.pwaManifest !== false;\n\n              if (isInjectionAllowed === false) {\n                return htmlCallback(null, data);\n              }\n\n              try {\n                data = await this.modifyAsync(compiler, compilation, data);\n              } catch (error) {\n                compilation.errors.push(error);\n              }\n\n              htmlCallback(null, data);\n            }\n          );\n        }\n      }\n    );\n  }\n}\n"]}