{"version":3,"file":"ModifyJsonWebpackPlugin.js","sourceRoot":"","sources":["../../src/plugins/ModifyJsonWebpackPlugin.ts"],"names":[],"mappings":";;AAUA,SAAS,gBAAgB,CAAC,QAAkB,EAAE,IAAY;;IACxD,OAAO,MAAA,MAAA,QAAQ,CAAC,OAAO,0CAAE,OAAO,0CAC5B,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,WAAW,EACrC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AACzE,CAAC;AAED,MAAqB,uBAAuB;IAC1C,KAAK,CAAC,WAAW,CACf,QAAkB,EAClB,WAAsC,EACtC,IAAuB;QAEvB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,QAAkB;QACtB,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,WAAgB,EAAE,EAAE;YAC/E,gEAAgE;YAChE,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,QAAQ,EAAE,0BAA0B,CAAQ,CAAC;YACxF,IAAI,iBAAiB,EAAE;gBACrB,IAAI,OAAO,iBAAiB,CAAC,QAAQ,KAAK,WAAW,EAAE;oBACrD,WAAW,CAAC,MAAM,CAAC,IAAI,CACrB,IAAI,KAAK,CACP,iIAAiI,CAClI,CACF,CAAC;oBACF,OAAO;iBACR;gBAED,iBAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,QAAQ,CACzD,IAAI,CAAC,WAAW,CAAC,IAAI,EACrB,KAAK,EACH,IAAuB,EACvB,QAAgE,EAChE,EAAE;oBACF,IAAI;wBACF,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;qBAC5D;oBAAC,OAAO,KAAK,EAAE;wBACd,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBAChC;oBAED,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvB,CAAC,CACF,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAzCD,0CAyCC","sourcesContent":["import { compilation as compilationNS, Compiler, Plugin } from 'webpack';\n\nimport { BeforeEmitOptions } from './JsonWebpackPlugin';\n\nexport type Options = {\n  path: string;\n  json: any;\n  pretty?: boolean;\n};\n\nfunction maybeFetchPlugin(compiler: Compiler, name: string): Plugin | undefined {\n  return compiler.options?.plugins\n    ?.map(({ constructor }) => constructor)\n    .find(constructor => constructor && constructor.name.endsWith(name));\n}\n\nexport default class ModifyJsonWebpackPlugin {\n  async modifyAsync(\n    compiler: Compiler,\n    compilation: compilationNS.Compilation,\n    data: BeforeEmitOptions\n  ): Promise<BeforeEmitOptions> {\n    return data;\n  }\n\n  apply(compiler: Compiler) {\n    compiler.hooks.make.tapPromise(this.constructor.name, async (compilation: any) => {\n      // Hook into the html-webpack-plugin processing and add the html\n      const JsonWebpackPlugin = maybeFetchPlugin(compiler, 'PwaManifestWebpackPlugin') as any;\n      if (JsonWebpackPlugin) {\n        if (typeof JsonWebpackPlugin.getHooks === 'undefined') {\n          compilation.errors.push(\n            new Error(\n              'ModifyJsonWebpackPlugin - This ModifyJsonWebpackPlugin version is not compatible with your current JsonWebpackPlugin version.\\n'\n            )\n          );\n          return;\n        }\n\n        JsonWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync(\n          this.constructor.name,\n          async (\n            data: BeforeEmitOptions,\n            callback: (error: Error | null, data: BeforeEmitOptions) => void\n          ) => {\n            try {\n              data = await this.modifyAsync(compiler, compilation, data);\n            } catch (error) {\n              compilation.errors.push(error);\n            }\n\n            callback(null, data);\n          }\n        );\n      }\n    });\n  }\n}\n"]}