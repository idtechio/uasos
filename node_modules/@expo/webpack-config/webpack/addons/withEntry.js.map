{"version":3,"file":"withEntry.js","sourceRoot":"","sources":["../../src/addons/withEntry.ts"],"names":[],"mappings":";;;;;AAAA,8CAA4D;AAC5D,gEAAuC;AAGvC,oCAA6C;AAE7C;;;;;;;GAOG;AACH,SAAwB,SAAS,CAC/B,aAA+B,EAC/B,MAAsE,EAAE,EACxE,OAAgD;IAEhD,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,IAAI,8BAAsB,EAAE,CAAC;IAE9D,MAAM,aAAa,GAAG,sBAAW,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;IAE7E,IAAI,CAAC,aAAa,EAAE;QAClB,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,MAAM,IAAI,KAAK,CACb,8CAA8C,OAAO,CAAC,SAAS,sBAAsB,CACtF,CAAC;SACH;QACD,4EAA4E;QAC5E,OAAO,aAAa,CAAC;KACtB;IAED,MAAM,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC;IACtC,aAAa,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE;QAC/B,MAAM,OAAO,GAAG,MAAM,yBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,IAAI,OAAO,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;gBACxC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBAC/B,OAAO,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;iBAC7B;gBACD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;aACpC;SACF;aAAM,IAAI,OAAO,CAAC,MAAM,EAAE;YACzB,uBAAuB;YACvB,MAAM,IAAI,KAAK,CACb,4DAA4D,OAAO,CAAC,SAAS,sEAAsE,CACpJ,CAAC;SACH;QACD,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;IAEF,OAAO,aAAa,CAAC;AACvB,CAAC;AAvCD,4BAuCC","sourcesContent":["import { getPossibleProjectRoot } from '@expo/config/paths';\nimport resolveFrom from 'resolve-from';\n\nimport { AnyConfiguration, InputEnvironment } from '../types';\nimport { resolveEntryAsync } from '../utils';\n\n/**\n * Inject a new entry path into an existing Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param env Environment props used to get the Expo config.\n * @param options new entry path to inject.\n * @category addons\n */\nexport default function withEntry(\n  webpackConfig: AnyConfiguration,\n  env: Pick<InputEnvironment, 'projectRoot' | 'config' | 'locations'> = {},\n  options: { entryPath: string; strict?: boolean }\n): AnyConfiguration {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n\n  const extraAppEntry = resolveFrom.silent(env.projectRoot, options.entryPath);\n\n  if (!extraAppEntry) {\n    if (options.strict) {\n      throw new Error(\n        `[WEBPACK]: The required app entry module: \"${options.entryPath}\" couldn't be found.`\n      );\n    }\n    // Couldn't resolve the app entry so return the config without modifying it.\n    return webpackConfig;\n  }\n\n  const expoEntry = webpackConfig.entry;\n  webpackConfig.entry = async () => {\n    const entries = await resolveEntryAsync(expoEntry);\n    if (entries.app) {\n      if (!entries.app.includes(extraAppEntry)) {\n        if (!Array.isArray(entries.app)) {\n          entries.app = [entries.app];\n        }\n        entries.app.unshift(extraAppEntry);\n      }\n    } else if (options.strict) {\n      // Better to be safe...\n      throw new Error(\n        `[WEBPACK]: Failed to include required app entry module: \"${options.entryPath}\" because the webpack entry object doesn't contain an \\`app\\` field.`\n      );\n    }\n    return entries;\n  };\n\n  return webpackConfig;\n}\n"]}