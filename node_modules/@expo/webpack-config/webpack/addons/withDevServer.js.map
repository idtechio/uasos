{"version":3,"file":"withDevServer.js","sourceRoot":"","sources":["../../src/addons/withDevServer.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport { boolish } from 'getenv';\nimport * as path from 'path';\nimport errorOverlayMiddleware from 'react-dev-utils/errorOverlayMiddleware';\n// @ts-ignore\nimport evalSourceMapMiddleware from 'react-dev-utils/evalSourceMapMiddleware';\nimport ignoredFiles from 'react-dev-utils/ignoredFiles';\nimport noopServiceWorkerMiddleware from 'react-dev-utils/noopServiceWorkerMiddleware';\nimport redirectServedPath from 'react-dev-utils/redirectServedPathMiddleware';\nimport {\n  ProxyConfigArray,\n  ProxyConfigMap,\n  Configuration as WebpackDevServerConfiguration,\n} from 'webpack-dev-server';\n\nimport { getPaths, getPublicPaths } from '../env';\nimport { AnyConfiguration, DevConfiguration, Environment } from '../types';\n\n// Ensure the certificate and key provided are valid and if not\n// throw an easy to debug error\nfunction validateKeyAndCerts({ cert, key, keyFile, crtFile }: any): boolean {\n  let encrypted;\n  try {\n    // publicEncrypt will throw an error with an invalid cert\n    encrypted = crypto.publicEncrypt(cert, Buffer.from('test'));\n  } catch (err) {\n    return false;\n  }\n\n  try {\n    // privateDecrypt will throw an error with an invalid key\n    crypto.privateDecrypt(key, encrypted);\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n\n// Read file and throw an error if it doesn't exist\nfunction readEnvFile(file: string, type: string): any {\n  if (!fs.existsSync(file)) {\n    throw new Error(\n      `You specified ${chalk.cyan(type)} in your env, but the file \"${chalk.yellow(\n        file\n      )}\" can't be found.`\n    );\n  }\n  return fs.readFileSync(file);\n}\n\n// Get the https config\n// Return cert files if provided in env, otherwise just true or false\nfunction getHttpsConfig(projectRoot: string, isHttps: boolean): any {\n  const { SSL_CRT_FILE, SSL_KEY_FILE } = process.env;\n\n  if (isHttps && SSL_CRT_FILE && SSL_KEY_FILE) {\n    const crtFile = path.resolve(projectRoot, SSL_CRT_FILE);\n    const keyFile = path.resolve(projectRoot, SSL_KEY_FILE);\n    const config = {\n      cert: readEnvFile(crtFile, 'SSL_CRT_FILE'),\n      key: readEnvFile(keyFile, 'SSL_KEY_FILE'),\n    };\n\n    if (validateKeyAndCerts({ ...config, keyFile, crtFile })) {\n      return config;\n    } else {\n      console.log(\n        chalk.yellow(\n          `\\u203A Failed to self-sign SSL certificates for HTTPS. Falling back to insecure https. You can re run with \\`--no-https\\` to disable HTTPS, or delete the \\`.expo\\` folder and try again.`\n        )\n      );\n      return true;\n    }\n  }\n  return isHttps;\n}\n\n// @ts-ignore\nconst host = process.env.HOST || '0.0.0.0';\nconst sockHost = process.env.WDS_SOCKET_HOST;\nconst sockPath = process.env.WDS_SOCKET_PATH; // default: '/sockjs-node'\nconst sockPort = process.env.WDS_SOCKET_PORT;\n\n/**\n *\n * @param input\n * @internal\n */\nexport function isDevConfig(input: AnyConfiguration): input is DevConfiguration {\n  return input && input.mode === 'development';\n}\n\ntype SelectiveEnv = Pick<Environment, 'mode' | 'locations' | 'projectRoot' | 'https' | 'platform'>;\n\ntype DevServerOptions = {\n  allowedHost?: string;\n  proxy?: ProxyConfigMap | ProxyConfigArray;\n};\n\n/**\n * Add a valid dev server to the provided Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param env locations, projectRoot, and https options.\n * @param options Configure how the dev server is setup.\n * @category addons\n */\nexport default function withDevServer(\n  webpackConfig: AnyConfiguration,\n  env: SelectiveEnv,\n  options: DevServerOptions = {}\n): AnyConfiguration {\n  if (isDevConfig(webpackConfig)) {\n    webpackConfig.devServer = createDevServer(env, options);\n  }\n  return webpackConfig;\n}\n\n/**\n * Create a valid Webpack dev server config.\n *\n * @param env locations, projectRoot, and https options.\n * @param options Configure how the dev server is setup.\n * @internal\n */\nexport function createDevServer(\n  env: SelectiveEnv,\n  { allowedHost, proxy }: DevServerOptions = {}\n): WebpackDevServerConfiguration {\n  const { https = false } = env;\n  const locations = env.locations || getPaths(env.projectRoot, env);\n  const isNative = ['ios', 'android'].includes(env.platform);\n  const { publicPath: publicUrlOrPath } = getPublicPaths(env);\n  // Because native React runtimes uses .bundle we must make\n  // the .bundle extension be served as javascript.\n  const mimeTypes: any = isNative\n    ? {\n        typeMap: { 'application/javascript': ['bundle'] },\n        force: true,\n      }\n    : undefined;\n\n  // Attempt to keep this as close to create-react-native app as possible.\n  // https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/config/webpackDevServer.config.js\n  return {\n    // WebpackDevServer 2.4.3 introduced a security fix that prevents remote\n    // websites from potentially accessing local content through DNS rebinding:\n    // https://github.com/webpack/webpack-dev-server/issues/887\n    // https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\n    // However, it made several existing use cases such as development in cloud\n    // environment or subdomains in development significantly more complicated:\n    // https://github.com/facebook/create-react-app/issues/2271\n    // https://github.com/facebook/create-react-app/issues/2233\n    // While we're investigating better solutions, for now we will take a\n    // compromise. Since our WDS configuration only serves files in the `public`\n    // folder we won't consider accessing them a vulnerability. However, if you\n    // use the `proxy` feature, it gets more dangerous because it can expose\n    // remote code execution vulnerabilities in backends like Django and Rails.\n    // So we will disable the host check normally, but enable it if you have\n    // specified the `proxy` setting. Finally, we let you override it if you\n    // really know what you're doing with a special environment variable.\n    disableHostCheck: !proxy || boolish('DANGEROUSLY_DISABLE_HOST_CHECK', false),\n    // Enable gzip compression of generated files.\n    compress: true,\n    // Silence WebpackDevServer's own logs since they're generally not useful.\n    // It will still show compile warnings and errors with this setting.\n    clientLogLevel: 'silent',\n    // By default WebpackDevServer serves physical files from current directory\n    // in addition to all the virtual build products that it serves from memory.\n    // This is confusing because those files won’t automatically be available in\n    // production build folder unless we copy them. However, copying the whole\n    // project directory is dangerous because we may expose sensitive files.\n    // Instead, we establish a convention that only files in `public` directory\n    // get served. Our build script will copy `public` into the `build` folder.\n    // In `index.html`, you can get URL of `public` folder with %WEB_PUBLIC_URL%:\n    // <link rel=\"icon\" href=\"%WEB_PUBLIC_URL%/favicon.ico\">\n    // In JavaScript code, you can access it with `process.env.WEB_PUBLIC_URL`.\n    // Note that we only recommend to use `public` folder as an escape hatch\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\n    // for some reason broken when imported through webpack. If you just want to\n    // use an image, put it in `src` and `import` it from JavaScript instead.\n    contentBase: locations.template.folder,\n    contentBasePublicPath: publicUrlOrPath,\n    // By default files from `contentBase` will not trigger a page reload.\n    watchContentBase: true,\n    // Enable hot reloading server. It will provide WDS_SOCKET_PATH endpoint\n    // for the WebpackDevServer client so it can learn when the files were\n    // updated. The WebpackDevServer client is included as an entry point\n    // in the webpack development configuration. Note that only changes\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\n    hot: true,\n    // Use 'ws' instead of 'sockjs-node' on server since we're using native\n    // websockets in `webpackHotDevClient`.\n    transportMode: 'ws',\n    // Prevent a WS client from getting injected as we're already including\n    // `webpackHotDevClient`.\n    injectClient: false,\n    // Enable custom sockjs pathname for websocket connection to hot reloading server.\n    // Enable custom sockjs hostname, pathname and port for websocket connection\n    // to hot reloading server.\n    sockHost,\n    sockPath,\n    sockPort,\n    // It is important to tell WebpackDevServer to use the same \"publicPath\" path as\n    // we specified in the webpack config. When homepage is '.', default to serving\n    // from the root.\n    // remove last slash so user can land on `/test` instead of `/test/`\n    publicPath: '/',\n    // Hide `ℹ ｢wds｣: Project is running at`\n    noInfo: true,\n    stats: 'none',\n    // Reportedly, this avoids CPU overload on some systems.\n    // https://github.com/facebook/create-react-app/issues/293\n    // src/node_modules is not ignored to support absolute imports\n    // https://github.com/facebook/create-react-app/issues/1065\n    watchOptions: {\n      ignored: ignoredFiles(locations.root),\n    },\n    https: getHttpsConfig(env.projectRoot, https),\n    host,\n    overlay: false,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebook/create-react-app/issues/387.\n      disableDotRule: true,\n      index: publicUrlOrPath,\n    },\n    public: allowedHost,\n    // `proxy` is run between `before` and `after` `webpack-dev-server` hooks\n    proxy,\n    before(app, server) {\n      // Everything we add here is for web support\n      if (isNative) {\n        return;\n      }\n      // Keep `evalSourceMapMiddleware` and `errorOverlayMiddleware`\n      // middlewares before `redirectServedPath` otherwise will not have any effect\n      // This lets us fetch source contents from webpack for the error overlay\n      app.use(evalSourceMapMiddleware(server));\n      // This lets us open files from the runtime error overlay.\n      app.use(errorOverlayMiddleware());\n\n      // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\n      app.use(noopServiceWorkerMiddleware(publicUrlOrPath));\n    },\n    after(app) {\n      // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match\n      app.use(redirectServedPath(publicUrlOrPath));\n    },\n    // Without disabling this on native, you get the error `Can't find variable self`.\n    inline: !isNative,\n    // Specify the mimetypes for hosting native bundles.\n    mimeTypes,\n  };\n}\n"]}