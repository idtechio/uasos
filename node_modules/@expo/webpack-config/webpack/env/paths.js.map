{"version":3,"file":"paths.js","sourceRoot":"","sources":["../../src/env/paths.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-env node */\nimport { ExpoConfig, getConfig, getWebOutputPath } from '@expo/config';\nimport { ensureSlash, getEntryPoint, getPossibleProjectRoot } from '@expo/config/paths';\nimport findWorkspaceRoot from 'find-yarn-workspace-root';\nimport fs from 'fs';\nimport path from 'path';\nimport url from 'url';\n\nimport { Environment, FilePaths, InputEnvironment } from '../types';\nimport getMode from './getMode';\n\nfunction getAbsolutePathWithProjectRoot(projectRoot: string, ...pathComponents: string[]): string {\n  // Simple check if we are dealing with a URL.\n  if (pathComponents?.length === 1 && pathComponents[0].startsWith('http')) {\n    return pathComponents[0];\n  }\n\n  return path.resolve(projectRoot, ...pathComponents);\n}\n\nfunction getModulesPath(projectRoot: string): string {\n  const workspaceRoot = findWorkspaceRoot(path.resolve(projectRoot)); // Absolute path or null\n  if (workspaceRoot) {\n    return path.resolve(workspaceRoot, 'node_modules');\n  }\n\n  return path.resolve(projectRoot, 'node_modules');\n}\n\nfunction getPlatformExtensions(platform: string): string[] {\n  if (platform === 'ios' || platform === 'android') {\n    return [platform, 'native'];\n  }\n  return [platform];\n}\n\nfunction parsePaths(\n  projectRoot: string,\n  nativeAppManifest?: ExpoConfig,\n  env: Pick<InputEnvironment, 'platform'> = {}\n): FilePaths {\n  const inputProjectRoot = projectRoot || getPossibleProjectRoot();\n\n  function absolute(...pathComponents: string[]): string {\n    return getAbsolutePathWithProjectRoot(inputProjectRoot, ...pathComponents);\n  }\n\n  const packageJsonPath = absolute('package.json');\n  const modulesPath = getModulesPath(inputProjectRoot);\n  const productionPath = absolute(getWebOutputPath(nativeAppManifest));\n\n  function templatePath(filename: string = ''): string {\n    const overridePath = absolute(env.platform ?? 'web', filename);\n    if (fs.existsSync(overridePath)) {\n      return overridePath;\n    }\n    return path.join(__dirname, '../../web-default', filename);\n  }\n\n  function getProductionPath(...props: string[]): string {\n    return path.resolve(productionPath, ...props);\n  }\n\n  function getIncludeModule(...props: string[]): string {\n    return path.resolve(modulesPath, ...props);\n  }\n\n  let appMain: string | null = null;\n  try {\n    appMain = getEntryPoint(\n      inputProjectRoot,\n      ['./index', './src/index'],\n      getPlatformExtensions(env.platform ?? 'web')\n    );\n  } catch {\n    // ignore the error\n  }\n\n  return {\n    absolute,\n    includeModule: getIncludeModule,\n    packageJson: packageJsonPath,\n    root: path.resolve(inputProjectRoot),\n    appMain,\n    modules: modulesPath,\n    servedPath: getServedPath(inputProjectRoot),\n    template: {\n      get: templatePath,\n      folder: templatePath(),\n      indexHtml: templatePath('index.html'),\n      manifest: templatePath('manifest.json'),\n      serveJson: templatePath('serve.json'),\n      favicon: templatePath('favicon.ico'),\n    },\n    production: {\n      get: getProductionPath,\n      folder: getProductionPath(),\n      indexHtml: getProductionPath('index.html'),\n      manifest: getProductionPath('manifest.json'),\n      serveJson: getProductionPath('serve.json'),\n      favicon: getProductionPath('favicon.ico'),\n    },\n  };\n}\n\n/**\n * Sync method for getting default paths used throughout the Webpack config.\n * This is useful for Next.js which doesn't support async Webpack configs.\n *\n * @param projectRoot\n * @category env\n */\nexport function getPaths(\n  projectRoot: string,\n  env: Pick<InputEnvironment, 'platform'> = {}\n): FilePaths {\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  return parsePaths(projectRoot, exp, env);\n}\n\n/**\n * Async method for getting default paths used throughout the Webpack config.\n *\n * @param projectRoot\n * @category env\n */\nexport async function getPathsAsync(\n  projectRoot: string,\n  env: Pick<InputEnvironment, 'platform'> = {}\n): Promise<FilePaths> {\n  let exp;\n  try {\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp;\n  } catch (error) {}\n  return parsePaths(projectRoot, exp, env);\n}\n\n/**\n * Get paths dictating where the app is served regardless of the current Webpack mode.\n *\n * @param projectRoot\n * @category env\n */\nexport function getServedPath(projectRoot: string): string {\n  const { pkg } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  const envPublicUrl = process.env.WEB_PUBLIC_URL;\n\n  // We use `WEB_PUBLIC_URL` environment variable or \"homepage\" field to infer\n  // \"public path\" at which the app is served.\n  // Webpack needs to know it to put the right <script> hrefs into HTML even in\n  // single-page apps that may serve index.html for nested URLs like /todos/42.\n  // We can't use a relative path in HTML because we don't want to load something\n  // like /todos/42/static/js/bundle.7289d.js. We have to know the root.\n  const publicUrl = envPublicUrl || pkg.homepage;\n  const servedUrl = envPublicUrl || (publicUrl ? url.parse(publicUrl).pathname : '/');\n  return ensureSlash(servedUrl!, true);\n}\n\n/**\n * Get paths dictating where the app is served. In development mode this returns default values.\n *\n * @param env\n * @category env\n */\nexport function getPublicPaths(\n  env: Pick<Environment, 'mode' | 'projectRoot'>\n): {\n  /**\n   * Webpack uses `publicPath` to determine where the app is being served from.\n   * It requires a trailing slash, or the file assets will get an incorrect path.\n   * In development, we always serve from the root. This makes config easier.\n   */\n  publicPath: string;\n\n  /**\n   * `publicUrl` is just like `publicPath`, but we will provide it to our app\n   * as %WEB_PUBLIC_URL% in `index.html` and `process.env.WEB_PUBLIC_URL` in JavaScript.\n   * Omit trailing slash as %WEB_PUBLIC_URL%/xyz looks better than %WEB_PUBLIC_URL%xyz.\n   */\n  publicUrl: string;\n} {\n  const parsedMode = getMode(env);\n  if (parsedMode === 'production') {\n    const publicPath = getServedPath(env.projectRoot);\n    return {\n      publicPath,\n      publicUrl: publicPath.slice(0, -1),\n    };\n  }\n\n  return { publicUrl: '', publicPath: '/' };\n}\n\n/**\n * Get the output folder path. Defaults to `web-build`.\n *\n * @param projectRoot\n * @category env\n */\nexport function getProductionPath(projectRoot: string): string {\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  return getAbsolutePathWithProjectRoot(projectRoot, getWebOutputPath(exp));\n}\n\n/**\n * Get an absolute path relative to the project root while accounting for remote paths (`https://`).\n *\n * @param projectRoot\n * @category env\n */\nexport function getAbsolute(projectRoot: string, ...pathComponents: string[]): string {\n  const inputProjectRoot = projectRoot || getPossibleProjectRoot();\n  return getAbsolutePathWithProjectRoot(inputProjectRoot, ...pathComponents);\n}\n"]}