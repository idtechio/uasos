{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cli/index.ts"],"names":[],"mappings":";;;;;;AACA,kDAA0B;AAC1B,yCAAoC;AACpC,+BAA+B;AAE/B,4CAAwC;AACxC,sDAAoC;AAEpC,IAAI,gBAAgB,GAAW,EAAE,CAAC;AAElC,MAAM,WAAW,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;AAErE,MAAM,OAAO,GAAG,IAAI,mBAAO,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC;KAC5C,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC;KAC9B,SAAS,CAAC,qBAAqB,CAAC;KAChC,KAAK,CAAC,GAAG,eAAK,CAAC,KAAK,CAAC,qBAAqB,CAAC,YAAY,CAAC;KACxD,WAAW,CAAC,kDAAkD,CAAC;KAC/D,MAAM,CAAC,iBAAiB,EAAE,uDAAuD,CAAC;KAClF,MAAM,CAAC,aAAa,EAAE,iCAAiC,CAAC;KACxD,MAAM,CAAC,CAAC,qBAA6B,EAAE,OAAY,EAAE,EAAE;IACtD,gBAAgB,GAAG,qBAAqB,CAAC;AAC3C,CAAC,CAAC;KACD,kBAAkB,EAAE;KACpB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAEvB,KAAK,UAAU,GAAG;IAChB,IAAI,OAAO,gBAAgB,KAAK,QAAQ,EAAE;QACxC,gBAAgB,GAAG,gBAAgB,CAAC,IAAI,EAAE,CAAC;KAC5C;IAED,MAAM,mBAAmB,GAAG,cAAO,CAAC,gBAAgB,CAAC,CAAC;IAEtD,oBAAQ,CAAC,EAAE,WAAW,EAAE,mBAAmB,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;AAChG,CAAC;AAED,GAAG,EAAE;KACF,IAAI,CAAC,gBAAY,CAAC;KAClB,KAAK,CAAC,KAAK,EAAC,MAAM,EAAC,EAAE;IACpB,OAAO,CAAC,GAAG,EAAE,CAAC;IACd,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;IACtC,IAAI,MAAM,CAAC,OAAO,EAAE;QAClB,OAAO,CAAC,GAAG,CAAC,KAAK,eAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;KAC/D;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,GAAG,CAAC,iEAAiE,CAAC,CAAC,CAAC;QAC1F,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACrB;IACD,OAAO,CAAC,GAAG,EAAE,CAAC;IAEd,MAAM,gBAAY,EAAE,CAAC;IAErB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport { resolve } from 'path';\n\nimport { runAsync } from '../customize';\nimport shouldUpdate from './update';\n\nlet projectDirectory: string = '';\n\nconst packageJson = () => require('@expo/next-adapter/package.json');\n\nconst program = new Command(packageJson().name)\n  .version(packageJson().version)\n  .arguments('<project-directory>')\n  .usage(`${chalk.green('<project-directory>')} [options]`)\n  .description('Generate static Next.js files into your project.')\n  .option('-c, --customize', 'Select template files you want to add to your project')\n  .option('-f, --force', 'Allows replacing existing files')\n  .action((inputProjectDirectory: string, options: any) => {\n    projectDirectory = inputProjectDirectory;\n  })\n  .allowUnknownOption()\n  .parse(process.argv);\n\nasync function run() {\n  if (typeof projectDirectory === 'string') {\n    projectDirectory = projectDirectory.trim();\n  }\n\n  const resolvedProjectRoot = resolve(projectDirectory);\n\n  runAsync({ projectRoot: resolvedProjectRoot, force: program.force, yes: !program.customize });\n}\n\nrun()\n  .then(shouldUpdate)\n  .catch(async reason => {\n    console.log();\n    console.log('Aborting installation.');\n    if (reason.command) {\n      console.log(`  ${chalk.magenta(reason.command)} has failed.`);\n    } else {\n      console.log(chalk.red('An unexpected error was encountered. Please report it as a bug:'));\n      console.log(reason);\n    }\n    console.log();\n\n    await shouldUpdate();\n\n    process.exit(1);\n  });\n"]}