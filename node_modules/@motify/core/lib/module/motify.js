function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import { useMotify } from './use-map-animate-to-style';
import Animated from 'react-native-reanimated'; // copied from reanimated
// if we use Animated.AnimateProps
// then we get this TypeScript error:
// Exported variable 'View' has or is using name 'AnimatedNode' from external module "react-native-reanimated" but cannot be named.

export default function motify(ComponentWithoutAnimation) {
  const Component = Animated.createAnimatedComponent(ComponentWithoutAnimation);

  const withAnimations = () => {
    const Motified = /*#__PURE__*/forwardRef(function Moti({
      animate,
      style,
      from,
      transition,
      delay,
      state,
      stylePriority,
      onDidAnimate,
      exit,
      animateInitialState,
      exitTransition,
      ...props
    }, ref) {
      const animated = useMotify({
        animate,
        from,
        transition,
        delay,
        state,
        stylePriority,
        onDidAnimate,
        exit,
        exitTransition,
        animateInitialState
      });
      return /*#__PURE__*/React.createElement(Component, _extends({}, props, {
        // TODO
        style: [style, animated.style],
        ref: ref // TODO

      }));
    });
    Motified.displayName = "Moti.".concat(Component.displayName || Component.name || 'NoName');
    return Motified;
  };

  return withAnimations;
}
//# sourceMappingURL=motify.js.map