{"version":3,"sources":["motify.tsx"],"names":["React","forwardRef","useMotify","Animated","motify","ComponentWithoutAnimation","Component","createAnimatedComponent","withAnimations","Motified","Moti","animate","style","from","transition","delay","state","stylePriority","onDidAnimate","exit","animateInitialState","exitTransition","props","ref","animated","displayName","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAoE,OAApE;AAGA,SAASC,SAAT,QAA0B,4BAA1B;AACA,OAAOC,QAAP,MAIO,yBAJP,C,CAMA;AACA;AACA;AACA;;AAmBA,eAAe,SAASC,MAAT,CAMbC,yBANa,EAMoC;AACjD,QAAMC,SAAS,GAAGH,QAAQ,CAACI,uBAAT,CAChBF,yBADgB,CAAlB;;AAIA,QAAMG,cAAc,GAAG,MAAM;AAC3B,UAAMC,QAAQ,gBAAGR,UAAU,CAQzB,SAASS,IAAT,CACA;AACEC,MAAAA,OADF;AAEEC,MAAAA,KAFF;AAGEC,MAAAA,IAHF;AAIEC,MAAAA,UAJF;AAKEC,MAAAA,KALF;AAMEC,MAAAA,KANF;AAOEC,MAAAA,aAPF;AAQEC,MAAAA,YARF;AASEC,MAAAA,IATF;AAUEC,MAAAA,mBAVF;AAWEC,MAAAA,cAXF;AAYE,SAAGC;AAZL,KADA,EAeAC,GAfA,EAgBA;AACA,YAAMC,QAAQ,GAAGtB,SAAS,CAAC;AACzBS,QAAAA,OADyB;AAEzBE,QAAAA,IAFyB;AAGzBC,QAAAA,UAHyB;AAIzBC,QAAAA,KAJyB;AAKzBC,QAAAA,KALyB;AAMzBC,QAAAA,aANyB;AAOzBC,QAAAA,YAPyB;AAQzBC,QAAAA,IARyB;AASzBE,QAAAA,cATyB;AAUzBD,QAAAA;AAVyB,OAAD,CAA1B;AAaA,0BACE,oBAAC,SAAD,eACOE,KADP;AACsB;AACpB,QAAA,KAAK,EAAE,CAACV,KAAD,EAAQY,QAAQ,CAACZ,KAAjB,CAFT;AAGE,QAAA,GAAG,EAAEW,GAHP,CAGmB;;AAHnB,SADF;AAOD,KA7C0B,CAA3B;AA+CAd,IAAAA,QAAQ,CAACgB,WAAT,kBACEnB,SAAS,CAACmB,WAAV,IAAyBnB,SAAS,CAACoB,IAAnC,IAA2C,QAD7C;AAIA,WAAOjB,QAAP;AACD,GArDD;;AAuDA,SAAOD,cAAP;AACD","sourcesContent":["import React, { forwardRef, ComponentType, FunctionComponent } from 'react'\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native'\nimport type { MotiProps } from './types'\nimport { useMotify } from './use-map-animate-to-style'\nimport Animated, {\n  BaseAnimationBuilder,\n  EntryExitAnimationFunction,\n  LayoutAnimationFunction,\n} from 'react-native-reanimated'\n\n// copied from reanimated\n// if we use Animated.AnimateProps\n// then we get this TypeScript error:\n// Exported variable 'View' has or is using name 'AnimatedNode' from external module \"react-native-reanimated\" but cannot be named.\ntype AnimatedProps<Props> = {\n  animatedProps?: Partial<Props>\n  layout?:\n    | BaseAnimationBuilder\n    | LayoutAnimationFunction\n    | typeof BaseAnimationBuilder\n  entering?:\n    | BaseAnimationBuilder\n    | typeof BaseAnimationBuilder\n    | EntryExitAnimationFunction\n    | Keyframe\n  exiting?:\n    | BaseAnimationBuilder\n    | typeof BaseAnimationBuilder\n    | EntryExitAnimationFunction\n    | Keyframe\n}\n\nexport default function motify<\n  Style,\n  Props extends { style?: Style },\n  Ref,\n  ExtraProps,\n  Animate = ViewStyle | ImageStyle | TextStyle\n>(ComponentWithoutAnimation: ComponentType<Props>) {\n  const Component = Animated.createAnimatedComponent(\n    ComponentWithoutAnimation as FunctionComponent<Props>\n  )\n\n  const withAnimations = () => {\n    const Motified = forwardRef<\n      Ref,\n      Props &\n        AnimatedProps<Props> &\n        MotiProps<Animate> &\n        ExtraProps & {\n          children?: React.ReactNode\n        }\n    >(function Moti(\n      {\n        animate,\n        style,\n        from,\n        transition,\n        delay,\n        state,\n        stylePriority,\n        onDidAnimate,\n        exit,\n        animateInitialState,\n        exitTransition,\n        ...props\n      },\n      ref\n    ) {\n      const animated = useMotify({\n        animate,\n        from,\n        transition,\n        delay,\n        state,\n        stylePriority,\n        onDidAnimate,\n        exit,\n        exitTransition,\n        animateInitialState,\n      })\n\n      return (\n        <Component\n          {...(props as any)} // TODO\n          style={[style, animated.style]}\n          ref={ref as any} // TODO\n        />\n      )\n    })\n\n    Motified.displayName = `Moti.${\n      Component.displayName || Component.name || 'NoName'\n    }`\n\n    return Motified\n  }\n\n  return withAnimations\n}\n"]}