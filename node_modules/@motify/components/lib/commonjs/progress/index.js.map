{"version":3,"sources":["index.tsx"],"names":["MotiView","View","MotiProgressBar","height","progress","borderRadius","style","colorMode","containerColor","containerStyle","color","transition","type","duration","silenceRenderWarnings","barState","translateX","console","error","transitionString","JSON","stringify","_transition","parse","outerStyle","styles","container","backgroundColor","progressStyle","bar","animateOnProgressChange","percent","Math","round","current","animateTo","unnecessaryRerenders","previousValue","changes","checkUnnecessaryRerenders","isDev","__DEV__","warningProps","Object","entries","forEach","prop","push","length","warn","map","warning","join","StyleSheet","create","width","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,MAAMA,QAAQ,GAAG,kBAAOC,iBAAP,GAAjB;;AA+CO,SAASC,eAAT,CAAyB;AAC9BC,EAAAA,MAAM,GAAG,EADqB;AAE9BC,EAAAA,QAAQ,GAAG,CAFmB;AAG9BC,EAAAA,YAAY,GAAGF,MAAM,GAAG,CAHM;AAI9BG,EAAAA,KAJ8B;AAK9BC,EAAAA,SAAS,GAAG,MALkB;AAM9BC,EAAAA,cAAc,GAAGD,SAAS,KAAK,MAAd,GAAuB,MAAvB,GAAgC,MANnB;AAO9BE,EAAAA,cAP8B;AAQ9BC,EAAAA,KAAK,GAAG,SARsB;AAS9BC,EAAAA,UAAU,GAAG;AACXC,IAAAA,IAAI,EAAE,QADK;AAEXC,IAAAA,QAAQ,EAAE;AAFC,GATiB;AAa9BC,EAAAA,qBAAqB,GAAG;AAbM,CAAzB,EAckB;AACvB,QAAMC,QAAQ,GAAG,+BAAoB,OAAO;AAC1CC,IAAAA,UAAU,EAAE;AAD8B,GAAP,CAApB,CAAjB,CADuB,CAKvB;;AACA,MAAI,CAACL,UAAL,EAAiB;AACfM,IAAAA,OAAO,CAACC,KAAR,mIAC2H,OAAOP,UADlI,QAEEA,UAFF;AAID;;AACD,QAAMQ,gBAAgB,GAAGC,IAAI,CAACC,SAAL,CAAeV,UAAf,CAAzB;;AACA,QAAMW,WAAW,GAAG,oBAClB,MAAMF,IAAI,CAACG,KAAL,CAAWJ,gBAAX,CADY,EAElB,CAACA,gBAAD,CAFkB,CAApB;;AAKA,QAAMK,UAAU,GAAG,oBACjB,MAAM,CACJC,MAAM,CAACC,SADH,EAEJjB,cAFI,EAGJ;AAAEN,IAAAA,MAAF;AAAUE,IAAAA,YAAV;AAAwBsB,IAAAA,eAAe,EAAEnB;AAAzC,GAHI,CADW,EAMjB,CAACH,YAAD,EAAeG,cAAf,EAA+BC,cAA/B,EAA+CN,MAA/C,CANiB,CAAnB;AASA,QAAMyB,aAAa,GAAG,oBACpB,MAAM,CAACtB,KAAD,EAAQmB,MAAM,CAACI,GAAf,EAAoB;AAAExB,IAAAA,YAAF;AAAgBsB,IAAAA,eAAe,EAAEjB;AAAjC,GAApB,CADc,EAEpB,CAACL,YAAD,EAAeK,KAAf,EAAsBJ,KAAtB,CAFoB,CAAtB;AAKA,wBACE,SAASwB,uBAAT,GAAmC;AAAA;;AACjC,UAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW7B,QAAQ,GAAG,GAAtB,CAAhB;AAEA,UAAMY,UAAU,aAAMe,OAAO,GAAG,GAAhB,MAAhB;;AACA,QAAI,sBAAAhB,QAAQ,CAACmB,OAAT,wEAAkBlB,UAAlB,MAAiCA,UAArC,EAAiD;AAC/CD,MAAAA,QAAQ,CAACoB,SAAT,CAAoBD,OAAD,KAAc,EAAE,GAAGA,OAAL;AAAclB,QAAAA;AAAd,OAAd,CAAnB;AACD;AACF,GARH,EASE,CAACD,QAAD,EAAWX,QAAX,CATF;AAYA,QAAMgC,oBAAoB,GAAG,mBAAO;AAClC3B,IAAAA,cAAc,EAAE;AACd4B,MAAAA,aAAa,EAAE5B,cADD;AAEd6B,MAAAA,OAAO,EAAE;AAFK,KADkB;AAKlChC,IAAAA,KAAK,EAAE;AACL+B,MAAAA,aAAa,EAAE/B,KADV;AAELgC,MAAAA,OAAO,EAAE;AAFJ;AAL2B,GAAP,CAA7B;AAUA,wBACE,SAASC,yBAAT,GAAqC;AACnC,UAAMC,KAAK,GAAG,OAAOC,OAAP,KAAmB,WAAnB,IAAkCA,OAAhD;;AACA,QAAI3B,qBAAqB,IAAI,CAAC0B,KAA9B,EAAqC;AACnC;AACD;;AAED,QACE/B,cAAc,KACd2B,oBAAoB,CAACF,OAArB,CAA6BzB,cAA7B,CAA4C4B,aAF9C,EAGE;AACAD,MAAAA,oBAAoB,CAACF,OAArB,CAA6BzB,cAA7B,CAA4C6B,OAA5C,IAAuD,CAAvD;AACD;;AACD,QAAIhC,KAAK,KAAK8B,oBAAoB,CAACF,OAArB,CAA6B5B,KAA7B,CAAmC+B,aAAjD,EAAgE;AAC9DD,MAAAA,oBAAoB,CAACF,OAArB,CAA6B5B,KAA7B,CAAmCgC,OAAnC,IAA8C,CAA9C;AACD;;AAED,UAAMI,YAAiD,GAAG,EAA1D;AAEAC,IAAAA,MAAM,CAACC,OAAP,CAAeR,oBAAoB,CAACF,OAApC,EAA6CW,OAA7C,CACE,CAAC,CAACC,IAAD,EAAO;AAAER,MAAAA;AAAF,KAAP,CAAD,KAAyB;AACvB,UAAIA,OAAO,GAAG,CAAd,EAAiB;AACfI,QAAAA,YAAY,CAACK,IAAb,CAAkB;AAAED,UAAAA,IAAF;AAAQR,UAAAA;AAAR,SAAlB;AACD;AACF,KALH;;AAQA,QAAII,YAAY,CAACM,MAAjB,EAAyB;AACvB/B,MAAAA,OAAO,CAACgC,IAAR,6EACuEP,YAAY,CAC9EQ,GADkE,CAEhEC,OAAD,gBAAiBA,OAAO,CAACL,IAAzB,eAAkCK,OAAO,CAACb,OAA1C,kBAFiE,EAIlEc,IAJkE,CAKjE,IALiE,CADvE;AAUD;AACF,GAvCH,EAwCE,CAAC3C,cAAD,EAAiBK,qBAAjB,EAAwCR,KAAxC,CAxCF;AA2CA,SAAO,oBACL,mBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEkB;AAAb,kBACE,6BAAC,QAAD;AACE,IAAA,UAAU,EAAEF,WADd;AAEE,IAAA,KAAK,EAAEP,QAFT;AAGE,IAAA,KAAK,EAAEa;AAHT,IADF,CAFG,EAUL,CAACN,WAAD,EAAcP,QAAd,EAAwBS,UAAxB,EAAoCI,aAApC,CAVK,CAAP;AAYD;;AAED,MAAMH,MAAM,GAAG4B,wBAAWC,MAAX,CAAkB;AAC/B5B,EAAAA,SAAS,EAAE;AACT6B,IAAAA,KAAK,EAAE,MADE;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/B3B,EAAAA,GAAG,EAAE;AACH0B,IAAAA,KAAK,EAAE,MADJ;AAEHpD,IAAAA,MAAM,EAAE;AAFL;AAL0B,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react'\nimport { StyleSheet, ViewStyle, View } from 'react-native'\nimport { MotiTransitionProp, useDynamicAnimation, motify } from '@motify/core'\n\nconst MotiView = motify(View)()\n\nexport type MotiProgressBarProps = {\n  /**\n   * Number between 0-1\n   *\n   * @requires\n   */\n  progress: number\n  /**\n   * Height of the bar in pixels.\n   *\n   * @default `12`\n   */\n  height?: number\n  color?: string\n  containerColor?: string\n  /**\n   * Container border radius\n   */\n  borderRadius?: number\n  containerStyle?: ViewStyle\n  style?: ViewStyle\n  /**\n   * Transition for the animation. See the `transition` docs from Moti's `<MotiView />` to see how to use it.\n   *\n   * @default\n   * ```jsx\n   * {\n   *  type: 'timing',\n   *  duration: 300,\n   * }\n   * ```\n   */\n  transition?: MotiTransitionProp<ViewStyle>\n  /**\n   * @default `dark`\n   */\n  colorMode?: 'dark' | 'light'\n  /**\n   * @default false\n   *\n   * When `false`, Moti will warn you if you're re-rendering this component too often.\n   */\n  silenceRenderWarnings?: boolean\n}\n\nexport function MotiProgressBar({\n  height = 12,\n  progress = 0,\n  borderRadius = height / 2,\n  style,\n  colorMode = 'dark',\n  containerColor = colorMode === 'dark' ? '#333' : '#eee',\n  containerStyle,\n  color = '#00C806',\n  transition = {\n    type: 'timing',\n    duration: 200,\n  },\n  silenceRenderWarnings = false,\n}: MotiProgressBarProps) {\n  const barState = useDynamicAnimation(() => ({\n    translateX: '-100%',\n  }))\n\n  // TODO this won't be necessary once Moti memoizes props for you.\n  if (!transition) {\n    console.error(\n      `[moti] <ProgressBar /> \"transition\" prop must be undefined or a Moti transition object, but it got this type instead: ${typeof transition}.`,\n      transition\n    )\n  }\n  const transitionString = JSON.stringify(transition)\n  const _transition = useMemo<typeof transition>(\n    () => JSON.parse(transitionString),\n    [transitionString]\n  )\n\n  const outerStyle = useMemo(\n    () => [\n      styles.container,\n      containerStyle,\n      { height, borderRadius, backgroundColor: containerColor },\n    ],\n    [borderRadius, containerColor, containerStyle, height]\n  )\n\n  const progressStyle = useMemo(\n    () => [style, styles.bar, { borderRadius, backgroundColor: color }],\n    [borderRadius, color, style]\n  )\n\n  useEffect(\n    function animateOnProgressChange() {\n      const percent = Math.round(progress * 100)\n\n      const translateX = `${percent - 100}%`\n      if (barState.current?.translateX !== translateX) {\n        barState.animateTo((current) => ({ ...current, translateX }))\n      }\n    },\n    [barState, progress]\n  )\n\n  const unnecessaryRerenders = useRef({\n    containerStyle: {\n      previousValue: containerStyle,\n      changes: 0,\n    },\n    style: {\n      previousValue: style,\n      changes: 0,\n    },\n  })\n  useEffect(\n    function checkUnnecessaryRerenders() {\n      const isDev = typeof __DEV__ === 'undefined' || __DEV__\n      if (silenceRenderWarnings || !isDev) {\n        return\n      }\n\n      if (\n        containerStyle !==\n        unnecessaryRerenders.current.containerStyle.previousValue\n      ) {\n        unnecessaryRerenders.current.containerStyle.changes += 1\n      }\n      if (style !== unnecessaryRerenders.current.style.previousValue) {\n        unnecessaryRerenders.current.style.changes += 1\n      }\n\n      const warningProps: { changes: number; prop: string }[] = []\n\n      Object.entries(unnecessaryRerenders.current).forEach(\n        ([prop, { changes }]) => {\n          if (changes > 5) {\n            warningProps.push({ prop, changes })\n          }\n        }\n      )\n\n      if (warningProps.length) {\n        console.warn(\n          `[moti] <MotiProgress /> is re-rendering often due to these props: ${warningProps\n            .map(\n              (warning) => `\"${warning.prop}: ${warning.changes} re-renders\"`\n            )\n            .join(\n              ', '\n            )}. This can reduce animation performance. Please memoize these props with useMemo, or create them outside of render code.`,\n          `If you are intentionally re-rendering this often, for some reason, pass silenceRenderWarnings={true} on this component.`\n        )\n      }\n    },\n    [containerStyle, silenceRenderWarnings, style]\n  )\n\n  return useMemo(\n    () => (\n      <View style={outerStyle}>\n        <MotiView\n          transition={_transition}\n          state={barState}\n          style={progressStyle}\n        />\n      </View>\n    ),\n    [_transition, barState, outerStyle, progressStyle]\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    overflow: 'hidden',\n  },\n  bar: {\n    width: '100%',\n    height: '100%',\n  },\n})\n"]}