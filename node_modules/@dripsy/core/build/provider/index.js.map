{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/provider/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AACnE,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAA;AACvC,OAAO,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAA;AAC5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAA;AA0C9C,MAAM,aAAa,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,EAAsB,EAAE,EAAE;IAC5D,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE;QACtC,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;YACzB,OAAO,IAAI,CAAA;SACZ;QACD,IAAI,GAAG,EAAE;YACP,OAAO,KAAK,CAAA;SACb;QACD,OAAO,IAAI,CAAA;IACb,CAAC,CAAC,CAAA;IAEF,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;IAEzB,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,KAAK,CAAC,OAAO,EAAE;YACjB,QAAQ,CAAC,IAAI,CAAC,CAAA;SACf;IACH,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,OAAO;QACL,KAAK;KACN,CAAA;AACH,CAAC,CAAA;AAED,MAAM,UAAU,cAAc,CAAC,CAAQ;IACrC,MAAM,EAAE,cAAc,GAAG,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAA;IACzD,MAAM,EAAE,KAAK,EAAE,GAAG,aAAa,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;IAExC,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAA;IAEnD,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,EAAE,CAAC,cAAc,CAAC,GAAG,CAAA;KAC7B;IAED,OAAO,CACL,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAC1C;MAAA,CAAC,uBAAuB,CAAC,CAAC,QAAQ,CAAC,EAAE,uBAAuB,CAC9D;IAAA,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAC/B,CAAA;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,aAAa;IAC3B,MAAM,IAAI,KAAK,CACb,6EAA6E,CAC9E,CAAA;AACH,CAAC","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { Platform } from 'react-native'\nimport { BreakpointIndexProvider } from '../css/breakpoints'\nimport { DripsyThemeContext } from './context'\n\ntype Props = DripsyThemeContext & {\n  children: React.ReactNode\n} & (\n    | {\n        /**\n         * Set this boolean to `true` if you are using SSR on your app.\n         *\n         * Keep in mind, Dripsy doesn't support SSR anymore.\n         *\n         * Enabling this boolean just renders `null` until your app has mounted on web.\n         *\n         * Set this to `true` if you aren't gating your content already, and if you use responsive arrays in your app.\n         */\n        ssr?: false\n        ssrPlaceholder?: never\n      }\n    | {\n        /**\n         * Set this boolean to `true` if you are using SSR on your app.\n         *\n         * Keep in mind, Dripsy doesn't support SSR anymore.\n         *\n         * Enabling this boolean just renders `null` until your app has mounted on web.\n         *\n         * Set this to `true` if you aren't gating your content already, and if you use responsive arrays in your app.\n         */\n        ssr: true\n        /**\n         * When `ssr` is true, your app will return null on the first mount by default.\n         *\n         * You can use the ssrPlaceholder if you'd prefer.\n         *\n         * ```tsx\n         * <DripsyProvider ssr ssrPlaceholder={<LoadingScreen />}>{children}</DripsyProvider>\n         * ```\n         */\n        ssrPlaceholder?: React.ReactNode\n      }\n  )\n\nconst useIsSSRReady = ({ ssr = false }: Pick<Props, 'ssr'>) => {\n  const [ready, setReady] = useState(() => {\n    if (Platform.OS !== 'web') {\n      return true\n    }\n    if (ssr) {\n      return false\n    }\n    return true\n  })\n\n  const isSSR = useRef(ssr)\n\n  useEffect(() => {\n    if (isSSR.current) {\n      setReady(true)\n    }\n  }, [])\n\n  return {\n    ready,\n  }\n}\n\nexport function DripsyProvider(p: Props) {\n  const { ssrPlaceholder = null, ssr, theme, children } = p\n  const { ready } = useIsSSRReady({ ssr })\n\n  const context = useMemo(() => ({ theme }), [theme])\n\n  if (!ready) {\n    return <>{ssrPlaceholder}</>\n  }\n\n  return (\n    <DripsyThemeContext.Provider value={context}>\n      <BreakpointIndexProvider>{children}</BreakpointIndexProvider>\n    </DripsyThemeContext.Provider>\n  )\n}\n\n/**\n * @deprecated use DripsyProvider instead\n */\nexport function ThemeProvider() {\n  throw new Error(\n    'üç∑ [Dripsy] ThemeProvider is deprecated, please use DripsyProvider instead.'\n  )\n}\n"]}