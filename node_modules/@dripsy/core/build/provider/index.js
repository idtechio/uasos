import React, { useEffect, useMemo, useRef, useState } from 'react';
import { Platform } from 'react-native';
import { BreakpointIndexProvider } from '../css/breakpoints';
import { DripsyThemeContext } from './context';
const useIsSSRReady = ({ ssr = false }) => {
    const [ready, setReady] = useState(() => {
        if (Platform.OS !== 'web') {
            return true;
        }
        if (ssr) {
            return false;
        }
        return true;
    });
    const isSSR = useRef(ssr);
    useEffect(() => {
        if (isSSR.current) {
            setReady(true);
        }
    }, []);
    return {
        ready,
    };
};
export function DripsyProvider(p) {
    const { ssrPlaceholder = null, ssr, theme, children } = p;
    const { ready } = useIsSSRReady({ ssr });
    const context = useMemo(() => ({ theme }), [theme]);
    if (!ready) {
        return <>{ssrPlaceholder}</>;
    }
    return (<DripsyThemeContext.Provider value={context}>
      <BreakpointIndexProvider>{children}</BreakpointIndexProvider>
    </DripsyThemeContext.Provider>);
}
/**
 * @deprecated use DripsyProvider instead
 */
export function ThemeProvider() {
    throw new Error('üç∑ [Dripsy] ThemeProvider is deprecated, please use DripsyProvider instead.');
}
//# sourceMappingURL=index.js.map