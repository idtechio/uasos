import React, { ComponentProps, ReactNode } from 'react';
import { View } from '../components';
declare type Props = {
    children: ReactNode;
    fallback?: ReactNode;
    /**
     * Customize the strategy that should be used before the container query has determined its breakpoint.
     *
     * By default, the container will render the `fallback` prop (or null) until it has determined the container's width.
     *
     * However, you might not want this; it's possible that you still want to render the children, but just hide them.
     *
     * If this is the case, you can set this prop to `opacity`. In that case, children will still render, but they will just be visually hidden.
     *
     * This may be desired if you want to run network requests and other effects as children of this component, without waiting for the width to get determined.
     *
     * Default: `render`.
     */
    fallbackStrategy?: 'render' | 'opacity';
    /**
     * If you (somehow) know the width of this view, then you should set this prop to that width. That way, it won't have to measure.
     *
     * This will greatly improve performance.
     */
    width?: number;
} & Pick<ComponentProps<typeof View>, 'sx' | 'pointerEvents'>;
export declare function ContainerQuery({ fallback, children, width, sx, pointerEvents, fallbackStrategy, }: Props): JSX.Element;
export declare function BreakpointIndexProvider({ children, width, }: {
    children: React.ReactNode;
    width: number;
}): JSX.Element;
export {};
