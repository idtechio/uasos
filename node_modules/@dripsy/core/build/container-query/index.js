import React, { useCallback, useMemo, useState, } from 'react';
import { StyleSheet } from 'react-native';
import { getBreakpointIndex } from '../css/get-breakpoint-index';
import { useBreakpoints } from '../css/breakpoints';
import { View } from '../components';
import { BreakpointIndexContext } from '../css/breakpoint-context';
export function ContainerQuery({ fallback = null, children, width, sx, pointerEvents, fallbackStrategy, }) {
    const breakpoints = useBreakpoints();
    const [measuredBreakpointIndex, setMeasuredBreakpointIndex] = useState(() => {
        if (width) {
            return getBreakpointIndex({
                breakpoints,
                width,
            });
        }
        return -1;
    });
    const breakpointIndex = useMemo(() => {
        if (typeof width == 'number') {
            return getBreakpointIndex({
                breakpoints,
                width,
            });
        }
        return measuredBreakpointIndex;
    }, [measuredBreakpointIndex, breakpoints, width]);
    const onLayout = useCallback(({ nativeEvent }) => {
        const index = getBreakpointIndex({
            width: nativeEvent.layout.width,
            breakpoints,
        });
        setMeasuredBreakpointIndex(index);
    }, [breakpoints]);
    const isFallback = breakpointIndex === -1;
    let child = (<BreakpointIndexContext.Provider value={breakpointIndex}>
      {isFallback ? fallback : children}
    </BreakpointIndexContext.Provider>);
    if (fallbackStrategy == 'opacity' && isFallback) {
        child = children;
    }
    return (<View style={fallbackStrategy == 'opacity' && isFallback && styles.visuallyHidden} 
    // only measure if we aren't defining the width from the parent
    onLayout={width == undefined ? onLayout : undefined} sx={sx} pointerEvents={pointerEvents}>
      {child}
    </View>);
}
export function BreakpointIndexProvider({ children, width, }) {
    const breakpoints = useBreakpoints();
    const breakpointIndex = useMemo(() => getBreakpointIndex({
        breakpoints,
        width,
    }), [breakpoints, width]);
    return (<BreakpointIndexContext.Provider value={breakpointIndex}>
      {children}
    </BreakpointIndexContext.Provider>);
}
const styles = StyleSheet.create({
    visuallyHidden: {
        opacity: 0,
    },
});
//# sourceMappingURL=index.js.map