{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/container-query/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  ComponentProps,\n  ReactNode,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport type { LayoutChangeEvent } from 'react-native'\nimport { StyleSheet } from 'react-native'\nimport { getBreakpointIndex } from '../css/get-breakpoint-index'\nimport { useBreakpoints } from '../css/breakpoints'\nimport { View } from '../components'\nimport { BreakpointIndexContext } from '../css/breakpoint-context'\n\ntype Props = {\n  children: ReactNode\n  fallback?: ReactNode\n  /**\n   * Customize the strategy that should be used before the container query has determined its breakpoint.\n   *\n   * By default, the container will render the `fallback` prop (or null) until it has determined the container's width.\n   *\n   * However, you might not want this; it's possible that you still want to render the children, but just hide them.\n   *\n   * If this is the case, you can set this prop to `opacity`. In that case, children will still render, but they will just be visually hidden.\n   *\n   * This may be desired if you want to run network requests and other effects as children of this component, without waiting for the width to get determined.\n   *\n   * Default: `render`.\n   */\n  fallbackStrategy?: 'render' | 'opacity'\n  /**\n   * If you (somehow) know the width of this view, then you should set this prop to that width. That way, it won't have to measure.\n   *\n   * This will greatly improve performance.\n   */\n  width?: number\n} & Pick<ComponentProps<typeof View>, 'sx' | 'pointerEvents'>\n\nexport function ContainerQuery({\n  fallback = null,\n  children,\n  width,\n  sx,\n  pointerEvents,\n  fallbackStrategy,\n}: Props) {\n  const breakpoints = useBreakpoints()\n\n  const [measuredBreakpointIndex, setMeasuredBreakpointIndex] = useState(() => {\n    if (width) {\n      return getBreakpointIndex({\n        breakpoints,\n        width,\n      })\n    }\n    return -1\n  })\n\n  const breakpointIndex = useMemo(() => {\n    if (typeof width == 'number') {\n      return getBreakpointIndex({\n        breakpoints,\n        width,\n      })\n    }\n    return measuredBreakpointIndex\n  }, [measuredBreakpointIndex, breakpoints, width])\n\n  const onLayout = useCallback(\n    ({ nativeEvent }: LayoutChangeEvent) => {\n      const index = getBreakpointIndex({\n        width: nativeEvent.layout.width,\n        breakpoints,\n      })\n      setMeasuredBreakpointIndex(index)\n    },\n    [breakpoints]\n  )\n\n  const isFallback = breakpointIndex === -1\n\n  let child: ReactNode = (\n    <BreakpointIndexContext.Provider value={breakpointIndex}>\n      {isFallback ? fallback : children}\n    </BreakpointIndexContext.Provider>\n  )\n\n  if (fallbackStrategy == 'opacity' && isFallback) {\n    child = children\n  }\n\n  return (\n    <View\n      style={\n        fallbackStrategy == 'opacity' && isFallback && styles.visuallyHidden\n      }\n      // only measure if we aren't defining the width from the parent\n      onLayout={width == undefined ? onLayout : undefined}\n      sx={sx}\n      pointerEvents={pointerEvents}\n    >\n      {child}\n    </View>\n  )\n}\n\nexport function BreakpointIndexProvider({\n  children,\n  width,\n}: {\n  children: React.ReactNode\n  width: number\n}) {\n  const breakpoints = useBreakpoints()\n  const breakpointIndex = useMemo(\n    () =>\n      getBreakpointIndex({\n        breakpoints,\n        width,\n      }),\n    [breakpoints, width]\n  )\n\n  return (\n    <BreakpointIndexContext.Provider value={breakpointIndex}>\n      {children}\n    </BreakpointIndexContext.Provider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  visuallyHidden: {\n    opacity: 0,\n  },\n})\n"]}