import React from 'react';
import { TextInput as rTextInput } from 'react-native';
import { DripsyFinalTheme } from '../declarations';
declare const DripsyInput: React.ComponentType<import("..").StyledProps<"forms"> & ((import("react-native").TextInputProps & React.RefAttributes<React.Component<import("react-native").TextInputProps, any, any>>) | (import("react-native").TextInputProps & {
    children?: React.ReactNode;
}))>;
declare type InputProps = React.ComponentPropsWithoutRef<typeof DripsyInput>;
declare type ColorKeys = keyof Pick<InputProps, 'selectionColor' | 'underlineColorAndroid' | 'placeholderTextColor'>;
export declare type DripsyTextInputProps = Omit<InputProps, ColorKeys> & {
    [key in ColorKeys]?: (string & {}) | keyof DripsyFinalTheme['colors'];
};
export declare const TextInput: React.ForwardRefExoticComponent<Omit<(import("..").StyledProps<"forms"> & import("react-native").TextInputProps & React.RefAttributes<React.Component<import("react-native").TextInputProps, any, any>>) | (import("..").StyledProps<"forms"> & import("react-native").TextInputProps & {
    children?: React.ReactNode;
}) | (import("..").StyledProps<"forms"> & import("react-native").TextInputProps & React.RefAttributes<React.Component<import("react-native").TextInputProps, any, any>> & {
    children?: React.ReactNode;
}), "selectionColor" | "placeholderTextColor" | "underlineColorAndroid"> & {
    selectionColor?: (string & {}) | undefined;
    placeholderTextColor?: (string & {}) | undefined;
    underlineColorAndroid?: (string & {}) | undefined;
} & React.RefAttributes<rTextInput>>;
export {};
