import { CSSObject, UseThemeFunction } from '@theme-ui/css';
import { DripsyFinalTheme } from '../declarations';
import type { SxProp } from './types';
declare type SxProps = SxProp;
declare type Theme = DripsyFinalTheme;
declare type CssPropsArgument = ({
    theme?: Theme;
} | Theme) & {
    /**
     * We use this for a custom font family.
     */
    fontFamily?: string;
    themeKey?: keyof DripsyFinalTheme;
};
export declare type ResponsiveSSRStyles = Exclude<NonNullable<SxProps>, UseThemeFunction>[];
export declare const css: (args?: SxProps, breakpoint?: number | undefined) => ({ themeKey, fontFamily: fontFamilyFromProps, ...props }?: CssPropsArgument) => CSSObject;
export declare class Styles {
    static create<T extends {
        [key: string]: NonNullable<SxProps>;
    }>(styles: T): T;
}
export {};
