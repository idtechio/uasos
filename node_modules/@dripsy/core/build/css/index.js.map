{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/css/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { CSSObject, UseThemeFunction } from '@theme-ui/css'\nimport { Platform } from 'react-native'\nimport { defaultBreakpoints } from './breakpoints'\nimport { SUPPORT_FRESNEL_SSR } from '../utils/deprecated-ssr'\nimport { DripsyFinalTheme } from '../declarations'\n\nimport type { SxProp } from './types'\nimport { get } from './get'\nimport { Aliases, aliases, scales, Scales } from './scales'\n\ntype SxProps = SxProp\n\ntype Theme = DripsyFinalTheme\n\ntype CssPropsArgument = ({ theme?: Theme } | Theme) & {\n  /**\n   * We use this for a custom font family.\n   */\n  fontFamily?: string\n  themeKey?: keyof DripsyFinalTheme\n}\n\nconst defaultTheme = {\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72],\n}\n\nexport type ResponsiveSSRStyles = Exclude<\n  NonNullable<SxProps>,\n  UseThemeFunction\n>[]\n\nconst responsive = (\n  styles: Exclude<SxProps, UseThemeFunction>,\n  { breakpoint }: { breakpoint?: number } = {}\n) => (theme?: Theme) => {\n  const next: Exclude<SxProps, UseThemeFunction> & {\n    responsiveSSRStyles?: ResponsiveSSRStyles\n  } = {}\n\n  for (const key in styles) {\n    const value =\n      typeof styles[key] === 'function' ? styles[key](theme) : styles[key]\n\n    if (value == null) continue\n    if (!Array.isArray(value)) {\n      // @ts-ignore\n      next[key] = value\n      continue\n    }\n\n    if (key === 'transform') {\n      // @ts-ignore\n      next[key] = value\n      continue\n    }\n\n    if (Platform.OS === 'web' && SUPPORT_FRESNEL_SSR) {\n      next.responsiveSSRStyles = next.responsiveSSRStyles || []\n\n      const mediaQueries = [0, ...defaultBreakpoints]\n\n      for (let i = 0; i < mediaQueries.length; i++) {\n        next.responsiveSSRStyles[i] = next.responsiveSSRStyles[i] || {}\n\n        let styleAtThisMediaQuery = value[i]\n        // say we have value value = ['blue', null, 'green']\n        // then styleAtThisMediaQuery[1] = null\n        // we want it to be blue, since it's mobile-first\n        if (styleAtThisMediaQuery == null) {\n          if (i === 0) {\n            // if we're at the first breakpoint, and it's null, just do nothing\n            // for later values, we'll extract this value from the previous value\n            continue\n          }\n          // if we're after the first breakpoint, let's extract this style value from a previous breakpoint\n          const nearestBreakpoint = (breakpointIndex: number): number => {\n            // mobile-first breakpoints\n            if (breakpointIndex <= 0 || typeof breakpointIndex !== 'number')\n              return 0\n\n            if (value[breakpointIndex] == null) {\n              // if this value doesn't have a breakpoint, find the previous, recursively\n              return nearestBreakpoint(breakpointIndex - 1)\n            }\n            return breakpointIndex\n          }\n          const previousBreakpoint = nearestBreakpoint(i)\n          const styleAtPreviousMediaQuery = value[previousBreakpoint]\n          if (styleAtPreviousMediaQuery) {\n            styleAtThisMediaQuery = styleAtPreviousMediaQuery\n          }\n        }\n\n        next.responsiveSSRStyles[i][key] = styleAtThisMediaQuery\n      }\n    } else {\n      // since we aren't on web, we let RN handle the breakpoints with JS\n\n      const nearestBreakpoint = (breakpointIndex: number): number => {\n        // mobile-first breakpoints\n        if (breakpointIndex <= 0 || typeof breakpointIndex !== 'number')\n          return 0\n\n        if (value[breakpointIndex] == null) {\n          // if this value doesn't have a breakpoint, find the previous, recursively\n          return nearestBreakpoint(breakpointIndex - 1)\n        }\n        return breakpointIndex\n      }\n\n      // if we're on mobile, we do have a breakpoint\n      // so we can override TS here w/ `as number`\n      const breakpointIndex = nearestBreakpoint(breakpoint as number)\n      next[key] = value[breakpointIndex]\n    }\n  }\n\n  return next\n}\n\nconst positiveOrNegative = (scale: object, value: string | number) => {\n  if (typeof value !== 'number' || value >= 0) {\n    if (typeof value === 'string' && value.startsWith('-')) {\n      const valueWithoutMinus = value.substring(1)\n      const n = get(scale, valueWithoutMinus, valueWithoutMinus)\n      return `-${n}`\n    }\n    return get(scale, value, value)\n  }\n  const absolute = Math.abs(value)\n  const n = get(scale, absolute, absolute)\n  if (typeof n === 'string') return '-' + n\n  return Number(n) * -1\n}\n\nconst transforms = [\n  'margin',\n  'marginTop',\n  'marginRight',\n  'marginBottom',\n  'marginLeft',\n  'marginX',\n  'marginY',\n  'marginBlock',\n  'marginBlockEnd',\n  'marginBlockStart',\n  'marginInline',\n  'marginInlineEnd',\n  'marginInlineStart',\n  'top',\n  'bottom',\n  'left',\n  'right',\n].reduce(\n  (acc, curr) => ({\n    ...acc,\n    [curr]: positiveOrNegative,\n  }),\n  {}\n)\n\n/**\n * Here we remove web style keys from components to prevent annoying errors on native\n */\nconst filterWebStyleKeys = (\n  styleProp: Exclude<SxProps, UseThemeFunction> = {}\n): Exclude<SxProps, UseThemeFunction> => {\n  if (Platform.OS == 'web') {\n    return styleProp\n  }\n\n  // avoid prop mutations\n  const finalStyles = { ...styleProp }\n  const webOnlyKeys = [\n    // from https://necolas.github.io/react-native-web/docs/styling/#non-standard-properties\n    'animationKeyframes',\n    'animationFillMode',\n    'transitionProperty',\n    'whiteSpace',\n    'userSelect',\n    'transitionDuration',\n    'transitionTimingFunction',\n    'cursor',\n    'animationDuration',\n    'animationDelay',\n    'transitionDelay',\n    'animationDirection',\n    'animationIterationCount',\n    'outlineColor',\n  ]\n  webOnlyKeys.forEach((key) => {\n    if (finalStyles?.[key as keyof typeof styleProp]) {\n      delete finalStyles?.[key as keyof typeof styleProp]\n    }\n  })\n\n  return finalStyles\n}\n\nexport const css = (\n  args: SxProps = {},\n  breakpoint?: number\n  // { ssr }: { ssr?: boolean } = {}\n) => ({\n  themeKey,\n  fontFamily: fontFamilyFromProps,\n  ...props\n}: CssPropsArgument = {}): CSSObject => {\n  const theme: DripsyFinalTheme = {\n    ...defaultTheme,\n    ...('theme' in props ? props.theme : props),\n  } as DripsyFinalTheme\n  let result: CSSObject = {}\n  const obj = typeof args === 'function' ? args(theme) : args\n  const filteredOutWebKeys = filterWebStyleKeys(obj)\n  const styles = responsive(filteredOutWebKeys, { breakpoint })(theme)\n\n  for (const key in styles) {\n    const x = styles[key]\n    const val = typeof x == 'function' ? x(theme) : x\n\n    if (key == 'variant') {\n      // const variant = css(get(theme, val))(theme)\n      const variant = css(\n        get(theme, themeKey + '.' + val, get(theme, val)),\n        breakpoint\n      )({ theme })\n      result = { ...result, ...variant }\n      continue\n    }\n\n    if (key == 'transform') {\n      result[key] = val\n      continue\n    }\n\n    if (key == 'textShadow' && val && theme.textShadows?.[val]) {\n      // we want to change textShadowColor to theme keys via css function\n      // @ts-expect-error theme UI doesn't have RN textShadow*, need to add this later\n      const styledTextShadow = css(theme.textShadows[val], breakpoint)(theme)\n      result = { ...result, ...styledTextShadow }\n      continue\n    }\n\n    if (key == 'boxShadow' && val && theme.shadows?.[val]) {\n      // @ts-expect-error theme UI doesn't have RN shadow*, need to add this later\n      const styledBoxShadow = css(theme.shadows[val], breakpoint)(theme)\n      result = { ...result, ...styledBoxShadow }\n      continue\n    }\n\n    if (val === '') {\n      console.error(\n        `[dripsy] Invalid style. You passed an empty string ('') for ${key}. Please fix this.`\n      )\n\n      continue\n    }\n\n    if (val && typeof val == 'object') {\n      // @ts-ignore\n      result[key] = css(val, breakpoint)(theme)\n      continue\n    }\n\n    if (typeof val == 'boolean') {\n      // StyleSheet doesn't allow booleans\n      continue\n    }\n\n    const prop = key in aliases ? aliases[key as keyof Aliases] : key\n    const scaleName = prop in scales ? scales[prop as keyof Scales] : undefined\n    // @ts-expect-error\n    const scale = get(theme, scaleName, get(theme, prop, {}))\n    const transform = get(transforms, prop, get)\n    const value = transform(scale, val, val)\n\n    if (key === 'fontFamily') {\n      // ok, building off of fontWeight prior\n      // we just need to check if we've already set the fontFamily based on the weight\n      // if we have, continue. Otherwise, set it\n\n      if (result?.fontFamily) {\n        continue\n      }\n\n      if (value === 'root') {\n        // if we're setting this font to the `root` font,\n        // make sure it actually exists\n        // why? because by default, our text sets the `root` style\n        // however, this only applies if you have a custom font\n        // if you don't have a custom font named root, we shold ignore the fontFamily: 'root' definition\n        if (!theme?.fonts?.root) {\n          // techincally speaking, if value === 'root', this means that we already know there's no custom root font\n          // why? bc value extracts the theme values. Since `root` is a reserved word in dripsy, we know this wouldn't work.\n          // however, we still check to make sure. It's also easier to understand if I forget later,\n          // ...or if someone accidentally names a font `root` even though the docs say not to\n          continue\n        }\n      }\n      // ok, no font-family set yet, so let's continue.\n    }\n\n    if (key == 'fontWeight' && styles?.fontWeight) {\n      // let's check if we have a custom font that corresponds to this font weight\n      // we have a custom font for this family in our theme\n      // example: if we pass fontWeight: 'bold', and fontFamily: 'arial', this will be true for themes that have\n      // customFonts: {arial: {bold: 'arialBold'}}\n      // we also pass the font-family from other CSS props here at the top of the function, so fall back to that if it exists\n      const fontFamilyKeyFromStyles =\n        (styles?.fontFamily as string) ?? fontFamilyFromProps\n\n      // default font for all text styles\n      const rootFontFamilyFromTheme = theme?.fonts?.root\n\n      // either the raw value, or one from our theme\n      if (fontFamilyKeyFromStyles || rootFontFamilyFromTheme) {\n        const fontWeight = value\n        let fontFamily\n        if (fontFamilyKeyFromStyles) {\n          // first, check if our theme has a font with this name. If not, just use the normal name.\n          // for instance, if we pass fontFamily: 'body', and our theme has:\n          // { fonts: {body: 'arial'}} (<- in this case, if fontFamilyKey = 'body', we get 'arial' back)\n          // then we'd want to get fonts.body = 'arial'\n          // however, if we're just writing fontFamily: 'arial' instead of 'body', we need no alias\n          fontFamily =\n            theme?.fonts?.[fontFamilyKeyFromStyles] ?? fontFamilyKeyFromStyles\n        } else if (rootFontFamilyFromTheme) {\n          fontFamily = rootFontFamilyFromTheme\n        }\n        // const fontFamily =\n        //   (theme?.fonts as any)?.[fontFamilyKey] ?? fontFamilyKey\n        if (fontFamily) {\n          if (typeof fontFamily != 'string') {\n            console.error(\n              `[dripsy] error. Passed font family name that was not a string. This value should either be a string which corresponds to a key of your theme.fonts, or, it should be a string that corresponds to a raw font name. Your font will not be applied, please resolve this.`\n            )\n            continue\n          }\n          const customFontFamilyForWeight =\n            theme?.customFonts?.[fontFamily]?.[fontWeight]\n          if (customFontFamilyForWeight) {\n            // ok, now we just need to set the fontFamily to this value. oof\n            // following the comment above, in this case, we set fontFamily: `arialBold`\n            result.fontFamily = customFontFamilyForWeight\n            continue\n          }\n        }\n      }\n    }\n    if (key == 'size') {\n      result.width = value\n      result.height = value\n    } else {\n      result[prop] = value\n    }\n  }\n\n  return result\n}\n\nexport class Styles {\n  static create<T extends { [key: string]: NonNullable<SxProps> }>(\n    styles: T\n  ): T {\n    return styles\n  }\n}\n"]}