{"version":3,"file":"breakpoints.js","sourceRoot":"","sources":["../../src/css/breakpoints.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from 'react'\nimport { Dimensions, ScaledSize } from 'react-native'\nimport { getBreakpointIndex } from '../css/get-breakpoint-index'\nimport { useDripsyTheme } from '../use-dripsy-theme'\nimport { BreakpointIndexContext } from './breakpoint-context'\n\nexport const useBreakpoints = () => {\n  const dripsy = useDripsyTheme()\n  const breakpoints = dripsy?.theme?.breakpoints as\n    | (number | string)[]\n    | undefined\n  if (breakpoints && typeof __DEV__ !== 'undefined' && __DEV__) {\n    if (!Array.isArray(breakpoints)) {\n      const arrayError =\n        '[dripsy] theme.breakpoints must be an array. Or, you can leave it blank. However, you used \\n' +\n        JSON.stringify(breakpoints) +\n        '\\n Please turn this into an array, or remove the \"breakpoints\" field from your theme.'\n      throw new Error(arrayError)\n    }\n  }\n  return useMemo(() => {\n    return (breakpoints || defaultBreakpoints).map((breakpoint) => {\n      if (typeof breakpoint === 'string') {\n        if (breakpoint.endsWith('px')) {\n          return Number(breakpoint.replace('px', ''))\n        }\n      }\n      if (typeof breakpoint !== 'number') {\n        console.error(\n          '[dripsy] Invalid breakpoints passed to theme.breakpoints. Expected an array of numbers, or strings ending with \"px\", but got this: \\n',\n          JSON.stringify(breakpoints),\n          '\\nPlease turn these into numbers, or remove the breakpoints array from your theme.'\n        )\n      }\n      return Number(breakpoint)\n    })\n  }, [breakpoints])\n}\n\nexport const defaultBreakpoints = [576, 768, 992, 1200]\n\nconst useCreateBreakpointIndex = () => {\n  const breakpoints = useBreakpoints()\n  const [index, setIndex] = useState(() => {\n    return getBreakpointIndex({\n      width: Dimensions.get('window').width,\n      breakpoints,\n    })\n  })\n\n  const indexRef = useRef(index)\n\n  useEffect(() => {\n    indexRef.current = index\n  }, [index])\n\n  useEffect(() => {\n    const onChange = ({\n      window: { width },\n    }: {\n      window: ScaledSize\n      screen: ScaledSize\n    }) => {\n      const breakpointIndex = getBreakpointIndex({ width, breakpoints })\n      if (breakpointIndex !== indexRef.current) {\n        setIndex(breakpointIndex)\n      }\n    }\n    const unsubscribe:\n      | { remove: () => void }\n      | undefined = Dimensions.addEventListener('change', onChange) as\n      | undefined\n      | {\n          remove: () => void\n        }\n\n    onChange({\n      window: Dimensions.get('window'),\n      screen: Dimensions.get('screen'),\n    })\n    return () => {\n      if (!unsubscribe?.remove) {\n        Dimensions.removeEventListener('change', onChange)\n      } else {\n        unsubscribe.remove()\n      }\n    }\n  }, [breakpoints])\n\n  return index\n}\n\nexport function BreakpointIndexProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const breakpointIndex = useCreateBreakpointIndex()\n\n  return (\n    <BreakpointIndexContext.Provider value={breakpointIndex}>\n      {children}\n    </BreakpointIndexContext.Provider>\n  )\n}\n"]}