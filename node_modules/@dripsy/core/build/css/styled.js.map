{"version":3,"file":"styled.js","sourceRoot":"","sources":["../../src/css/styled.tsx"],"names":[],"mappings":"AAEA,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAA;AAGjE;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,MAAM,CAIpB,SAA2B,EAC3B,EACE,QAAQ,EACR,cAAc,MACuD,EAAE;IAEzE,OAAO,SAAS,aAAa,CAC3B,YAA6D;QAE7D,OAAO,qBAAqB,CAAqB,SAAS,EAAE;YAC1D,cAAc;YACd,QAAQ;YACR,YAAY;SACb,CAAC,CAAA;IACJ,CAAC,CAAA;AACH,CAAC","sourcesContent":["import type { ComponentType } from 'react'\nimport { DripsyFinalTheme } from '../declarations'\nimport { createThemedComponent } from './create-themed-component'\nimport type { ThemedOptions } from './types'\n\n/**\n * `styled` is little more than a recreation of `createThemedComponent`, with a nicer API. It does the same thing, but looks a bit nicer to use and has a clean name ðŸ˜‡\n *\n * ```jsx\n * import { Text } from 'react-native'\n *\n * const MyText = styled(Text)({\n *   borderBottomStyle: 'solid',\n *   color: ['primary', 'secondary']\n * })\n * ```\n *\n */\nexport function styled<\n  P,\n  ThemeKey extends keyof DripsyFinalTheme = keyof DripsyFinalTheme\n>(\n  Component: ComponentType<P>,\n  {\n    themeKey,\n    defaultVariant,\n  }: Pick<ThemedOptions<any, ThemeKey>, 'themeKey' | 'defaultVariant'> = {}\n) {\n  return function dripsyFactory<Extra>(\n    defaultStyle?: ThemedOptions<Extra, ThemeKey>['defaultStyle']\n  ) {\n    return createThemedComponent<P, Extra, ThemeKey>(Component, {\n      defaultVariant,\n      themeKey,\n      defaultStyle,\n    })\n  }\n}\n"]}