import type { ThemeUICSSProperties } from '@theme-ui/css';
import type { ComponentType } from 'react';
import type { ViewStyle, TextStyle, ImageStyle } from 'react-native';
import type { TextShadows } from '../declarations';
import type { DripsyThemeWithoutIgnoredKeys } from '../declarations';
import type { Shadows } from '../declarations';
import type { DripsyFinalTheme } from '../declarations';
import type { Aliases, Scales } from './scales';
export declare type DefaultStyleKey = 'defaultStyle';
export declare type ThemedOptions<ExtraProps, ThemeKey extends Extract<keyof DripsyFinalTheme, string>> = {
    [key in DefaultStyleKey]?: Sx | ((props: ExtraProps) => Sx);
} & {
    defaultVariant?: (string & {}) | DripsyVariant<ThemeKey>;
    /**
     * List of multiple variants
     */
    defaultVariants?: ((string & {}) | DripsyVariant<ThemeKey>)[];
    themeKey?: ThemeKey;
};
declare type HiddenArrayKeys = Exclude<keyof [], number>;
declare type SafeTokenized<Theme, IsFirstIteration extends boolean, Key extends Extract<keyof Theme, string | number>, AllowsRootKeys extends boolean> = IsFirstIteration extends true ? AllowsRootKeys extends false ? Tokenize<Theme[Key], false, false> : Tokenize<Theme[Key], false, false> | `${Key}.${Tokenize<Theme[Key], false, false>}` : `${Key}.${Tokenize<Theme[Key], IsFirstIteration>}`;
declare type Tokenize<Theme, IsFirstIteration extends boolean, AllowsRootKeys extends boolean = true> = Extract<keyof {
    [Key in Exclude<Extract<keyof Theme, string | number>, HiddenArrayKeys> as Theme[Key] extends string | number | '' | never | undefined | null ? Key extends number ? Key : `${Key}` : `${Key}` | SafeTokenized<Theme, IsFirstIteration, Key, AllowsRootKeys>]: true;
}, string | number | '' | never | undefined | null>;
declare type TokenizedTheme<AllowsRootKey extends boolean = false> = Tokenize<DripsyThemeWithoutIgnoredKeys, true, AllowsRootKey>;
declare type ScaleValue = Scales[keyof Scales];
declare type AliasToScale<ScaleOrAlias extends keyof DripsyThemeWithoutIgnoredKeys | keyof ThemeUICSSProperties> = ScaleOrAlias extends keyof Aliases ? Aliases[ScaleOrAlias] extends keyof Scales ? Scales[Aliases[ScaleOrAlias]] extends keyof DripsyThemeWithoutIgnoredKeys ? Scales[Aliases[ScaleOrAlias]] : ScaleOrAlias : ScaleOrAlias : ScaleOrAlias;
export declare type MaybeTokenizedValue<Key extends keyof ThemeUICSSProperties, Scale extends keyof DripsyThemeWithoutIgnoredKeys | keyof ThemeUICSSProperties = Key extends keyof Scales ? Scales[Key] extends keyof DripsyThemeWithoutIgnoredKeys ? Scales[Key] : Key : Key, AliasedScale extends Scale = AliasToScale<Scale>> = AliasedScale extends ScaleValue ? Tokenize<DripsyThemeWithoutIgnoredKeys[AliasedScale], true, false> : TokenizedTheme;
export declare type ResponsiveValue<T> = T | (null | T)[] | null | undefined;
declare type CssPropertyNames = {
    [key in keyof ThemeUICSSProperties]: key;
};
declare type SpecialCssProperty<Key extends keyof CssPropertyNames> = NonNullable<CssPropertyNames[Key]>;
declare type BoxShadow = SpecialCssProperty<'boxShadow'>;
declare type TextShadow = SpecialCssProperty<'textShadow'>;
declare type MakeShadowStyle<Key extends keyof ThemeUICSSProperties, Property extends keyof DripsyFinalTheme> = ResponsiveValue<(ThemeUICSSProperties[Key] & {}) | keyof DripsyFinalTheme[Property]>;
export declare type WebShadowStyles = {
    [key in BoxShadow]?: MakeShadowStyle<key, 'shadows'>;
} & {
    [key in TextShadow]?: MakeShadowStyle<key, 'textShadows'>;
};
export declare type ShadowStyleKeys = keyof WebShadowStyles;
export declare type StyleableSxProperties = Exclude<keyof ThemeUICSSProperties, ShadowStyleKeys | 'variant'>;
declare type SmartOmit<T, K extends keyof T> = Omit<T, K>;
declare type TokenizedColorValue = MaybeTokenizedValue<'color'>;
declare type ReactNativeShadowStyles = SmartOmit<Shadows, 'shadowColor'> & {
    shadowColor?: TokenizedColorValue | (string & {});
};
declare type ReactNativeTextShadowStyles = SmartOmit<TextShadows, 'textShadowColor'> & {
    textShadowColor?: TokenizedColorValue | (string & {});
};
declare type ReactNativeOnlyStyles = Partial<ReactNativeShadowStyles & ReactNativeTextShadowStyles & {
    transform?: ReactNativeOnlyStyles extends true ? ViewStyle['transform'] : ViewStyle['transform'] | ThemeUICSSProperties['transform'];
} & {
    animationKeyframes?: Record<string, unknown>;
}>;
declare type NativeStyleProperties = ViewStyle & TextStyle & ImageStyle;
/**
 * If this returns `true` for a given style key,
 * then that style key must pull values from the theme.
 *
 * For example, if it's `true` for `padding`, then you must use `sx={{ padding: '$1' }}`,
 * where `$1` is the value of the theme.padding property.
 */
declare type OnlyAllowThemeValueForKey<Key extends keyof ThemeUICSSProperties, Scale extends keyof DripsyThemeWithoutIgnoredKeys | keyof ThemeUICSSProperties = Key extends keyof Scales ? Scales[Key] extends keyof DripsyThemeWithoutIgnoredKeys ? Scales[Key] : Key : Key, AliasedScale extends Scale = AliasToScale<Scale>, IsScaleInTheme extends boolean = AliasedScale extends keyof DripsyThemeWithoutIgnoredKeys ? true : false> = AliasedScale extends ScaleValue ? NonNullable<DripsyFinalTheme['types']>['onlyAllowThemeValues'] extends 'always' ? IsScaleInTheme : NonNullable<DripsyFinalTheme['types']>['onlyAllowThemeValues'][AliasedScale] extends 'always' ? IsScaleInTheme : false : false;
declare type ReactNativeTypesOnly = NonNullable<DripsyFinalTheme['types']>['reactNativeTypesOnly'] extends true ? true : false;
declare type NativeOrThemeUiStyle<Key extends keyof ThemeUICSSProperties | keyof NativeStyleProperties> = Key extends keyof NativeStyleProperties ? Key extends keyof ThemeUICSSProperties ? ReactNativeTypesOnly extends true ? ResponsiveValue<NativeStyleProperties[Key]> : ResponsiveValue<NativeStyleProperties[Key]> | ThemeUICSSProperties[Key] : ResponsiveValue<NativeStyleProperties[Key]> : Key extends keyof ThemeUICSSProperties ? ThemeUICSSProperties[Key] : never;
declare type SxStyles = {
    [key in StyleableSxProperties]?: (OnlyAllowThemeValueForKey<key> extends true ? ResponsiveValue<MaybeTokenizedValue<key>> : ResponsiveValue<MaybeTokenizedValue<key>> | (NativeOrThemeUiStyle<key> & {})) | null;
};
declare type SxVariantStyles = {
    variant?: DripsyVariant<keyof DripsyFinalTheme>;
};
export declare type Sx = SxStyles & WebShadowStyles & ReactNativeOnlyStyles & SxVariantStyles;
export declare type SxProp = Sx | ((theme: DripsyFinalTheme) => Sx);
declare type StringWithoutArrayKeys<T> = Exclude<Extract<T, string>, HiddenArrayKeys>;
declare type ThemeKeysWhichContainVariants = keyof Pick<DripsyThemeWithoutIgnoredKeys<DripsyFinalTheme>, 'alerts' | 'badges' | 'buttons' | 'cards' | 'forms' | 'grids' | 'images' | 'layout' | 'links' | 'messages' | 'shadows' | 'text' | 'textStyles' | 'styles' | 'textShadows'>;
declare type TokenizeVariants<_Theme> = keyof {
    [key in Extract<keyof _Theme, ThemeKeysWhichContainVariants> as `${StringWithoutArrayKeys<key>}.${StringWithoutArrayKeys<keyof _Theme[key]>}`]: true;
};
export declare type UseStrictVariants<Config = NonNullable<NonNullable<DripsyFinalTheme['types']>['strictVariants']>> = Config extends any ? (Config extends false ? false : true) : true;
export declare type DripsyVariant<ThemeKey extends keyof DripsyFinalTheme> = DripsyFinalTheme[ThemeKey] extends undefined ? TokenizeVariants<DripsyFinalTheme> : keyof DripsyFinalTheme[ThemeKey] extends undefined ? TokenizeVariants<DripsyFinalTheme> : UseStrictVariants extends false ? TokenizeVariants<DripsyFinalTheme> | keyof DripsyFinalTheme[ThemeKey] : keyof DripsyFinalTheme[ThemeKey];
export declare type StyledProps<ThemeKey extends keyof DripsyFinalTheme> = {
    as?: ComponentType<any>;
    variant?: DripsyVariant<ThemeKey>;
    themeKey?: ThemeKey;
    sx?: SxProp;
    variants?: DripsyVariant<ThemeKey>[];
};
export {};
