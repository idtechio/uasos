import type { ComponentType } from 'react';
import { DripsyFinalTheme } from '../declarations';
import type { ThemedOptions } from './types';
/**
 * `styled` is little more than a recreation of `createThemedComponent`, with a nicer API. It does the same thing, but looks a bit nicer to use and has a clean name ðŸ˜‡
 *
 * ```jsx
 * import { Text } from 'react-native'
 *
 * const MyText = styled(Text)({
 *   borderBottomStyle: 'solid',
 *   color: ['primary', 'secondary']
 * })
 * ```
 *
 */
export declare function styled<P, ThemeKey extends keyof DripsyFinalTheme = keyof DripsyFinalTheme>(Component: ComponentType<P>, { themeKey, defaultVariant, }?: Pick<ThemedOptions<any, ThemeKey>, 'themeKey' | 'defaultVariant'>): <Extra>(defaultStyle?: import("./types").Sx | ((props: Extra) => import("./types").Sx) | undefined) => ComponentType<import("./types").StyledProps<ThemeKey> & ((import("react").PropsWithoutRef<P> & import("react").RefAttributes<import("react").Component<P, any, any>>) | import("react").PropsWithRef<P & {
    children?: import("react").ReactNode;
}>) & Extra>;
