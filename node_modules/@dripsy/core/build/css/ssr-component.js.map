{"version":3,"file":"ssr-component.js","sourceRoot":"","sources":["../../src/css/ssr-component.tsx"],"names":[],"mappings":"AAAA,6BAA6B;AAC7B,kBAAkB;AAClB,uCAAuC;AACvC,+DAA+D;AAC/D,qDAAqD;AACrD,sDAAsD;AACtD,4CAA4C;AAE5C,oBAAoB;AACpB,gCAAgC;AAChC,0CAA0C;AAC1C,mBAAmB;AACnB,0BAA0B;AAC1B,6CAA6C;AAC7C,IAAI;AAEJ,yDAAyD;AACzD,MAAM;AACN,wBAAwB;AACxB,iBAAiB;AACjB,aAAa;AACb,4BAA4B;AAC5B,sBAAsB;AACtB,eAAe;AACf,iBAAiB;AACjB,WAAW;AACX,MAAM;AACN,aAAa;AACb,SAAS;AACT,2EAA2E;AAC3E,uCAAuC;AACvC,kDAAkD;AAClD,uBAAuB;AACvB,iBAAiB;AACjB,iEAAiE;AACjE,yFAAyF;AACzF,mHAAmH;AACnH,mBAAmB;AACnB,mFAAmF;AACnF,YAAY;AACZ,6DAA6D;AAC7D,mCAAmC;AACnC,YAAY;AACZ,mBAAmB;AACnB,2BAA2B;AAC3B,yDAAyD;AACzD,mCAAmC;AACnC,cAAc;AACd,iDAAiD;AACjD,yBAAyB;AACzB,uBAAuB;AACvB,gGAAgG;AAChG,kGAAkG;AAClG,iFAAiF;AACjF,mIAAmI;AACnI,6GAA6G;AAC7G,0EAA0E;AAC1E,iFAAiF;AACjF,kCAAkC;AAClC,yBAAyB;AACzB,qCAAqC;AACrC,4BAA4B;AAC5B,mDAAmD;AACnD,qDAAqD;AACrD,qDAAqD;AACrD,6CAA6C;AAC7C,+CAA+C;AAC/C,qDAAqD;AACrD,2CAA2C;AAC3C,uCAAuC;AACvC,0CAA0C;AAC1C,yCAAyC;AACzC,wCAAwC;AACxC,oGAAoG;AACpG,uCAAuC;AACvC,oHAAoH;AACpH,gHAAgH;AAChH,+GAA+G;AAC/G,uFAAuF;AACvF,yEAAyE;AACzE,6EAA6E;AAE7E,sFAAsF;AACtF,0GAA0G;AAC1G,6DAA6D;AAC7D,uCAAuC;AACvC,iFAAiF;AACjF,qDAAqD;AACrD,+BAA+B;AAC/B,gDAAgD;AAChD,4BAA4B;AAC5B,oCAAoC;AACpC,sBAAsB;AACtB,2CAA2C;AAC3C,oBAAoB;AACpB,0CAA0C;AAC1C,iCAAiC;AACjC,uDAAuD;AACvD,kCAAkC;AAClC,+DAA+D;AAC/D,yBAAyB;AACzB,8BAA8B;AAC9B,yBAAyB;AACzB,kBAAkB;AAClB,iBAAiB;AACjB,6BAA6B;AAC7B,YAAY;AACZ,YAAY;AACZ,UAAU;AACV,MAAM;AACN,KAAK;AAEL,8CAA8C","sourcesContent":["// /** @jsxRuntime classic */\n// /** @jsx jsx */\n// import { jsx } from '@theme-ui/core'\n// import React, { ComponentProps, ComponentType } from 'react'\n// import type { ResponsiveSSRStyles } from './index'\n// import { SSRMediaQuery } from '../provider/fresnel'\n// import { StyleSheetCache } from './cache'\n\n// type Props<T> = {\n//   Component: ComponentType<T>\n//   responsiveStyles: ResponsiveSSRStyles\n//   style: unknown\n//   containerStyles?: any\n//   // nativeStyle?: StyledProps<T>['style']\n// }\n\n// const SSR = React.forwardRef(function SSRComponent<T>(\n//   {\n//     responsiveStyles,\n//     Component,\n//     style,\n//     containerStyles = {},\n//     // nativeStyle,\n//     ...props\n//   }: Props<T>,\n//   ref: T\n// ) {\n//   return (\n//     <>\n//       {responsiveStyles.map((breakpointStyle = {}, breakpointIndex) => {\n//         const responsiveProps: Omit<\n//           ComponentProps<typeof SSRMediaQuery>,\n//           'children'\n//         > = {}\n//         if (breakpointIndex === responsiveStyles.length - 1) {\n//           // for the last item in the array, it should go from here until larger sizes\n//           responsiveProps.greaterThanOrEqual = `${breakpointIndex}` as typeof responsiveProps.greaterThanOrEqual\n//         } else {\n//           responsiveProps.at = `${breakpointIndex}` as typeof responsiveProps.at\n//         }\n//         const cachedBreakpointStyle = StyleSheetCache.get(\n//           breakpointStyle as any\n//         )\n//         return (\n//           <SSRMediaQuery\n//             key={`ssr-media-query-${breakpointIndex}`}\n//             {...responsiveProps}\n//           >\n//             {(classNames, renderChildren) => {\n//               return (\n//                 <div\n//                   // here we're using theme-ui's JSX to style this div, which wraps our items\n//                   // I'm adding some reset styles to it so that it defaults to matching a view.\n//                   // these styles match the reset from react-native-web's View\n//                   // https://github.com/necolas/react-native-web/blob/master/packages/react-native-web/src/exports/View/index.js\n//                   // This isn't guaranteed to match RNW, but it's probably as good as this library can do.\n//                   // TODO: Figure out why this is throwing a type error\n//                   // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n//                   // @ts-ignore\n//                   sx={\n//                     renderChildren\n//                       ? {\n//                           alignItems: 'stretch',\n//                           border: '0 solid black',\n//                           boxSizing: 'border-box',\n//                           display: 'flex',\n//                           flexBasis: 'auto',\n//                           flexDirection: 'column',\n//                           flexShrink: 0,\n//                           margin: 0,\n//                           minHeight: 0,\n//                           minWidth: 0,\n//                           padding: 0,\n//                           // position: 'relative', Remove this to not mess with absolute position\n//                           zIndex: 0,\n//                           // Experimental: forward the flex value from the View in case this item should stretch.\n//                           // This might be a bad idea; I'm not sure if flex functions the same on Web and RN.\n//                           // But it helps you use the webContainerSx prop less. So I'll sit on it for now...\n//                           // https://github.com/necolas/react-native-web/issues/1227\n//                           // flex: breakpointStyle.flex ?? style.flex,\n//                           // This has weird effects. I decided against it.\n\n//                           // this prevents the container from catching any touches.\n//                           // without this, we might get in the way of a View's pointerEvents=\"box-none\"\n//                           pointerEvents: 'none!important',\n//                           '& > *': {\n//                             // reset chilren to accept pointer events again ðŸ˜‡\n//                             pointerEvents: 'auto',\n//                           },\n//                           ...containerStyles,\n//                         }\n//                       : undefined\n//                   }\n//                   className={classNames}\n//                 >\n//                   {!!renderChildren ? (\n//                     <Component\n//                       {...((props as unknown) as T)}\n//                       ref={ref}\n//                       style={[style, cachedBreakpointStyle]}\n//                     />\n//                   ) : null}\n//                 </div>\n//               )\n//             }}\n//           </SSRMediaQuery>\n//         )\n//       })}\n//     </>\n//   )\n// })\n\n// export const SSRComponent = React.memo(SSR)\n"]}