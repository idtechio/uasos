{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/interactions/pressable/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ComponentProps } from 'react'\nimport type { MotiView } from '@motify/components'\nimport type { ViewStyle, Insets, PressableProps } from 'react-native'\nimport type { MotiAnimationProp, MotiTransition } from '@motify/core'\nimport type Animated from 'react-native-reanimated'\n\nexport type MotiPressableInteractionState = {\n  hovered: boolean\n  pressed: boolean\n}\n\nexport type AnimateProp = MotiAnimationProp<ViewStyle>\n\ntype Interactable<T> = (\n  interaction: MotiPressableInteractionState\n) => NonNullable<T>\n\ntype InteractableProp<T> = Interactable<T> | T\n\nexport type MotiPressableInteractionProp = Interactable<AnimateProp>\n\nexport type MotiPressableTransitionProp = InteractableProp<MotiTransition>\n\nexport type MotiPressableProp = InteractableProp<AnimateProp>\n\nexport type MotiPressableProps = {\n  onFocus?: () => void\n  onBlur?: () => void\n  /*\n   * Worklet that returns the `transition` prop. Or, just a normal `transition` prop, similar to `MotiView`.\n   *\n   * It's recomended that you memoize this prop with `useMemo`.\n   *\n   * ```tsx\n   * <MotiPressable\n   *   transition={useMemo(() => ({ hovered, pressed }) => {\n   *    'worklet'\n   *     return {\n   *      delay: hovered || pressed ? 0 : 200\n   *    }\n   *   }, [])}\n   * />\n   * ```\n   *\n   * @worklet\n   */\n  transition?: MotiPressableTransitionProp\n  /*\n   * Worklet that returns the `animated` prop. Or, just a normal `animate` prop, similar to `MotiView`.\n   *\n   * It's recomended that you memoize this prop with `useMemo`.\n   *\n   * ```tsx\n   * <MotiPressable\n   *   animate={useMemo(() => ({ hovered, pressed }) => {\n   *    'worklet'\n   *     return {\n   *      opacity: hovered ? 0.8 : 1\n   *    }\n   *   }, [])}\n   * />\n   * ```\n   *\n   * @worklet\n   */\n  animate?: MotiPressableProp\n  /*\n   * @deprecated\n   *\n   * The `state` prop is not available with this component.\n   */\n  state?: never\n  onPress?: () => void\n  onPressIn?: () => void\n  onPressOut?: () => void\n  onHoverIn?: () => void\n  onHoverOut?: () => void\n  onLongPress?: () => void\n  hitSlop?: Insets\n  /*\n   * (Optional) Unique ID to identify this interaction.\n   *\n   * If set, then other children of this component can access the interaction state\n   */\n  id?: string\n  disabled?: boolean\n  containerStyle?: ViewStyle\n  dangerouslySilenceDuplicateIdsWarning?: boolean\n  /*\n   * (Optional) a custom shared value to track the `pressed` state.\n   * This lets you get access to the pressed state from outside of the component in a controlled fashion.\n   */\n  pressedValue?: Animated.SharedValue<boolean>\n  /*\n   * (Optional) a custom shared value to track the `pressed` state.\n   * This lets you get access to the pressed state from outside of the component in a controlled fashion.\n   */\n  hoveredValue?: Animated.SharedValue<boolean>\n  /**\n   * `onLayout` for the container component.\n   */\n  onContainerLayout?: PressableProps['onLayout']\n  href?: string\n} & Pick<\n  ComponentProps<typeof MotiView>,\n  'children' | 'exit' | 'from' | 'exitTransition' | 'style' | 'onLayout'\n> &\n  Pick<\n    PressableProps,\n    | 'accessibilityActions'\n    | 'accessibilityElementsHidden'\n    | 'accessibilityHint'\n    | 'accessibilityIgnoresInvertColors'\n    | 'accessibilityLabel'\n    | 'accessibilityLiveRegion'\n    | 'accessibilityRole'\n    | 'accessibilityState'\n    | 'accessibilityValue'\n    | 'accessibilityViewIsModal'\n    | 'accessible'\n    | 'onAccessibilityTap'\n    | 'onAccessibilityAction'\n    | 'onAccessibilityEscape'\n    | 'importantForAccessibility'\n  >\n"]}