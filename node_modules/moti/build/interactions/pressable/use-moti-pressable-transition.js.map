{"version":3,"file":"use-moti-pressable-transition.js","sourceRoot":"","sources":["../../../src/interactions/pressable/use-moti-pressable-transition.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AAEzD,OAAO,EAA+B,uBAAuB,EAAE,MAAM,WAAW,CAAA;AAChF,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAA;AAwEzD,MAAM,UAAU,0BAA0B,CACxC,WAAwE,EACxE,kBAA6D,EAC7D,SAA0B;IAE1B,MAAM,OAAO,GAAG,uBAAuB,EAAE,CAAA;IAEzC,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,UAAU,CACtC,+BAA+B,EAC/B,WAAW,EACX,kBAAkB,EAClB,SAAS,CACV,CAAA;IAED,OAAO,eAAe,CAAiB,GAAG,EAAE;QAC1C,OAAO,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAA;IACzD,CAAC,EAAE,IAAI,CAAC,CAAA;AACV,CAAC","sourcesContent":["import type { MotiPressableInteractionState } from './types'\nimport { useDerivedValue } from 'react-native-reanimated'\nimport type Animated from 'react-native-reanimated'\nimport { MotiPressableInteractionIds, useMotiPressableContext } from './context'\nimport { useFactory } from './use-validate-factory-or-id'\nimport type { MotiTransition } from '@motify/core'\n\ntype Factory<Props> = (interaction: MotiPressableInteractionState) => Props\n\n/**\n * `useMotiPressableTransition` lets you access the pressable state, and create a custom moti transition from it.\n *\n * You probably won't need this hook. A normal `transition` prop on components should suffice. However, if you want to transition differently based on whether you are or aren't interacting with something (such as for a tooltip), then this hook comes in handy.\n *\n * Please refer to the Moti `transition` options to see what this hook should return.\n *\n * Example:\n * ```tsx\n * const transition = useMotiPressableTransition(({ pressed, hovered }) => {\n *   'worklet'\n *\n *   if (pressed) {\n *     return {\n *       type: 'timing'\n *     }\n *   }\n *\n *   return {\n *     type: 'spring',\n *     delay: 50\n *   }\n * })\n *\n * return <MotiView transition={transition} />\n * ```\n *\n * If you're passing a unique `id` prop to your pressable, you can also isolate this hook to that pressable.\n *\n * Say the parent pressable has `id=\"list\"`, and you want to isolate this hook to the `list` pressable:\n *\n * ```tsx\n * <MotiPressable id=\"menu\">\n *   <Item />\n * </MotiPressable>\n * ```\n *\n * Then, in the `Item` component:\n *\n * ```tsx\n * const transition = useMotiPressableTransition(\"list\", ({ pressed }) => {\n *   'worklet'\n *\n *   if (pressed) {\n *     return {\n *       type: 'timing'\n *     }\n *   }\n *\n *   return {\n *     type: 'spring',\n *     delay: 50\n *   }\n * })\n *\n * return <MotiView transition={transition} />\n * ```\n */\nexport function useMotiPressableTransition(\n  id: MotiPressableInteractionIds['id'],\n  factory: Factory<MotiTransition>,\n  deps?: readonly any[]\n): Readonly<Animated.SharedValue<MotiTransition>>\nexport function useMotiPressableTransition(\n  factory: Factory<MotiTransition>,\n  deps?: readonly any[]\n): Readonly<Animated.SharedValue<MotiTransition>>\nexport function useMotiPressableTransition(\n  factoryOrId: Factory<MotiTransition> | MotiPressableInteractionIds['id'],\n  maybeFactoryOrDeps?: Factory<MotiTransition> | readonly any[],\n  maybeDeps?: readonly any[]\n): Readonly<Animated.SharedValue<MotiTransition>> {\n  const context = useMotiPressableContext()\n\n  const { factory, id, deps } = useFactory<Factory<MotiTransition>>(\n    'useMotiPressableAnimatedProps',\n    factoryOrId,\n    maybeFactoryOrDeps,\n    maybeDeps\n  )\n\n  return useDerivedValue<MotiTransition>(() => {\n    return context && factory(context.containers[id].value)\n  }, deps)\n}\n"]}