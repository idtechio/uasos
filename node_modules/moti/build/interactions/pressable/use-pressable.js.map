{"version":3,"file":"use-pressable.js","sourceRoot":"","sources":["../../../src/interactions/pressable/use-pressable.ts"],"names":[],"mappings":"AAAA,OAAO,EAA+B,uBAAuB,EAAE,MAAM,WAAW,CAAA;AAEhF,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AAEzD,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAA;AAC/B,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAA;AAkFzD,SAAS,gBAAgB,CACvB,WAA8C,EAC9C,kBAAkE,EAClE,SAA0B;IAE1B,MAAM,OAAO,GAAG,uBAAuB,EAAE,CAAA;IAEzC,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,UAAU,CACtC,kBAAkB,EAClB,WAAW,EACX,kBAAkB,EAClB,SAAS,CACV,CAAA;IAED,MAAM,OAAO,GAAG,eAAe,CAAC,GAAG,EAAE;QACnC,MAAM,WAAW,GAAG,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;QAE1C,OAAO,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;IAClD,CAAC,EAAE,IAAI,CAAC,CAAA;IAER,OAAO,OAAO,CACZ,GAAG,EAAE,CAAC,CAAC;QACL,OAAO;KACR,CAAC,EACF,CAAC,OAAO,CAAC,CACV,CAAA;AACH,CAAC;AAED,OAAO,EAAE,gBAAgB,EAAE,CAAA","sourcesContent":["import { MotiPressableInteractionIds, useMotiPressableContext } from './context'\nimport type { MotiPressableInteractionProp } from './types'\nimport { useDerivedValue } from 'react-native-reanimated'\nimport type { MotiProps } from '@motify/core'\nimport { useMemo } from 'react'\nimport { useFactory } from './use-validate-factory-or-id'\n\ntype Id = MotiPressableInteractionIds['id']\n\n/**\n * `useMotiPressable` lets you access the interaction state of a parent `MotiPressable` component.\n *\n * (If you need to access the interaction state of multiple `MotiPressable` parents, use `useMotiPressables` instead.)\n *\n * ```tsx\n * <MotiPressable>\n *   <Item />\n * </MotiPressable>\n * ```\n *\n * Then, in the `Item` component:\n *\n * ```tsx\n * const state = useMotiPressable(({ pressed }) => {\n *   'worklet'\n *\n *   return {\n *     opactiy: pressed ? 0.5 : 1,\n *   }\n * })\n *\n * return <MotiView state={state} />\n * ```\n *\n * You can also access a pressable via unique ID:\n *\n * ```tsx\n * <MotiPressable id=\"list\">\n *   <Item />\n * </MotiPressable>\n * ```\n *\n * Then, in the `Item` component, add `list` as the first argument of `useMotiPressable`:\n *\n * ```tsx\n * const state = useMotiPressable('list', ({ pressed }) => {\n *   'worklet'\n *\n *   return {\n *     opactiy: pressed ? 0.5 : 1,\n *   }\n * })\n *\n * return <MotiView state={state} />\n * ```\n *\n * Similar to `useMemo`, you can also pass in a dependency array as the last argument:\n *\n * ```tsx\n * const state = useMotiPressable('list', ({ pressed, hovered }) => {\n *   'worklet'\n *\n *   return {\n *     opactiy: pressed && !loading ? 0.5 : 1,\n *   }\n * }, [loading])\n */\nfunction useMotiPressable(\n  /**\n   * Function that receives the interaction state from the closest parent container and returns a style object.\n   * @worklet\n   */\n  factory: MotiPressableInteractionProp,\n  maybeDeps?: readonly any[]\n): MotiProps['state']\nfunction useMotiPressable(\n  /**\n   * Optional: the unique `id` prop of the parent `MotiPressable` component. Useful if you want to access a unique component's interaction state without.\n   */\n  id: Id,\n  /**\n   * Function that receives the interaction state from the parent whose `id` prop matches the first argument of `useMotiPressable`. Returns a style object.\n   * @worklet\n   */\n  factory: MotiPressableInteractionProp,\n  maybeDeps?: readonly any[]\n): MotiProps['state']\nfunction useMotiPressable(\n  factoryOrId: MotiPressableInteractionProp | Id,\n  maybeFactoryOrDeps?: MotiPressableInteractionProp | readonly any[],\n  maybeDeps?: readonly any[]\n): MotiProps['state'] {\n  const context = useMotiPressableContext()\n\n  const { factory, id, deps } = useFactory<MotiPressableInteractionProp>(\n    'useMotiPressable',\n    factoryOrId,\n    maybeFactoryOrDeps,\n    maybeDeps\n  )\n\n  const __state = useDerivedValue(() => {\n    const interaction = context.containers[id]\n\n    return interaction && factory(interaction.value)\n  }, deps)\n\n  return useMemo(\n    () => ({\n      __state,\n    }),\n    [__state]\n  )\n}\n\nexport { useMotiPressable }\n"]}