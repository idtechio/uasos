{"version":3,"file":"use-pressables.js","sourceRoot":"","sources":["../../../src/interactions/pressable/use-pressables.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwB,uBAAuB,EAAE,MAAM,WAAW,CAAA;AAEzE,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAA;AAM/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiDG;AACH,MAAM,UAAU,iBAAiB;AAC/B;;;GAGG;AACH,OAAgB,EAChB,OAAuB,EAAE;IAEzB,MAAM,OAAO,GAAG,uBAAuB,EAAE,CAAA;IAEzC,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,CAAC,IAAI,CACV,6RAA6R,CAC9R,CAAA;KACF;IAED,MAAM,OAAO,GAAG,eAAe,CAAC,GAAG,EAAE;QACnC,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;QAElD,OAAO,cAAc,CAAA;QACrB,uDAAuD;IACzD,CAAC,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;IAEjC,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;IAErD,OAAO,KAAK,CAAA;AACd,CAAC","sourcesContent":["import { MotiPressableContext, useMotiPressableContext } from './context'\nimport type { MotiPressableInteractionProp } from './types'\nimport { useDerivedValue } from 'react-native-reanimated'\nimport { useMemo } from 'react'\n\ntype Factory = (\n  containers: MotiPressableContext['containers']\n) => ReturnType<MotiPressableInteractionProp>\n\n/**\n * `useMotiPressables` lets you access the interaction state of *all* parent `MotiPressable` components.\n *\n * This offers more complex use-cases over `useMotiPressable`, which only lets you access the interaction state of a single parent `MotiPressable` at a time.\n *\n * Say you have a parent pressable, with a list of items:\n *\n * ```tsx\n * <MotiPressable id=\"list\">\n *   {items.map(({ id }) => (\n *     <MotiPressable id={'item-' + id} key={id}>\n *       <Item id={id}  />\n *     </MotiPressable>\n *   )}\n * </MotiPressable>\n * ```\n *\n * Then, in your component, you can access each unique `MotiPressable`'s interaction state:\n *\n * ```tsx\n * const Item = ({ id }) => {\n *  const state = useMotiPressables((containers) => {\n *    'worklet'\n *\n *    const list = containers.list.value\n *    const item = containers.['item-' + id].value\n *\n *    // when hovering a list,\n *    // fade out all items except the one actually hovered\n *\n *    let opacity = 1\n *    if (item.hovered || item.pressed) {\n *      opacity = 1\n *    } else if (list.hovered) {\n *      opacity = 0.7\n *    }\n *\n *    return {\n *      opacity,\n *    }\n *  })\n *\n *  return <MotiView state={state} />\n * }\n * ```\n *\n * Example shown [here](https://twitter.com/FernandoTheRojo/status/1430717474778066944)\n *\n * <img height={300} width={400} src=\"https://pbs.twimg.com/media/E9rqA35XIAQmbuk?format=jpg&name=4096x4096\" />\n */\nexport function useMotiPressables(\n  /**\n   * Function that receives the interaction state from all parent containers and returns a style object/\n   * @worklet\n   */\n  factory: Factory,\n  deps: readonly any[] = []\n) {\n  const context = useMotiPressableContext()\n\n  if (!deps) {\n    console.warn(\n      '[@motify/interactions] useMotiPressables is missing a dependency array as the second argument. https://moti.fyi/interactions/use-pressables. You can use this hook to your ESLint plugin for hooks using the additionalHooks field: https://www.npmjs.com/package/eslint-plugin-react-hooks'\n    )\n  }\n\n  const __state = useDerivedValue(() => {\n    const animatedResult = factory(context.containers)\n\n    return animatedResult\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [context.containers, ...deps])\n\n  const state = useMemo(() => ({ __state }), [__state])\n\n  return state\n}\n"]}