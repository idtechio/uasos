{"version":3,"file":"pressable.js","sourceRoot":"","sources":["../../../src/interactions/pressable/pressable.tsx"],"names":[],"mappings":"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","sourcesContent":["import { MotiView } from '@motify/components'\nimport React, { useMemo, ReactNode, forwardRef } from 'react'\nimport { Platform, Pressable } from 'react-native'\nimport type { View } from 'react-native'\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler'\nimport Animated, {\n  useSharedValue,\n  runOnJS,\n  useDerivedValue,\n} from 'react-native-reanimated'\n\nimport {\n  MotiPressableContext,\n  useMotiPressableContext,\n  INTERACTION_CONTAINER_ID,\n} from './context'\nimport { Hoverable } from './hoverable'\nimport type { MotiPressableInteractionState, MotiPressableProps } from './types'\n\nconst AnimatedTouchable = Animated.createAnimatedComponent(\n  TouchableWithoutFeedback\n)\n\nexport const MotiPressable = forwardRef<View, MotiPressableProps>(\n  function MotiPressable(props, ref) {\n    const {\n      animate,\n      from,\n      exit,\n      children,\n      exitTransition,\n      transition: transitionProp,\n      style,\n      onPressOut,\n      onPressIn,\n      onHoverIn,\n      onHoverOut,\n      onPress,\n      onLongPress,\n      hitSlop,\n      disabled,\n      containerStyle,\n      dangerouslySilenceDuplicateIdsWarning = false,\n      id,\n      hoveredValue,\n      pressedValue,\n      onLayout,\n      onContainerLayout,\n      // Accessibility props\n      accessibilityActions,\n      accessibilityElementsHidden,\n      accessibilityHint,\n      accessibilityIgnoresInvertColors,\n      accessibilityLabel,\n      accessibilityLiveRegion,\n      accessibilityRole,\n      accessibilityState,\n      accessibilityValue,\n      accessibilityViewIsModal,\n      accessible,\n      onAccessibilityTap,\n      onAccessibilityAction,\n      onAccessibilityEscape,\n      importantForAccessibility,\n      onFocus,\n      onBlur,\n      href,\n    } = props\n\n    const _hovered = useSharedValue(false)\n    const _pressed = useSharedValue(false)\n\n    const hovered = hoveredValue || _hovered\n    const pressed = pressedValue || _pressed\n\n    const interaction = useDerivedValue<MotiPressableInteractionState>(\n      () => ({\n        hovered: hovered.value,\n        pressed: pressed.value,\n      }),\n      [hovered, pressed]\n    )\n\n    const transition = useDerivedValue(() => {\n      if (typeof transitionProp === 'function') {\n        return transitionProp(interaction.value)\n      }\n\n      return transitionProp || {}\n    }, [transitionProp, interaction])\n\n    const __state = useDerivedValue(() => {\n      if (typeof animate === 'function') {\n        return animate(interaction.value)\n      }\n\n      return animate\n    }, [animate, interaction])\n\n    const state = useMemo(() => ({ __state }), [__state])\n\n    const updateInteraction = (\n      event: keyof MotiPressableInteractionState,\n      enabled: boolean,\n      callback?: () => void\n    ) => () => {\n      'worklet'\n\n      if (event === 'hovered') {\n        hovered.value = enabled\n      } else if (event === 'pressed') {\n        pressed.value = enabled\n      }\n      if (callback) {\n        runOnJS(callback)()\n      }\n    }\n\n    const child = (\n      <MotiView\n        from={from}\n        exit={exit}\n        transition={transition}\n        exitTransition={exitTransition}\n        state={state}\n        style={style}\n        onLayout={onLayout}\n      >\n        {children}\n      </MotiView>\n    )\n\n    let node: ReactNode\n    if (Platform.OS === 'web') {\n      node = (\n        <Hoverable\n          onHoverIn={updateInteraction('hovered', true, onHoverIn)}\n          onHoverOut={updateInteraction('hovered', false, onHoverOut)}\n          childRef={ref}\n        >\n          <Pressable\n            onLongPress={onLongPress}\n            hitSlop={hitSlop}\n            disabled={disabled}\n            style={containerStyle}\n            onPress={onPress}\n            onPressIn={updateInteraction('pressed', true, onPressIn)}\n            onPressOut={updateInteraction('pressed', false, onPressOut)}\n            ref={ref}\n            onLayout={onContainerLayout}\n            // Accessibility props\n            accessibilityActions={accessibilityActions}\n            accessibilityElementsHidden={accessibilityElementsHidden}\n            accessibilityHint={accessibilityHint}\n            accessibilityIgnoresInvertColors={accessibilityIgnoresInvertColors}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityLiveRegion={accessibilityLiveRegion}\n            accessibilityRole={accessibilityRole}\n            accessibilityState={accessibilityState}\n            accessibilityValue={accessibilityValue}\n            accessibilityViewIsModal={accessibilityViewIsModal}\n            accessible={accessible}\n            onAccessibilityTap={onAccessibilityTap}\n            onAccessibilityAction={onAccessibilityAction}\n            onAccessibilityEscape={onAccessibilityEscape}\n            importantForAccessibility={importantForAccessibility}\n            // @ts-expect-error RNW types\n            onFocus={onFocus}\n            onBlur={onBlur}\n            href={href}\n          >\n            {child}\n          </Pressable>\n        </Hoverable>\n      )\n    } else {\n      node = (\n        <AnimatedTouchable\n          onPressIn={updateInteraction('pressed', true, onPressIn)}\n          onPressOut={updateInteraction('pressed', false, onPressOut)}\n          onLongPress={onLongPress}\n          hitSlop={hitSlop}\n          disabled={disabled}\n          onPress={onPress}\n          // @ts-expect-error incorrect ref types, lol\n          ref={ref}\n          onLayout={onContainerLayout}\n          containerStyle={containerStyle}\n          // Accessibility props\n          accessibilityActions={accessibilityActions}\n          accessibilityElementsHidden={accessibilityElementsHidden}\n          accessibilityHint={accessibilityHint}\n          accessibilityIgnoresInvertColors={accessibilityIgnoresInvertColors}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityLiveRegion={accessibilityLiveRegion}\n          accessibilityRole={accessibilityRole}\n          accessibilityState={accessibilityState}\n          accessibilityValue={accessibilityValue}\n          accessibilityViewIsModal={accessibilityViewIsModal}\n          accessible={accessible}\n          onAccessibilityTap={onAccessibilityTap}\n          onAccessibilityAction={onAccessibilityAction}\n          onAccessibilityEscape={onAccessibilityEscape}\n          importantForAccessibility={importantForAccessibility}\n          onFocus={onFocus}\n          onBlur={onBlur}\n        >\n          {child}\n        </AnimatedTouchable>\n      )\n    }\n\n    const context = useMotiPressableContext()\n\n    if (\n      !dangerouslySilenceDuplicateIdsWarning &&\n      id &&\n      context?.containers &&\n      id in context.containers\n    ) {\n      console.error(\n        `[MotiPressable] Duplicate id ${id} used. This means that you incorrectly placed a <MotiPressable id=\"${id}\" /> component inside another one with the same id.\n\nTo silence this warning without solving the actual issue, you can use the dangerouslySilenceDuplicateIdsWarning prop. But you should probably refactor your code instead.`\n      )\n    }\n\n    return (\n      <MotiPressableContext.Provider\n        value={useMemo(() => {\n          const interactions = {\n            containers: {\n              ...context?.containers,\n              [INTERACTION_CONTAINER_ID]: interaction,\n            },\n          }\n          if (id) {\n            interactions.containers[id] = interaction\n          }\n          return interactions\n        }, [context?.containers, id, interaction])}\n      >\n        {node}\n      </MotiPressableContext.Provider>\n    )\n  }\n)\n"]}